import { AbstractFileExchange, FileListResponse, FileResponse, ModalType, Page, TypeListResponse, TypeResponse } from './FileExchangeModel';
import { T1CLibException } from '../../core/exceptions/CoreExceptions';
import { BoolDataResponse, DataArrayResponse, DataResponse } from '../../core/service/CoreModel';
import { GenericContainer } from '../GenericContainer';
import { LocalConnection } from '../../core/client/Connection';
export declare class FileExchange extends GenericContainer implements AbstractFileExchange {
    static CONTAINER_PREFIX: string;
    static DOWNLOAD: string;
    static UPLOAD: string;
    static TYPE_CREATE: string;
    static TYPE_DIRS_CREATE: string;
    static TYPE_UPDATE: string;
    static TYPES_LIST: string;
    static TYPE_LIST: string;
    static TYPE_CONTENT_LIST: string;
    static TYPE_DELETE: string;
    static TYPE_EXISTS: string;
    static FILE_EXISTS: string;
    static FILE_MOVE: string;
    static FILE_COPY: string;
    static FILE_RENAME: string;
    static MODAL_SHOW: string;
    static ACCESS_MODE: string;
    static CONTAINERS_ENABLED: string;
    static DIR_CREATE: string;
    static FILE_INFO: string;
    constructor(baseUrl: string, containerUrl: string, connection: LocalConnection);
    copyFile(entity: string, from_type: string, to_type: string, filename: string, new_filename: string, from_rel_path?: [string], to_rel_path?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    createDir(entity: string, type: string, rel_path: [string], recursive?: boolean, callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    createType(entity: string, type: string, initabspath?: [string], showModal?: boolean, timeoutInSeconds?: number, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    createTypeDirs(entity: string, type: string, relpath: [string], showModal?: boolean, timeoutInSeconds?: number, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    deleteType(entity: string, type: string, callback?: (error: T1CLibException, data: boolean) => void): Promise<boolean>;
    download(entity: string, type: string, file: Blob, filename: string, rel_path?: [string], implicit_creation_type?: boolean, notify_on_completion?: boolean, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<DataResponse>;
    existsFile(entity: string, type: string, rel_path: [string], callback?: (error: T1CLibException, data: BoolDataResponse) => void): Promise<BoolDataResponse>;
    existsType(entity: string, type: string, callback?: (error: T1CLibException, data: BoolDataResponse) => void): Promise<BoolDataResponse>;
    getAccessMode(entity: string, type: string, relpath?: [string], callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
    getEnabledContainers(callback?: (error: T1CLibException, data: DataArrayResponse) => void): Promise<DataArrayResponse>;
    getFileInfo(entity: string, type: string, filename: string, rel_path?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    listContent(entity: string, page?: Page, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    listType(entity: string, type: string, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    listTypeContent(entity: string, type: string, rel_path?: [string], page?: Page, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    listTypes(entity: string, page?: Page, callback?: (error: T1CLibException, data: TypeListResponse) => void): Promise<TypeListResponse>;
    moveFile(entity: string, from_type: string, to_type: string, filename: string, from_rel_path?: [string], to_rel_path?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    renameFile(entity: string, type: string, filename: string, new_filename: string, rel_path?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    showModal(title: string, text: string, modal: ModalType, timeoutInSeconds?: number, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<boolean>;
    updateType(entity: string, type: string, timeoutInSeconds?: number, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    upload(entity: string, type: string, filename: string, rel_path?: [string], notify_on_completion?: boolean, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<ArrayBuffer>;
}
