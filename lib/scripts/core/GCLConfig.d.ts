import { Pkcs11ModuleConfig } from '../plugins/smartcards/pkcs11/pkcs11Model';
import { T1CContainerid } from './service/CoreModel';
export declare class GCLConfigOptions {
    gclUrl?: string;
    gwOrProxyUrl?: string;
    apiKey?: string;
    gwJwt?: string;
    tokenExchangeContextPath?: string;
    ocvContextPath?: string;
    dsContextPath?: string;
    dsFileContextPath?: string;
    pkcs11Config?: Pkcs11ModuleConfig;
    agentPort?: number;
    implicitDownload?: boolean;
    forceHardwarePinpad?: boolean;
    sessionTimeout?: number;
    consentDuration?: number;
    consentTimeout?: number;
    syncManaged?: boolean;
    osPinDialog?: boolean;
    containerDownloadTimeout?: number;
    localTestMode?: boolean;
    lang?: string;
    providedContainers?: T1CContainerid[];
    constructor(gclUrl?: string, gwOrProxyUrl?: string, apiKey?: string, gwJwt?: string, tokenExchangeContextPath?: string, ocvContextPath?: string, dsContextPath?: string, dsFileContextPath?: string, pkcs11Config?: Pkcs11ModuleConfig, agentPort?: number, implicitDownload?: boolean, forceHardwarePinpad?: boolean, sessionTimeout?: number, consentDuration?: number, consentTimeout?: number, syncManaged?: boolean, osPinDialog?: boolean, containerDownloadTimeout?: number, localTestMode?: boolean, lang?: string, providedContainers?: T1CContainerid[]);
}
export declare class GCLConfig {
    private _gwUrl;
    private _gclUrl;
    private _dsContextPath;
    private _dsFileContextPath;
    private _ocvContextPath;
    private _apiKey;
    private _gwJwt;
    private _tokenExchangeContextPath;
    private _gclJwt;
    private _citrix;
    private _agentPort;
    private _localTestMode;
    private _forceHardwarePinpad;
    private _defaultSessionTimeout;
    private _tokenCompatible;
    private _v2Compatible;
    private _defaultConsentDuration;
    private _defaultConsentTimeout;
    private _pkcs11Config;
    private _osPinDialog;
    private _containerDownloadTimeout;
    private _contextToken;
    private _lang;
    private _providedContainers;
    private _activeContainers;
    constructor(options: GCLConfigOptions);
    get tokenExchangeContextPath(): string;
    set tokenExchangeContextPath(value: string);
    get authUrl(): string;
    get ocvUrl(): string;
    get ocvContextPath(): string;
    set ocvContextPath(value: string);
    get gclUrl(): string;
    set gclUrl(value: string);
    get dsUrl(): string;
    get dsContextPath(): string;
    set dsContextPath(value: string);
    get dsFileContextPath(): string;
    set dsFileContextPath(value: string);
    get apiKey(): string;
    set apiKey(value: string);
    get citrix(): boolean;
    set citrix(value: boolean);
    get agentPort(): number;
    set agentPort(value: number);
    get dsFileDownloadUrl(): string;
    get gwUrl(): string;
    set gwUrl(value: string);
    get localTestMode(): boolean;
    set localTestMode(value: boolean);
    get forceHardwarePinpad(): boolean;
    set forceHardwarePinpad(value: boolean);
    get defaultSessionTimeout(): number;
    set defaultSessionTimeout(value: number);
    get tokenCompatible(): boolean;
    set tokenCompatible(value: boolean);
    get v2Compatible(): boolean;
    set v2Compatible(value: boolean);
    get defaultConsentDuration(): number;
    set defaultConsentDuration(value: number);
    get defaultConsentTimeout(): number;
    set defaultConsentTimeout(value: number);
    get pkcs11Config(): Pkcs11ModuleConfig;
    set pkcs11Config(value: Pkcs11ModuleConfig);
    get osPinDialog(): boolean;
    set osPinDialog(value: boolean);
    get containerDownloadTimeout(): number;
    set containerDownloadTimeout(value: number);
    get gwJwt(): Promise<string>;
    get contextToken(): string;
    set contextToken(value: string);
    get gclJwt(): string;
    set gclJwt(value: string);
    get lang(): string;
    set lang(value: string);
    get overrideContainers(): T1CContainerid[];
    set overrideContainers(value: T1CContainerid[]);
    get activeContainers(): Map<string, string[]>;
    set activeContainers(value: Map<string, string[]>);
    getGwJwt(): Promise<string>;
}
