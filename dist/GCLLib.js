var GCLLib =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(329);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(2);
	
	__webpack_require__(325);
	
	__webpack_require__(326);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(57);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(70);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(85);
	__webpack_require__(87);
	__webpack_require__(89);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(132);
	__webpack_require__(133);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(140);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(158);
	__webpack_require__(159);
	__webpack_require__(161);
	__webpack_require__(162);
	__webpack_require__(168);
	__webpack_require__(169);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(173);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(181);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(185);
	__webpack_require__(186);
	__webpack_require__(189);
	__webpack_require__(191);
	__webpack_require__(192);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(201);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(205);
	__webpack_require__(206);
	__webpack_require__(216);
	__webpack_require__(220);
	__webpack_require__(221);
	__webpack_require__(223);
	__webpack_require__(224);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(259);
	__webpack_require__(261);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(267);
	__webpack_require__(268);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(289);
	__webpack_require__(290);
	__webpack_require__(291);
	__webpack_require__(292);
	__webpack_require__(293);
	__webpack_require__(294);
	__webpack_require__(295);
	__webpack_require__(296);
	__webpack_require__(298);
	__webpack_require__(299);
	__webpack_require__(300);
	__webpack_require__(301);
	__webpack_require__(302);
	__webpack_require__(303);
	__webpack_require__(304);
	__webpack_require__(305);
	__webpack_require__(306);
	__webpack_require__(307);
	__webpack_require__(308);
	__webpack_require__(310);
	__webpack_require__(311);
	__webpack_require__(312);
	__webpack_require__(313);
	__webpack_require__(314);
	__webpack_require__(315);
	__webpack_require__(316);
	__webpack_require__(317);
	__webpack_require__(318);
	__webpack_require__(319);
	__webpack_require__(320);
	__webpack_require__(323);
	__webpack_require__(324);
	module.exports = __webpack_require__(9);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var DESCRIPTORS = __webpack_require__(6);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var META = __webpack_require__(22).KEY;
	var $fails = __webpack_require__(7);
	var shared = __webpack_require__(23);
	var setToStringTag = __webpack_require__(24);
	var uid = __webpack_require__(19);
	var wks = __webpack_require__(25);
	var wksExt = __webpack_require__(26);
	var wksDefine = __webpack_require__(27);
	var keyOf = __webpack_require__(29);
	var enumKeys = __webpack_require__(42);
	var isArray = __webpack_require__(45);
	var anObject = __webpack_require__(12);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var createDesc = __webpack_require__(17);
	var _create = __webpack_require__(46);
	var gOPNExt = __webpack_require__(49);
	var $GOPD = __webpack_require__(51);
	var $DP = __webpack_require__(11);
	var $keys = __webpack_require__(30);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(28)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key) {
	    if (isSymbol(key)) return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var ctx = __webpack_require__(20);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.5.0' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(12);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var toPrimitive = __webpack_require__(16);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function () {
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var document = __webpack_require__(4).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var has = __webpack_require__(5);
	var SRC = __webpack_require__(19)('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function (it) {
	  return $toString.call(it);
	};
	
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(19)('meta');
	var isObject = __webpack_require__(13);
	var has = __webpack_require__(5);
	var setDesc = __webpack_require__(11).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f;
	var has = __webpack_require__(5);
	var TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(23)('wks');
	var uid = __webpack_require__(19);
	var Symbol = __webpack_require__(4).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var LIBRARY = __webpack_require__(28);
	var wksExt = __webpack_require__(26);
	var defineProperty = __webpack_require__(11).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = false;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys = __webpack_require__(30);
	var toIObject = __webpack_require__(32);
	module.exports = function (object, el) {
	  var O = toIObject(object);
	  var keys = getKeys(O);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) if (O[key = keys[index++]] === el) return key;
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(31);
	var enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(5);
	var toIObject = __webpack_require__(32);
	var arrayIndexOf = __webpack_require__(36)(false);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33);
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	var toAbsoluteIndex = __webpack_require__(39);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys');
	var uid = __webpack_require__(19);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(43);
	var pIE = __webpack_require__(44);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(12);
	var dPs = __webpack_require__(47);
	var enumBugKeys = __webpack_require__(41);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11);
	var anObject = __webpack_require__(12);
	var getKeys = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(4).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32);
	var gOPN = __webpack_require__(50).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(31);
	var hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(44);
	var createDesc = __webpack_require__(17);
	var toIObject = __webpack_require__(32);
	var toPrimitive = __webpack_require__(16);
	var has = __webpack_require__(5);
	var IE8_DOM_DEFINE = __webpack_require__(14);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(46) });


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperty: __webpack_require__(11).f });


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', { defineProperties: __webpack_require__(47) });


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(32);
	var $getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	__webpack_require__(56)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var fails = __webpack_require__(7);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(58);
	var $getPrototypeOf = __webpack_require__(59);
	
	__webpack_require__(56)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(5);
	var toObject = __webpack_require__(58);
	var IE_PROTO = __webpack_require__(40)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(58);
	var $keys = __webpack_require__(30);
	
	__webpack_require__(56)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(56)('getOwnPropertyNames', function () {
	  return __webpack_require__(49).f;
	});


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13);
	var meta = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(69) });


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(30);
	var gOPS = __webpack_require__(43);
	var pIE = __webpack_require__(44);
	var toObject = __webpack_require__(58);
	var IObject = __webpack_require__(33);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { is: __webpack_require__(71) });


/***/ }),
/* 71 */
/***/ (function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(73).set });


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(75);
	var test = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  __webpack_require__(18)(Object.prototype, 'toString', function toString() {
	    return '[object ' + classof(this) + ']';
	  }, true);
	}


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34);
	var TAG = __webpack_require__(25)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', { bind: __webpack_require__(77) });


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction = __webpack_require__(21);
	var isObject = __webpack_require__(13);
	var invoke = __webpack_require__(78);
	var arraySlice = [].slice;
	var factories = {};
	
	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(11).f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var isObject = __webpack_require__(13);
	var getPrototypeOf = __webpack_require__(59);
	var HAS_INSTANCE = __webpack_require__(25)('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(11).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
	  if (typeof this != 'function' || !isObject(O)) return false;
	  if (!isObject(this.prototype)) return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
	  return false;
	} });


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(82);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt;
	var $trim = __webpack_require__(83).trim;
	var ws = __webpack_require__(84);
	var hex = /^[-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var fails = __webpack_require__(7);
	var spaces = __webpack_require__(84);
	var space = '[' + spaces + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');
	
	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = fails(function () {
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;


/***/ }),
/* 84 */
/***/ (function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(86);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat;
	var $trim = __webpack_require__(83).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var has = __webpack_require__(5);
	var cof = __webpack_require__(34);
	var inheritIfRequired = __webpack_require__(88);
	var toPrimitive = __webpack_require__(16);
	var fails = __webpack_require__(7);
	var gOPN = __webpack_require__(50).f;
	var gOPD = __webpack_require__(51).f;
	var dP = __webpack_require__(11).f;
	var $trim = __webpack_require__(83).trim;
	var NUMBER = 'Number';
	var $Number = global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = cof(__webpack_require__(46)(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default: return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++) {
	    if (has(Base, key = keys[j]) && !has($Number, key)) {
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var setPrototypeOf = __webpack_require__(73).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toInteger = __webpack_require__(38);
	var aNumberValue = __webpack_require__(90);
	var repeat = __webpack_require__(91);
	var $toFixed = 1.0.toFixed;
	var floor = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';
	
	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = aNumberValue(this, ERROR);
	    var f = toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function (it, msg) {
	  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	
	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $fails = __webpack_require__(7);
	var aNumberValue = __webpack_require__(90);
	var $toPrecision = 1.0.toPrecision;
	
	$export($export.P + $export.F * ($fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export = __webpack_require__(8);
	var _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { isInteger: __webpack_require__(96) });


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13);
	var floor = Math.floor;
	module.exports = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export = __webpack_require__(8);
	var isInteger = __webpack_require__(96);
	var abs = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseFloat = __webpack_require__(86);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $parseInt = __webpack_require__(82);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8);
	var log1p = __webpack_require__(104);
	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8);
	var $asinh = Math.asinh;
	
	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8);
	var $atanh = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8);
	var sign = __webpack_require__(108);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8);
	var $expm1 = __webpack_require__(112);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 112 */
/***/ (function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { fround: __webpack_require__(114) });


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var sign = __webpack_require__(108);
	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);
	
	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	module.exports = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = sign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8);
	var abs = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8);
	var $imul = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { log1p: __webpack_require__(104) });


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { sign: __webpack_require__(108) });


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(112);
	var exp = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8);
	var expm1 = __webpack_require__(112);
	var exp = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var toAbsoluteIndex = __webpack_require__(39);
	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toLength = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = toIObject(callSite.raw);
	    var len = toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(83)('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(128)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(129)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38);
	var defined = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(28);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var hide = __webpack_require__(10);
	var has = __webpack_require__(5);
	var Iterators = __webpack_require__(130);
	var $iterCreate = __webpack_require__(131);
	var setToStringTag = __webpack_require__(24);
	var getPrototypeOf = __webpack_require__(59);
	var ITERATOR = __webpack_require__(25)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 130 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(46);
	var descriptor = __webpack_require__(17);
	var setToStringTag = __webpack_require__(24);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(128)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(134);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(136)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(135);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13);
	var cof = __webpack_require__(34);
	var MATCH = __webpack_require__(25)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export = __webpack_require__(8);
	var context = __webpack_require__(134);
	var INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(136)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(91)
	});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export = __webpack_require__(8);
	var toLength = __webpack_require__(37);
	var context = __webpack_require__(134);
	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(136)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = context(this, searchString, STARTS_WITH);
	    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(141)('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function (string, tag, attribute, value) {
	  var S = String(defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(141)('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(141)('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(141)('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(141)('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(141)('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(141)('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(141)('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(141)('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(141)('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(141)('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(141)('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(141)('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8);
	var toISOString = __webpack_require__(157);
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
	  toISOString: toISOString
	});


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var fails = __webpack_require__(7);
	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;
	
	var lz = function (num) {
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	module.exports = (fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  $toISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  __webpack_require__(18)(DateProto, TO_STRING, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive');
	var proto = Date.prototype;
	
	if (!(TO_PRIMITIVE in proto)) __webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(160));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	var NUMBER = 'number';
	
	module.exports = function (hint) {
	  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', { isArray: __webpack_require__(45) });


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(20);
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var call = __webpack_require__(163);
	var isArrayIter = __webpack_require__(164);
	var toLength = __webpack_require__(37);
	var createProperty = __webpack_require__(165);
	var getIterFn = __webpack_require__(166);
	
	$export($export.S + $export.F * !__webpack_require__(167)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(130);
	var ITERATOR = __webpack_require__(25)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11);
	var createDesc = __webpack_require__(17);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(75);
	var ITERATOR = __webpack_require__(25)('iterator');
	var Iterators = __webpack_require__(130);
	module.exports = __webpack_require__(9).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(25)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var createProperty = __webpack_require__(165);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(170)(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var fails = __webpack_require__(7);
	
	module.exports = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
	  });
	};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var html = __webpack_require__(48);
	var cof = __webpack_require__(34);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function () {
	  if (html) arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length);
	    var klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice.call(this, begin, end);
	    var start = toAbsoluteIndex(begin, len);
	    var upTo = toAbsoluteIndex(end, len);
	    var size = toLength(upTo - start);
	    var cloned = Array(size);
	    var i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(58);
	var fails = __webpack_require__(7);
	var $sort = [].sort;
	var test = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function () {
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function () {
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(170)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $forEach = __webpack_require__(174)(0);
	var STRICT = __webpack_require__(170)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(20);
	var IObject = __webpack_require__(33);
	var toObject = __webpack_require__(58);
	var toLength = __webpack_require__(37);
	var asc = __webpack_require__(175);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(176);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	var isArray = __webpack_require__(45);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $map = __webpack_require__(174)(1);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $filter = __webpack_require__(174)(2);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $some = __webpack_require__(174)(3);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $every = __webpack_require__(174)(4);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(182);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21);
	var toObject = __webpack_require__(58);
	var IObject = __webpack_require__(33);
	var toLength = __webpack_require__(37);
	
	module.exports = function (that, callbackfn, aLen, memo, isRight) {
	  aFunction(callbackfn);
	  var O = toObject(that);
	  var self = IObject(O);
	  var length = toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $reduce = __webpack_require__(182);
	
	$export($export.P + $export.F * !__webpack_require__(170)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $indexOf = __webpack_require__(36)(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(170)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toIObject = __webpack_require__(32);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var $native = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(170)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
	    var O = toIObject(this);
	    var length = toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
	    return -1;
	  }
	});


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { copyWithin: __webpack_require__(187) });
	
	__webpack_require__(188)('copyWithin');


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', { fill: __webpack_require__(190) });
	
	__webpack_require__(188)('fill');


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	module.exports = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(174)(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(188)(KEY);


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8);
	var $find = __webpack_require__(174)(6);
	var KEY = 'findIndex';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(188)(KEY);


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(194)('Array');


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var dP = __webpack_require__(11);
	var DESCRIPTORS = __webpack_require__(6);
	var SPECIES = __webpack_require__(25)('species');
	
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(188);
	var step = __webpack_require__(196);
	var Iterators = __webpack_require__(130);
	var toIObject = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(129)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var inheritIfRequired = __webpack_require__(88);
	var dP = __webpack_require__(11).f;
	var gOPN = __webpack_require__(50).f;
	var isRegExp = __webpack_require__(135);
	var $flags = __webpack_require__(198);
	var $RegExp = global.RegExp;
	var Base = $RegExp;
	var proto = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;
	
	if (__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function () {
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = isRegExp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function (key) {
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function () { return Base[key]; },
	      set: function (it) { Base[key] = it; }
	    });
	  };
	  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(194)('RegExp');


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(200);
	var anObject = __webpack_require__(12);
	var $flags = __webpack_require__(198);
	var DESCRIPTORS = __webpack_require__(6);
	var TO_STRING = 'toString';
	var $toString = /./[TO_STRING];
	
	var define = function (fn) {
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if (__webpack_require__(7)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
	  define(function toString() {
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if ($toString.name != TO_STRING) {
	  define(function toString() {
	    return $toString.call(this);
	  });
	}


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(6) && /./g.flags != 'g') __webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(198)
	});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(202)('match', 1, function (defined, MATCH, $match) {
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var hide = __webpack_require__(10);
	var redefine = __webpack_require__(18);
	var fails = __webpack_require__(7);
	var defined = __webpack_require__(35);
	var wks = __webpack_require__(25);
	
	module.exports = function (KEY, length, exec) {
	  var SYMBOL = wks(KEY);
	  var fns = exec(defined, SYMBOL, ''[KEY]);
	  var strfn = fns[0];
	  var rxfn = fns[1];
	  if (fails(function () {
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  })) {
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return rxfn.call(string, this); }
	    );
	  }
	};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(202)('replace', 2, function (defined, REPLACE, $replace) {
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue) {
	    'use strict';
	    var O = defined(this);
	    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(202)('search', 1, function (defined, SEARCH, $search) {
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp) {
	    'use strict';
	    var O = defined(this);
	    var fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(202)('split', 2, function (defined, SPLIT, $split) {
	  'use strict';
	  var isRegExp = __webpack_require__(135);
	  var _split = $split;
	  var $push = [].push;
	  var $SPLIT = 'split';
	  var LENGTH = 'length';
	  var LAST_INDEX = 'lastIndex';
	  if (
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ) {
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function (separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while (match = separatorCopy.exec(string)) {
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          // eslint-disable-next-line no-loop-func
	          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
	            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
	          });
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    $split = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit) {
	    var O = defined(this);
	    var fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(28);
	var global = __webpack_require__(4);
	var ctx = __webpack_require__(20);
	var classof = __webpack_require__(75);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var aFunction = __webpack_require__(21);
	var anInstance = __webpack_require__(207);
	var forOf = __webpack_require__(208);
	var speciesConstructor = __webpack_require__(209);
	var task = __webpack_require__(210).set;
	var microtask = __webpack_require__(211)();
	var newPromiseCapabilityModule = __webpack_require__(212);
	var perform = __webpack_require__(213);
	var promiseResolve = __webpack_require__(214);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch (e) { /* empty */ }
	}();
	
	// helpers
	var sameConstructor = LIBRARY ? function (a, b) {
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	} : function (a, b) {
	  return a === b;
	};
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value);
	            if (domain) domain.exit();
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  if (promise._h == 1) return false;
	  var chain = promise._a || promise._c;
	  var i = 0;
	  var reaction;
	  while (chain.length > i) {
	    reaction = chain[i++];
	    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
	  } return true;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(215)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return sameConstructor($Promise, C)
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(194)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if (x instanceof $Promise && sameConstructor(x.constructor, this)) return x;
	    return promiseResolve(this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(167)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(20);
	var call = __webpack_require__(163);
	var isArrayIter = __webpack_require__(164);
	var anObject = __webpack_require__(12);
	var toLength = __webpack_require__(37);
	var getIterFn = __webpack_require__(166);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var SPECIES = __webpack_require__(25)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(20);
	var invoke = __webpack_require__(78);
	var html = __webpack_require__(48);
	var cel = __webpack_require__(15);
	var global = __webpack_require__(4);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(34)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var macrotask = __webpack_require__(210).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if (Observer) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    var promise = Promise.resolve();
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(21);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var newPromiseCapability = __webpack_require__(212);
	
	module.exports = function (C, x) {
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function (target, src, safe) {
	  for (var key in src) redefine(target, key, src[key], safe);
	  return target;
	};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(217);
	var validate = __webpack_require__(218);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(219)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(11).f;
	var create = __webpack_require__(46);
	var redefineAll = __webpack_require__(215);
	var ctx = __webpack_require__(20);
	var anInstance = __webpack_require__(207);
	var forOf = __webpack_require__(208);
	var $iterDefine = __webpack_require__(129);
	var step = __webpack_require__(196);
	var setSpecies = __webpack_require__(194);
	var DESCRIPTORS = __webpack_require__(6);
	var fastKey = __webpack_require__(22).fastKey;
	var validate = __webpack_require__(218);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var redefine = __webpack_require__(18);
	var redefineAll = __webpack_require__(215);
	var meta = __webpack_require__(22);
	var forOf = __webpack_require__(208);
	var anInstance = __webpack_require__(207);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var $iterDetect = __webpack_require__(167);
	var setToStringTag = __webpack_require__(24);
	var inheritIfRequired = __webpack_require__(88);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(217);
	var validate = __webpack_require__(218);
	var SET = 'Set';
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(219)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var each = __webpack_require__(174)(0);
	var redefine = __webpack_require__(18);
	var meta = __webpack_require__(22);
	var assign = __webpack_require__(69);
	var weak = __webpack_require__(222);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var validate = __webpack_require__(218);
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var tmp = {};
	var InternalMap;
	
	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(219)(WEAK_MAP, wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll = __webpack_require__(215);
	var getWeak = __webpack_require__(22).getWeak;
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var anInstance = __webpack_require__(207);
	var forOf = __webpack_require__(208);
	var createArrayMethod = __webpack_require__(174);
	var $has = __webpack_require__(5);
	var validate = __webpack_require__(218);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(222);
	var validate = __webpack_require__(218);
	var WEAK_SET = 'WeakSet';
	
	// 23.4 WeakSet Objects
	__webpack_require__(219)(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(validate(this, WEAK_SET), value, true);
	  }
	}, weak, false, true);


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var $typed = __webpack_require__(225);
	var buffer = __webpack_require__(226);
	var anObject = __webpack_require__(12);
	var toAbsoluteIndex = __webpack_require__(39);
	var toLength = __webpack_require__(37);
	var isObject = __webpack_require__(13);
	var ArrayBuffer = __webpack_require__(4).ArrayBuffer;
	var speciesConstructor = __webpack_require__(209);
	var $ArrayBuffer = buffer.ArrayBuffer;
	var $DataView = buffer.DataView;
	var $isView = $typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW = $typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
	    var len = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, len);
	    var final = toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < final) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(194)(ARRAY_BUFFER);


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var uid = __webpack_require__(19);
	var TYPED = uid('typed_array');
	var VIEW = uid('view');
	var ABV = !!(global.ArrayBuffer && global.DataView);
	var CONSTR = ABV;
	var i = 0;
	var l = 9;
	var Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while (i < l) {
	  if (Typed = global[TypedArrayConstructors[i++]]) {
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(4);
	var DESCRIPTORS = __webpack_require__(6);
	var LIBRARY = __webpack_require__(28);
	var $typed = __webpack_require__(225);
	var hide = __webpack_require__(10);
	var redefineAll = __webpack_require__(215);
	var fails = __webpack_require__(7);
	var anInstance = __webpack_require__(207);
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	var toIndex = __webpack_require__(227);
	var gOPN = __webpack_require__(50).f;
	var dP = __webpack_require__(11).f;
	var arrayFill = __webpack_require__(190);
	var setToStringTag = __webpack_require__(24);
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = global[ARRAY_BUFFER];
	var $DataView = global[DATA_VIEW];
	var Math = global.Math;
	var RangeError = global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
	var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
	var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	}
	
	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}
	
	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
	}
	
	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	}
	
	if (!$typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    this._b = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if (DESCRIPTORS) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!fails(function () {
	    $ArrayBuffer(1);
	  }) || !fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/ecma262/#sec-toindex
	var toInteger = __webpack_require__(38);
	var toLength = __webpack_require__(37);
	module.exports = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(225).ABV, {
	  DataView: __webpack_require__(226).DataView
	});


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	if (__webpack_require__(6)) {
	  var LIBRARY = __webpack_require__(28);
	  var global = __webpack_require__(4);
	  var fails = __webpack_require__(7);
	  var $export = __webpack_require__(8);
	  var $typed = __webpack_require__(225);
	  var $buffer = __webpack_require__(226);
	  var ctx = __webpack_require__(20);
	  var anInstance = __webpack_require__(207);
	  var propertyDesc = __webpack_require__(17);
	  var hide = __webpack_require__(10);
	  var redefineAll = __webpack_require__(215);
	  var toInteger = __webpack_require__(38);
	  var toLength = __webpack_require__(37);
	  var toIndex = __webpack_require__(227);
	  var toAbsoluteIndex = __webpack_require__(39);
	  var toPrimitive = __webpack_require__(16);
	  var has = __webpack_require__(5);
	  var classof = __webpack_require__(75);
	  var isObject = __webpack_require__(13);
	  var toObject = __webpack_require__(58);
	  var isArrayIter = __webpack_require__(164);
	  var create = __webpack_require__(46);
	  var getPrototypeOf = __webpack_require__(59);
	  var gOPN = __webpack_require__(50).f;
	  var getIterFn = __webpack_require__(166);
	  var uid = __webpack_require__(19);
	  var wks = __webpack_require__(25);
	  var createArrayMethod = __webpack_require__(174);
	  var createArrayIncludes = __webpack_require__(36);
	  var speciesConstructor = __webpack_require__(209);
	  var ArrayIterators = __webpack_require__(195);
	  var Iterators = __webpack_require__(130);
	  var $iterDetect = __webpack_require__(167);
	  var setSpecies = __webpack_require__(194);
	  var arrayFill = __webpack_require__(190);
	  var arrayCopyWithin = __webpack_require__(187);
	  var $DP = __webpack_require__(11);
	  var $GOPD = __webpack_require__(51);
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });
	
	  var toOffset = function (it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function (it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function (C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function (O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function (it, key, internal) {
	    dP(it, key, { get: function () { return this._d[internal]; } });
	  };
	
	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      } O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/* ...items */) {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) { // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      } return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function (target, key) {
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ) {
	      target[key] = desc.value;
	      return target;
	    } return dP(target, key, desc);
	  };
	
	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });
	
	  if (fails(function () { arrayToString.call({}); })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function () { /* noop */ },
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function () { return this[TYPED_ARRAY]; }
	  });
	
	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function (that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function (that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function (that, index) {
	      dP(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator
	      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function () { return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });
	
	    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
	      from: $from,
	      of: $of
	    });
	
	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
	
	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });
	
	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () { /* empty */ };


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(230)('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var rApply = (__webpack_require__(4).Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function () {
	  rApply(function () { /* empty */ });
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = aFunction(target);
	    var L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export = __webpack_require__(8);
	var create = __webpack_require__(46);
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	var fails = __webpack_require__(7);
	var bind = __webpack_require__(77);
	var rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  rConstruct(function () { /* empty */ });
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP = __webpack_require__(11);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export = __webpack_require__(8);
	var gOPD = __webpack_require__(51).f;
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var Enumerate = function (iterated) {
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = [];      // keys
	  var key;
	  for (key in iterated) keys.push(key);
	};
	__webpack_require__(131)(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD = __webpack_require__(51);
	var getPrototypeOf = __webpack_require__(59);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var isObject = __webpack_require__(13);
	var anObject = __webpack_require__(12);
	
	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD = __webpack_require__(51);
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export = __webpack_require__(8);
	var getProto = __webpack_require__(59);
	var anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return getProto(anObject(target));
	  }
	});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', { ownKeys: __webpack_require__(250) });


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN = __webpack_require__(50);
	var gOPS = __webpack_require__(43);
	var anObject = __webpack_require__(12);
	var Reflect = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
	  var keys = gOPN.f(anObject(it));
	  var getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export = __webpack_require__(8);
	var anObject = __webpack_require__(12);
	var $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP = __webpack_require__(11);
	var gOPD = __webpack_require__(51);
	var getPrototypeOf = __webpack_require__(59);
	var has = __webpack_require__(5);
	var $export = __webpack_require__(8);
	var createDesc = __webpack_require__(17);
	var anObject = __webpack_require__(12);
	var isObject = __webpack_require__(13);
	
	function set(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = gOPD.f(anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (isObject(proto = getPrototypeOf(target))) {
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if (has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !isObject(receiver)) return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export = __webpack_require__(8);
	var setProto = __webpack_require__(73);
	
	if (setProto) $export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export = __webpack_require__(8);
	var $includes = __webpack_require__(36)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(188)('includes');


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(256);
	var toObject = __webpack_require__(58);
	var toLength = __webpack_require__(37);
	var aFunction = __webpack_require__(21);
	var arraySpeciesCreate = __webpack_require__(175);
	
	$export($export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen, A;
	    aFunction(callbackfn);
	    sourceLen = toLength(O.length);
	    A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});
	
	__webpack_require__(188)('flatMap');


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var isArray = __webpack_require__(45);
	var isObject = __webpack_require__(13);
	var toLength = __webpack_require__(37);
	var ctx = __webpack_require__(20);
	var IS_CONCAT_SPREADABLE = __webpack_require__(25)('isConcatSpreadable');
	
	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;
	
	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
	
	      spreadable = false;
	      if (isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
	      }
	
	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }
	
	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}
	
	module.exports = flattenIntoArray;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
	var $export = __webpack_require__(8);
	var flattenIntoArray = __webpack_require__(256);
	var toObject = __webpack_require__(58);
	var toLength = __webpack_require__(37);
	var toInteger = __webpack_require__(38);
	var arraySpeciesCreate = __webpack_require__(175);
	
	$export($export.P, 'Array', {
	  flatten: function flatten(/* depthArg = 1 */) {
	    var depthArg = arguments[0];
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});
	
	__webpack_require__(188)('flatten');


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(8);
	var $at = __webpack_require__(128)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos) {
	    return $at(this, pos);
	  }
	});


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(260);
	
	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37);
	var repeat = __webpack_require__(91);
	var defined = __webpack_require__(35);
	
	module.exports = function (that, maxLength, fillString, left) {
	  var S = String(defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8);
	var $pad = __webpack_require__(260);
	
	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export = __webpack_require__(8);
	var defined = __webpack_require__(35);
	var toLength = __webpack_require__(37);
	var isRegExp = __webpack_require__(135);
	var getFlags = __webpack_require__(198);
	var RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function (regexp, string) {
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(131)($RegExpStringIterator, 'RegExp String', function next() {
	  var match = this._r.exec(this._s);
	  return { value: match, done: match === null };
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp) {
	    defined(this);
	    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
	    var S = String(this);
	    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
	    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(27)('asyncIterator');


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(27)('observable');


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export = __webpack_require__(8);
	var ownKeys = __webpack_require__(250);
	var toIObject = __webpack_require__(32);
	var gOPD = __webpack_require__(51);
	var createProperty = __webpack_require__(165);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIObject(object);
	    var getDesc = gOPD.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) createProperty(result, key, desc);
	    }
	    return result;
	  }
	});


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $values = __webpack_require__(269)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys = __webpack_require__(30);
	var toIObject = __webpack_require__(32);
	var isEnum = __webpack_require__(44).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8);
	var $entries = __webpack_require__(269)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter) {
	    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
	  }
	});


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(28) || !__webpack_require__(7)(function () {
	  var K = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, K, function () { /* empty */ });
	  delete __webpack_require__(4)[K];
	});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var aFunction = __webpack_require__(21);
	var $defineProperty = __webpack_require__(11);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter) {
	    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
	  }
	});


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(59);
	var getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8);
	var toObject = __webpack_require__(58);
	var toPrimitive = __webpack_require__(16);
	var getPrototypeOf = __webpack_require__(59);
	var getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(272), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(277)('Map') });


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(75);
	var from = __webpack_require__(278);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(208);
	
	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(277)('Set') });


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(281)('Map');


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(8);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(281)('Set');


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
	__webpack_require__(281)('WeakMap');


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
	__webpack_require__(281)('WeakSet');


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(286)('Map');


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(8);
	var aFunction = __webpack_require__(21);
	var ctx = __webpack_require__(20);
	var forOf = __webpack_require__(208);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = ctx(mapFn, arguments[2], 2);
	      forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(286)('Set');


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
	__webpack_require__(286)('WeakMap');


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
	__webpack_require__(286)('WeakSet');


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.G, { global: __webpack_require__(4) });


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.S, 'System', { global: __webpack_require__(4) });


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8);
	var cof = __webpack_require__(34);
	
	$export($export.S, 'Error', {
	  isError: function isError(it) {
	    return cof(it) === 'Error';
	  }
	});


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clamp: function clamp(x, lower, upper) {
	    return Math.min(upper, Math.max(lower, x));
	  }
	});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var RAD_PER_DEG = 180 / Math.PI;
	
	$export($export.S, 'Math', {
	  degrees: function degrees(radians) {
	    return radians * RAD_PER_DEG;
	  }
	});


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var scale = __webpack_require__(297);
	var fround = __webpack_require__(114);
	
	$export($export.S, 'Math', {
	  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
	    return fround(scale(x, inLow, inHigh, outLow, outHigh));
	  }
	});


/***/ }),
/* 297 */
/***/ (function(module, exports) {

	// https://rwaldron.github.io/proposal-math-extensions/
	module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
	  if (
	    arguments.length === 0
	      // eslint-disable-next-line no-self-compare
	      || x != x
	      // eslint-disable-next-line no-self-compare
	      || inLow != inLow
	      // eslint-disable-next-line no-self-compare
	      || inHigh != inHigh
	      // eslint-disable-next-line no-self-compare
	      || outLow != outLow
	      // eslint-disable-next-line no-self-compare
	      || outHigh != outHigh
	  ) return NaN;
	  if (x === Infinity || x === -Infinity) return x;
	  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
	};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >> 16;
	    var v1 = $v >> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	var DEG_PER_RAD = Math.PI / 180;
	
	$export($export.S, 'Math', {
	  radians: function radians(degrees) {
	    return degrees * DEG_PER_RAD;
	  }
	});


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { scale: __webpack_require__(297) });


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >>> 16;
	    var v1 = $v >>> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	// http://jfbastien.github.io/papers/Math.signbit.html
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', { signbit: function signbit(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
	} });


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(8);
	var core = __webpack_require__(9);
	var global = __webpack_require__(4);
	var speciesConstructor = __webpack_require__(209);
	var promiseResolve = __webpack_require__(214);
	
	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(8);
	var newPromiseCapability = __webpack_require__(212);
	var perform = __webpack_require__(213);
	
	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	} });


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(216);
	var $export = __webpack_require__(8);
	var shared = __webpack_require__(23)('metadata');
	var store = shared.store || (shared.store = new (__webpack_require__(221))());
	
	var getOrCreateMetadataMap = function (target, targetKey, create) {
	  var targetMetadata = store.get(target);
	  if (!targetMetadata) {
	    if (!create) return undefined;
	    store.set(target, targetMetadata = new Map());
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if (!keyMetadata) {
	    if (!create) return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map());
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function (target, targetKey) {
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
	  var keys = [];
	  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
	  return keys;
	};
	var toMetaKey = function (it) {
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function (O) {
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var toMetaKey = metadata.key;
	var getOrCreateMetadataMap = metadata.map;
	var store = metadata.store;
	
	metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
	  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
	  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
	  if (metadataMap.size) return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	} });


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(59);
	var ordinaryHasOwnMetadata = metadata.has;
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	var ordinaryGetMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(220);
	var from = __webpack_require__(278);
	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(59);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	var ordinaryMetadataKeys = function (O, P) {
	  var oKeys = ordinaryOwnMetadataKeys(O, P);
	  var parent = getPrototypeOf(O);
	  if (parent === null) return oKeys;
	  var pKeys = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;
	
	metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(59);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	var ordinaryHasMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;
	
	metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	var $metadata = __webpack_require__(309);
	var anObject = __webpack_require__(12);
	var aFunction = __webpack_require__(21);
	var toMetaKey = $metadata.key;
	var ordinaryDefineOwnMetadata = $metadata.set;
	
	$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
	  return function decorator(target, targetKey) {
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	} });


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export = __webpack_require__(8);
	var microtask = __webpack_require__(211)();
	var process = __webpack_require__(4).process;
	var isNode = __webpack_require__(34)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn) {
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export = __webpack_require__(8);
	var global = __webpack_require__(4);
	var core = __webpack_require__(9);
	var microtask = __webpack_require__(211)();
	var OBSERVABLE = __webpack_require__(25)('observable');
	var aFunction = __webpack_require__(21);
	var anObject = __webpack_require__(12);
	var anInstance = __webpack_require__(207);
	var redefineAll = __webpack_require__(215);
	var hide = __webpack_require__(10);
	var forOf = __webpack_require__(208);
	var RETURN = forOf.RETURN;
	
	var getMethod = function (fn) {
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function (subscription) {
	  var cleanup = subscription._c;
	  if (cleanup) {
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function (subscription) {
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function (subscription) {
	  if (!subscriptionClosed(subscription)) {
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function (observer, subscriber) {
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup = subscriber(observer);
	    var subscription = cleanup;
	    if (cleanup != null) {
	      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch (e) {
	    observer.error(e);
	    return;
	  } if (subscriptionClosed(this)) cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe() { closeSubscription(this); }
	});
	
	var SubscriptionObserver = function (subscription) {
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if (m) return m.call(observer, value);
	      } catch (e) {
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value) {
	    var subscription = this._s;
	    if (subscriptionClosed(subscription)) throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if (!m) throw value;
	      value = m.call(observer, value);
	    } catch (e) {
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch (e) {
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber) {
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer) {
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn) {
	    var that = this;
	    return new (core.Promise || global.Promise)(function (resolve, reject) {
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next: function (value) {
	          try {
	            return fn(value);
	          } catch (e) {
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x) {
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if (method) {
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function (observer) {
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          try {
	            if (forOf(x, false, function (it) {
	              observer.next(it);
	              if (done) return RETURN;
	            }) === RETURN) return;
	          } catch (e) {
	            if (done) throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  },
	  of: function of() {
	    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          for (var j = 0; j < items.length; ++j) {
	            observer.next(items[j]);
	            if (done) return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function () { return this; });
	
	$export($export.G, { Observable: $Observable });
	
	__webpack_require__(194)('Observable');


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global = __webpack_require__(4);
	var $export = __webpack_require__(8);
	var invoke = __webpack_require__(78);
	var partial = __webpack_require__(321);
	var navigator = global.navigator;
	var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function (set) {
	  return MSIE ? function (fn, time /* , ...args */) {
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      // eslint-disable-next-line no-new-func
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout: wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var path = __webpack_require__(322);
	var invoke = __webpack_require__(78);
	var aFunction = __webpack_require__(21);
	module.exports = function (/* ...pargs */) {
	  var fn = aFunction(this);
	  var length = arguments.length;
	  var pargs = Array(length);
	  var i = 0;
	  var _ = path._;
	  var holder = false;
	  while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;
	  return function (/* ...args */) {
	    var that = this;
	    var aLen = arguments.length;
	    var j = 0;
	    var k = 0;
	    var args;
	    if (!holder && !aLen) return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if (holder) for (;length > j; j++) if (args[j] === _) args[j] = arguments[k++];
	    while (aLen > k) args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4);


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	var $task = __webpack_require__(210);
	$export($export.G + $export.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var $iterators = __webpack_require__(195);
	var getKeys = __webpack_require__(30);
	var redefine = __webpack_require__(18);
	var global = __webpack_require__(4);
	var hide = __webpack_require__(10);
	var Iterators = __webpack_require__(130);
	var wks = __webpack_require__(25);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;
	
	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};
	
	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
	  }
	}


/***/ }),
/* 325 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof global.process === "object" && global.process.domain) {
	      invoke = global.process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !! caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(327);
	module.exports = __webpack_require__(9).RegExp.escape;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8);
	var $re = __webpack_require__(328)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	module.exports = function (regExp, replace) {
	  var replacer = replace === Object(replace) ? function (part) {
	    return replace[part];
	  } : replace;
	  return function (it) {
	    return String(it).replace(regExp, replacer);
	  };
	};


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var GCLConfig_1 = __webpack_require__(332);
	exports.GCLConfig = GCLConfig_1.GCLConfig;
	var CoreService_1 = __webpack_require__(333);
	var Connection_1 = __webpack_require__(339);
	var DSClient_1 = __webpack_require__(367);
	var OCVClient_1 = __webpack_require__(368);
	var es6_promise_1 = __webpack_require__(335);
	var PluginFactory_1 = __webpack_require__(369);
	var GenericService_1 = __webpack_require__(497);
	var ResponseHandler_1 = __webpack_require__(482);
	var agent_1 = __webpack_require__(366);
	var GCLClient = (function () {
	    function GCLClient(cfg, automatic) {
	        var _this = this;
	        this.core = function () { return _this.coreService; };
	        this.config = function () { return _this.cfg; };
	        this.agent = function () { return _this.agentClient; };
	        this.ds = function () { return _this.dsClient; };
	        this.ocv = function () { return _this.ocvClient; };
	        this.beid = function (reader_id) { return _this.pluginFactory.createEidBE(reader_id); };
	        this.dnie = function (reader_id) { return _this.pluginFactory.createDNIe(reader_id); };
	        this.luxeid = function (reader_id, pin) { return _this.pluginFactory.createEidLUX(reader_id, pin); };
	        this.luxtrust = function (reader_id, pin) { return _this.pluginFactory.createLuxTrust(reader_id); };
	        this.emv = function (reader_id) { return _this.pluginFactory.createEmv(reader_id); };
	        this.mobib = function (reader_id) { return _this.pluginFactory.createMobib(reader_id); };
	        this.ocra = function (reader_id) { return _this.pluginFactory.createOcra(reader_id); };
	        this.aventra = function (reader_id) { return _this.pluginFactory.createAventraNO(reader_id); };
	        this.oberthur = function (reader_id) { return _this.pluginFactory.createOberthurNO(reader_id); };
	        this.piv = function (reader_id) { return _this.pluginFactory.createPIV(reader_id); };
	        this.pteid = function (reader_id) { return _this.pluginFactory.createEidPT(reader_id); };
	        this.safenet = function (reader_id, moduleConfig) {
	            return _this.pluginFactory.createSafeNet(moduleConfig);
	        };
	        this.readerapi = function (reader_id) { return _this.pluginFactory.createRemoteLoading(reader_id); };
	        this.belfius = function (reader_id) { return _this.pluginFactory.createBelfius(reader_id); };
	        var self = this;
	        this.cfg = GCLClient.resolveConfig(cfg);
	        this.connection = new Connection_1.LocalConnection(this.cfg);
	        this.authConnection = new Connection_1.LocalAuthConnection(this.cfg);
	        this.remoteConnection = new Connection_1.RemoteConnection(this.cfg);
	        this.localTestConnection = new Connection_1.LocalTestConnection(this.cfg);
	        this.pluginFactory = new PluginFactory_1.PluginFactory(this.cfg.gclUrl, this.connection);
	        this.coreService = new CoreService_1.CoreService(this.cfg.gclUrl, this.authConnection);
	        this.agentClient = new agent_1.AgentClient(this.cfg.gclUrl, this.connection);
	        if (this.cfg.localTestMode) {
	            this.dsClient = new DSClient_1.DSClient(this.cfg.dsUrl, this.localTestConnection, this.cfg);
	        }
	        else {
	            this.dsClient = new DSClient_1.DSClient(this.cfg.dsUrl, this.remoteConnection, this.cfg);
	        }
	        this.ocvClient = new OCVClient_1.OCVClient(this.cfg.ocvUrl, this.remoteConnection);
	        if (this.cfg.implicitDownload && true) {
	            this.implicitDownload();
	        }
	        if (!automatic) {
	            this.initSecurityContext(function (err) {
	                if (err) {
	                    console.log(JSON.stringify(err));
	                    return;
	                }
	                self.registerAndActivate();
	            });
	        }
	        this.initOCVContext(function (err) {
	            if (err) {
	                console.warn("OCV not available for apikey, contact support@trust1team.com to add this capability");
	            }
	            else {
	                console.log("OCV available for apikey");
	            }
	        });
	    }
	    GCLClient.initialize = function (cfg, callback) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = new GCLClient(cfg, true);
	            client.GCLInstalled = true;
	            client.initSecurityContext(function (err) {
	                if (err) {
	                    console.log(JSON.stringify(err));
	                    if (callback && typeof callback === "function") {
	                        callback(err, null);
	                    }
	                    reject(err);
	                }
	                else {
	                    client.registerAndActivate().then(function () {
	                        if (callback && typeof callback === "function") {
	                            callback(null, client);
	                        }
	                        resolve(client);
	                    }, function (error) {
	                        if (callback && typeof callback === "function") {
	                            callback(error, null);
	                        }
	                        reject(error);
	                    });
	                }
	            });
	        });
	    };
	    GCLClient.resolveConfig = function (cfg) {
	        var resolvedCfg = new GCLConfig_1.GCLConfig(cfg.dsUrlBase, cfg.apiKey);
	        resolvedCfg.allowAutoUpdate = cfg.allowAutoUpdate;
	        resolvedCfg.client_id = cfg.client_id;
	        resolvedCfg.client_secret = cfg.client_secret;
	        resolvedCfg.jwt = cfg.jwt;
	        resolvedCfg.gclUrl = cfg.gclUrl;
	        resolvedCfg.ocvUrl = cfg.ocvUrl;
	        resolvedCfg.implicitDownload = cfg.implicitDownload;
	        resolvedCfg.localTestMode = cfg.localTestMode;
	        resolvedCfg.forceHardwarePinpad = cfg.forceHardwarePinpad;
	        resolvedCfg.defaultSessionTimeout = cfg.defaultSessionTimeout;
	        resolvedCfg.citrix = cfg.citrix;
	        resolvedCfg.agentPort = cfg.agentPort;
	        return resolvedCfg;
	    };
	    GCLClient.prototype.containerFor = function (readerId, callback) {
	        return GenericService_1.GenericService.containerForReader(this, readerId, callback);
	    };
	    GCLClient.prototype.download = function (callback) {
	        var _this = this;
	        return this.core().infoBrowser().then(function (info) {
	            return _this.ds().downloadLink(info.data, callback);
	        }, function (error) {
	            return ResponseHandler_1.ResponseHandler.error(error, callback);
	        });
	    };
	    GCLClient.prototype.dumpData = function (readerId, data, callback) {
	        return GenericService_1.GenericService.dumpData(this, readerId, data, callback);
	    };
	    GCLClient.prototype.readersCanAuthenticate = function (callback) {
	        return GenericService_1.GenericService.authenticateCapable(this, callback);
	    };
	    GCLClient.prototype.authenticate = function (readerId, data, callback) {
	        return GenericService_1.GenericService.authenticate(this, readerId, data, callback);
	    };
	    GCLClient.prototype.readersCanSign = function (callback) {
	        return GenericService_1.GenericService.signCapable(this, callback);
	    };
	    GCLClient.prototype.sign = function (readerId, data, callback) {
	        return GenericService_1.GenericService.sign(this, readerId, data, callback);
	    };
	    GCLClient.prototype.readersCanVerifyPin = function (callback) {
	        return GenericService_1.GenericService.verifyPinCapable(this, callback);
	    };
	    GCLClient.prototype.verifyPin = function (readerId, data, callback) {
	        return GenericService_1.GenericService.verifyPin(this, readerId, data, callback);
	    };
	    GCLClient.prototype.initOCVContext = function (cb) {
	        return this.ocvClient.getInfo(cb);
	    };
	    GCLClient.prototype.initSecurityContext = function (cb) {
	        var self = this;
	        var clientCb = cb;
	        this.core().getPubKey(function (err) {
	            if (err && err.data && !err.data.success) {
	                self.dsClient.getPubKey(function (error, dsResponse) {
	                    if (error) {
	                        return clientCb(err, null);
	                    }
	                    var innerCb = clientCb;
	                    self.core().setPubKey(dsResponse.pubkey, function (pubKeyError) {
	                        if (pubKeyError) {
	                            return innerCb(err, null);
	                        }
	                        return innerCb(null, {});
	                    });
	                });
	            }
	            return cb(null, {});
	        });
	    };
	    GCLClient.prototype.registerAndActivate = function () {
	        var self = this;
	        var self_cfg = this.cfg;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            self.core().info(function (err, infoResponse) {
	                if (err) {
	                    self.GCLInstalled = false;
	                    resolve();
	                    return;
	                }
	                self_cfg.citrix = infoResponse.data.citrix;
	                var activated = infoResponse.data.activated;
	                var managed = infoResponse.data.managed;
	                var core_version = infoResponse.data.version;
	                var uuid = infoResponse.data.uid;
	                var info = self.core().infoBrowserSync();
	                var mergedInfo = _.merge({ managed: managed, core_version: core_version, activated: activated }, info.data);
	                if (!activated) {
	                    self.dsClient.register(mergedInfo, uuid, function (error, activationResponse) {
	                        if (err) {
	                            console.log("Error while registering the device: " + JSON.stringify(err));
	                            reject(err);
	                            return;
	                        }
	                        self_cfg.jwt = activationResponse.token;
	                        self.authConnection = new Connection_1.LocalAuthConnection(self.cfg);
	                        self.coreService = new CoreService_1.CoreService(self.cfg.gclUrl, self.authConnection);
	                        self.core().activate(function (activationError) {
	                            if (activationError) {
	                                console.log("Error while activating the device: " + JSON.stringify(activationError));
	                                reject(err);
	                                return;
	                            }
	                            mergedInfo.activated = true;
	                            self.dsClient.sync(mergedInfo, uuid, function (syncError) {
	                                if (syncError) {
	                                    console.log("Error while syncing the device: " + JSON.stringify(syncError));
	                                    reject(syncError);
	                                    return;
	                                }
	                                else {
	                                    resolve();
	                                }
	                            });
	                        });
	                    });
	                }
	                else {
	                    if (managed) {
	                        resolve();
	                        return;
	                    }
	                    else {
	                        self.dsClient.sync(mergedInfo, uuid, function (syncError, activationResponse) {
	                            if (syncError) {
	                                console.log("Error while syncing the device: " + JSON.stringify(syncError));
	                                reject(syncError);
	                                return;
	                            }
	                            self_cfg.jwt = activationResponse.token;
	                            resolve();
	                            return;
	                        });
	                    }
	                }
	            });
	        });
	    };
	    GCLClient.prototype.implicitDownload = function () {
	        var self = this;
	        this.core().info(function (error) {
	            console.log("implicit error", JSON.stringify(error));
	            if (error) {
	                var _info = self.core().infoBrowserSync();
	                console.log("implicit error", JSON.stringify(_info));
	                self.ds().downloadLink(_info.data, function (linkError, downloadResponse) {
	                    if (linkError) {
	                        console.error("could not download GCL package:", linkError.description);
	                    }
	                    window.open(downloadResponse.url);
	                    return;
	                });
	            }
	            else {
	                return;
	            }
	        });
	    };
	    return GCLClient;
	}());
	exports.GCLClient = GCLClient;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '4.17.4';
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;
	
	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;
	
	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;
	
	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;
	
	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;
	
	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);
	
	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;
	
	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;
	
	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;
	
	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	
	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';
	
	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
	      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');
	
	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');
	
	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	
	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');
	
	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
	
	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();
	
	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	
	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;
	
	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());
	
	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }
	
	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }
	
	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }
	
	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	
	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }
	
	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }
	
	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);
	
	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }
	
	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;
	
	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');
	
	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }
	
	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }
	
	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	
	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }
	
	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }
	
	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }
	
	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;
	
	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }
	
	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;
	
	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);
	
	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }
	
	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }
	
	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }
	
	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;
	
	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;
	
	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;
	
	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }
	
	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }
	
	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }
	
	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];
	
	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }
	
	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);
	
	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }
	
	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }
	
	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }
	
	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }
	
	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
	
	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }
	
	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }
	
	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
	
	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;
	
	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;
	
	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];
	
	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());
	
	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;
	
	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());
	
	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
	
	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;
	
	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);
	
	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());
	
	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }
	
	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	    }
	
	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }
	
	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }
	
	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      return index < 0 ? undefined : data[index][1];
	    }
	
	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }
	
	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }
	
	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }
	
	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }
	
	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }
	
	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;
	
	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }
	
	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;
	
	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }
	
	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }
	
	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }
	
	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }
	
	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);
	
	      this.size = data.size;
	      return result;
	    }
	
	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }
	
	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }
	
	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }
	
	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;
	
	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }
	
	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }
	
	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }
	
	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }
	
	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;
	
	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }
	
	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;
	
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;
	
	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);
	
	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);
	
	      var props = isArr ? undefined : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }
	
	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];
	
	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;
	
	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);
	
	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;
	
	      predicate || (predicate = isFlattenable);
	      result || (result = []);
	
	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }
	
	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);
	
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }
	
	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }
	
	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }
	
	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }
	
	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }
	
	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];
	
	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];
	
	      var index = -1,
	          seen = caches[0];
	
	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined : apply(func, object, args);
	    }
	
	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }
	
	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }
	
	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);
	
	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;
	
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;
	
	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }
	
	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }
	
	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }
	
	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }
	
	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }
	
	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }
	
	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];
	
	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;
	
	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);
	
	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      var isCommon = newValue === undefined;
	
	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	
	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }
	
	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }
	
	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
	
	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }
	
	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};
	
	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);
	
	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;
	
	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;
	
	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }
	
	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }
	
	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;
	
	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };
	
	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);
	
	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }
	
	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;
	
	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }
	
	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }
	
	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}
	
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }
	
	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);
	
	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;
	
	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }
	
	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};
	
	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }
	
	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }
	
	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }
	
	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }
	
	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;
	
	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }
	
	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };
	
	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	
	      buffer.copy(result);
	      return result;
	    }
	
	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }
	
	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }
	
	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }
	
	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }
	
	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }
	
	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }
	
	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }
	
	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);
	
	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);
	
	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }
	
	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;
	
	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;
	
	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	
	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;
	
	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }
	
	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }
	
	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }
	
	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};
	
	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }
	
	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;
	
	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;
	
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;
	
	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);
	
	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;
	
	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);
	
	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);
	
	        return chr[methodName]() + trailing;
	      };
	    }
	
	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);
	
	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;
	
	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }
	
	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }
	
	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);
	
	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }
	
	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;
	
	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
	
	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];
	
	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }
	
	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));
	
	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };
	
	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;
	
	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);
	
	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];
	
	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);
	
	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }
	
	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }
	
	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined : value;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
	
	      stack.set(array, other);
	      stack.set(other, array);
	
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;
	
	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;
	
	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');
	
	        case mapTag:
	          var convert = mapToArray;
	
	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);
	
	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;
	
	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;
	
	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);
	
	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }
	
	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }
	
	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }
	
	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }
	
	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }
	
	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;
	
	      while (length--) {
	        var key = result[length],
	            value = object[key];
	
	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }
	
	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];
	
	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}
	
	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };
	
	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };
	
	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;
	
	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';
	
	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }
	
	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length,
	          result = false;
	
	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);
	
	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case dataViewTag:
	          return cloneDataView(object, isDeep);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);
	
	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          return cloneRegExp(object);
	
	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);
	
	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }
	
	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }
	
	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }
	
	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }
	
	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];
	
	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }
	
	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;
	
	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	      return value === proto;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }
	
	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });
	
	      var cache = result.cache;
	      return result;
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
	
	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }
	
	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);
	
	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }
	
	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);
	
	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };
	
	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);
	
	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }
	
	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;
	
	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }
	
	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;
	
	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];
	
	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }
	
	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (reLeadingDot.test(string)) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });
	
	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }
	
	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;
	
	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }
	
	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }
	
	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }
	
	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }
	
	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }
	
	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};
	
	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }
	
	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }
	
	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }
	
	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);
	
	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);
	
	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));
	
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }
	
	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }
	
	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }
	
	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);
	
	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }
	
	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;
	
	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }
	
	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };
	
	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });
	
	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];
	
	      return { 'done': done, 'value': value };
	    }
	
	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }
	
	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }
	
	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);
	
	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }
	
	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
	
	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }
	
	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }
	
	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;
	
	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }
	
	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }
	
	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;
	
	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }
	
	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;
	
	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }
	
	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }
	
	      function trailingEdge(time) {
	        timerId = undefined;
	
	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }
	
	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }
	
	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }
	
	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);
	
	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;
	
	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }
	
	    // Expose `MapCache`.
	    memoize.Cache = MapCache;
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
	
	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);
	
	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });
	
	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);
	
	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }
	
	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }
	
	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }
	
	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }
	
	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }
	
	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }
	
	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }
	
	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }
	
	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });
	
	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;
	
	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
	
	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }
	
	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
	
	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }
	
	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }
	
	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }
	
	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
	
	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }
	
	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
	
	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
	
	      return func(value);
	    }
	
	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }
	
	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;
	
	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }
	
	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }
	
	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }
	
	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }
	
	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });
	
	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });
	
	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });
	
	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });
	
	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);
	
	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }
	
	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, customDefaultsAssignIn);
	      return apply(assignInWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, customDefaultsMerge);
	      return apply(mergeWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }
	
	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }
	
	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }
	
	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));
	
	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);
	
	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }
	
	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }
	
	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });
	
	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });
	
	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });
	
	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length;
	
	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }
	
	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }
	
	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }
	
	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);
	
	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
	
	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }
	
	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }
	
	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }
	
	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }
	
	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }
	
	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });
	
	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }
	
	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);
	
	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }
	
	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }
	
	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);
	
	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }
	
	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }
	
	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);
	
	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);
	
	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }
	
	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;
	
	      return castSlice(strSymbols, start, end).join('');
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
	
	      return castSlice(strSymbols, 0, end).join('');
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));
	
	      return castSlice(strSymbols, start).join('');
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);
	
	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);
	
	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });
	
	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;
	
	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });
	
	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();
	
	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });
	
	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }
	
	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }
	
	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);
	
	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);
	
	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);
	
	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });
	
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }
	
	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }
	
	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);
	
	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);
	
	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);
	
	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();
	
	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);
	
	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }
	
	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }
	
	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }
	
	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }
	
	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }
	
	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);
	
	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;
	
	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);
	
	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);
	
	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }
	
	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }
	
	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }
	
	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);
	
	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);
	
	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }
	
	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;
	
	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;
	
	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
	
	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();
	
	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };
	
	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };
	
	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });
	
	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;
	
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });
	
	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });
	
	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];
	
	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;
	
	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(331)(module)))

/***/ }),
/* 331 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var defaultGclUrl = "https://localhost:10443/v1";
	var defaultDSUrl = "https://accapim.t1t.be:443";
	var defaultDSContextPath = "/trust1team/gclds/v1";
	var defaultOCVContextPath = "/trust1team/ocv-api/v1";
	var defaultDSContextPathTestMode = "/gcl-ds-web/v1";
	var fileDownloadUrlPostfix = "/trust1team/gclds-file/v1";
	var defaultAllowAutoUpdate = true;
	var defaultImplicitDownload = false;
	var defaultLocalTestMode = false;
	var GCLConfig = (function () {
	    function GCLConfig(dsUriValue, apiKey) {
	        this._gclUrl = defaultGclUrl;
	        this._dsUrl = dsUriValue + defaultDSContextPath;
	        this._ocvUrl = dsUriValue + defaultOCVContextPath;
	        this._dsFileDownloadUrl = dsUriValue + fileDownloadUrlPostfix;
	        this._dsUrlBase = dsUriValue;
	        this._apiKey = apiKey;
	        this._jwt = "none";
	        this._citrix = false;
	        this._agentPort = -1;
	        this._allowAutoUpdate = defaultAllowAutoUpdate;
	        this._implicitDownload = defaultImplicitDownload;
	        this._localTestMode = defaultLocalTestMode;
	        this._forceHardwarePinpad = false;
	        this._defaultSessionTimeout = 5;
	    }
	    Object.defineProperty(GCLConfig.prototype, "ocvUrl", {
	        get: function () {
	            return this._ocvUrl;
	        },
	        set: function (value) {
	            this._ocvUrl = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "gclUrl", {
	        get: function () {
	            return this._gclUrl;
	        },
	        set: function (value) {
	            this._gclUrl = value || defaultGclUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "dsUrl", {
	        get: function () {
	            return this._dsUrl;
	        },
	        set: function (dsUriValue) {
	            if (_.endsWith(dsUriValue, defaultDSContextPath)) {
	                this._dsUrlBase = _.replace(dsUriValue, defaultDSContextPath, "");
	                this._dsUrl = dsUriValue;
	                this._dsFileDownloadUrl = this._dsUrlBase + fileDownloadUrlPostfix;
	                this._ocvUrl = this._dsUrlBase + defaultOCVContextPath;
	            }
	            else {
	                this._dsUrl = dsUriValue + defaultDSContextPath;
	                this._dsFileDownloadUrl = dsUriValue + fileDownloadUrlPostfix;
	                this._dsUrlBase = dsUriValue;
	                this._ocvUrl = dsUriValue + defaultOCVContextPath;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "apiKey", {
	        get: function () {
	            return this._apiKey;
	        },
	        set: function (value) {
	            this._apiKey = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "allowAutoUpdate", {
	        get: function () {
	            return this._allowAutoUpdate;
	        },
	        set: function (value) {
	            this._allowAutoUpdate = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "client_id", {
	        get: function () {
	            return this._client_id;
	        },
	        set: function (value) {
	            this._client_id = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "client_secret", {
	        get: function () {
	            return this._client_secret;
	        },
	        set: function (value) {
	            this._client_secret = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "jwt", {
	        get: function () {
	            return this._jwt;
	        },
	        set: function (value) {
	            this._jwt = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "citrix", {
	        get: function () {
	            return this._citrix;
	        },
	        set: function (value) {
	            this._citrix = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "agentPort", {
	        get: function () {
	            return this._agentPort;
	        },
	        set: function (value) {
	            this._agentPort = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "implicitDownload", {
	        get: function () {
	            return this._implicitDownload;
	        },
	        set: function (value) {
	            this._implicitDownload = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "dsFileDownloadUrl", {
	        get: function () {
	            return this._dsFileDownloadUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "dsUrlBase", {
	        get: function () {
	            return this._dsUrlBase;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "localTestMode", {
	        get: function () {
	            return this._localTestMode;
	        },
	        set: function (value) {
	            this._localTestMode = value;
	            if (this._localTestMode) {
	                this._dsUrl = this._dsUrlBase + defaultDSContextPathTestMode;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "forceHardwarePinpad", {
	        get: function () {
	            return this._forceHardwarePinpad;
	        },
	        set: function (value) {
	            this._forceHardwarePinpad = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GCLConfig.prototype, "defaultSessionTimeout", {
	        get: function () {
	            return this._defaultSessionTimeout;
	        },
	        set: function (value) {
	            this._defaultSessionTimeout = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GCLConfig;
	}());
	exports.GCLConfig = GCLConfig;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var platform = __webpack_require__(334);
	var es6_promise_1 = __webpack_require__(335);
	var CORE_INFO = "/";
	var CORE_PLUGINS = "/plugins";
	var CORE_READERS = "/card-readers";
	var CORE_ACTIVATE = "/admin/activate";
	var CORE_PUB_KEY = "/admin/certificate";
	var CoreService = (function () {
	    function CoreService(url, connection) {
	        this.url = url;
	        this.connection = connection;
	    }
	    CoreService.cardInsertedFilter = function (inserted) {
	        return { "card-inserted": inserted };
	    };
	    CoreService.platformInfo = function () {
	        return {
	            data: {
	                manufacturer: platform.manufacturer || "",
	                browser: {
	                    name: platform.name,
	                    version: platform.version
	                },
	                os: {
	                    name: platform.os.family,
	                    version: platform.os.version,
	                    architecture: platform.os.architecture
	                },
	                ua: platform.ua
	            },
	            success: true
	        };
	    };
	    CoreService.prototype.activate = function (callback) {
	        return this.connection.post(this.url, CORE_ACTIVATE, {}, undefined, callback);
	    };
	    CoreService.prototype.getPubKey = function (callback) {
	        return this.connection.get(this.url, CORE_PUB_KEY, undefined, callback);
	    };
	    CoreService.prototype.info = function (callback) {
	        return this.connection.getSkipCitrix(this.url, CORE_INFO, undefined, callback);
	    };
	    CoreService.prototype.infoBrowser = function (callback) {
	        if (callback) {
	            callback(null, CoreService.platformInfo());
	        }
	        else {
	            return es6_promise_1.Promise.resolve(CoreService.platformInfo());
	        }
	    };
	    CoreService.prototype.plugins = function (callback) {
	        return this.connection.getSkipCitrix(this.url, CORE_PLUGINS, undefined, callback);
	    };
	    CoreService.prototype.pollCardInserted = function (secondsToPollCard, callback, connectReaderCb, insertCardCb, cardTimeoutCb) {
	        var maxSeconds = secondsToPollCard || 30;
	        var self = this;
	        if (callback) {
	            poll();
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                poll(resolve, reject);
	            });
	        }
	        function poll(resolve, reject) {
	            _.delay(function () {
	                --maxSeconds;
	                self.readers(function (error, data) {
	                    if (error) {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                    if (maxSeconds === 0) {
	                        if (cardTimeoutCb) {
	                            return cardTimeoutCb();
	                        }
	                        else {
	                            if (reject) {
	                                reject({ success: false, message: "Timed out" });
	                            }
	                        }
	                    }
	                    else if (data.data.length === 0) {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                    else {
	                        var readerWithCard = _.find(data.data, function (reader) {
	                            return _.has(reader, "card");
	                        });
	                        if (readerWithCard != null) {
	                            if (resolve) {
	                                resolve(readerWithCard);
	                            }
	                            else {
	                                return callback(null, readerWithCard);
	                            }
	                        }
	                        else {
	                            if (insertCardCb) {
	                                insertCardCb();
	                            }
	                            poll(resolve, reject);
	                        }
	                    }
	                });
	            }, 1000);
	        }
	    };
	    CoreService.prototype.pollReadersWithCards = function (secondsToPollCard, callback, connectReaderCb, insertCardCb, cardTimeoutCb) {
	        var maxSeconds = secondsToPollCard || 30;
	        var self = this;
	        if (callback) {
	            poll();
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                poll(resolve, reject);
	            });
	        }
	        function poll(resolve, reject) {
	            _.delay(function () {
	                --maxSeconds;
	                self.readers(function (error, data) {
	                    if (error) {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                    if (maxSeconds === 0) {
	                        if (cardTimeoutCb) {
	                            return cardTimeoutCb();
	                        }
	                        else {
	                            if (reject) {
	                                reject({ success: false, message: "Timed out" });
	                            }
	                        }
	                    }
	                    else if (!_.isEmpty(data) && !_.isEmpty(data.data)) {
	                        var readersWithCards = _.filter(data.data, function (reader) {
	                            return _.has(reader, "card");
	                        });
	                        if (readersWithCards.length) {
	                            var response = { data: readersWithCards, success: true };
	                            if (resolve) {
	                                resolve(response);
	                            }
	                            else {
	                                return callback(null, response);
	                            }
	                        }
	                        else {
	                            if (insertCardCb) {
	                                insertCardCb();
	                            }
	                            poll(resolve, reject);
	                        }
	                    }
	                    else {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                });
	            }, 1000);
	        }
	    };
	    CoreService.prototype.pollReaders = function (secondsToPollReader, callback, connectReaderCb, readerTimeoutCb) {
	        var maxSeconds = secondsToPollReader || 30;
	        var self = this;
	        if (callback) {
	            poll();
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                poll(resolve, reject);
	            });
	        }
	        function poll(resolve, reject) {
	            _.delay(function () {
	                --maxSeconds;
	                self.readers(function (error, data) {
	                    if (error) {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                    if (maxSeconds === 0) {
	                        if (readerTimeoutCb) {
	                            return readerTimeoutCb();
	                        }
	                        else {
	                            if (reject) {
	                                reject({ success: false, message: "Timed out" });
	                            }
	                        }
	                    }
	                    else if (_.isEmpty(data) || _.isEmpty(data.data)) {
	                        if (connectReaderCb) {
	                            connectReaderCb();
	                        }
	                        poll(resolve, reject);
	                    }
	                    else {
	                        if (resolve) {
	                            resolve(data);
	                        }
	                        else {
	                            return callback(null, data);
	                        }
	                    }
	                });
	            }, 1000);
	        }
	    };
	    CoreService.prototype.reader = function (reader_id, callback) {
	        return this.connection.get(this.url, CORE_READERS + "/" + reader_id, undefined, callback);
	    };
	    CoreService.prototype.readers = function (callback) {
	        return this.connection.get(this.url, CORE_READERS, undefined, callback);
	    };
	    CoreService.prototype.readersCardAvailable = function (callback) {
	        return this.connection.get(this.url, CORE_READERS, CoreService.cardInsertedFilter(true), callback);
	    };
	    CoreService.prototype.readersCardsUnavailable = function (callback) {
	        return this.connection.get(this.url, CORE_READERS, CoreService.cardInsertedFilter(false), callback);
	    };
	    CoreService.prototype.setPubKey = function (pubkey, callback) {
	        return this.connection.put(this.url, CORE_PUB_KEY, { certificate: pubkey }, undefined, callback);
	    };
	    CoreService.prototype.infoBrowserSync = function () { return CoreService.platformInfo(); };
	    CoreService.prototype.getUrl = function () { return this.url; };
	    CoreService.prototype.version = function () {
	        return "v1.4.0-1";
	    };
	    return CoreService;
	}());
	exports.CoreService = CoreService;


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*!
	 * Platform.js v1.3.1 <http://mths.be/platform>
	 * Copyright 2014-2016 Benjamin Tan <https://d10.github.io/>
	 * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
	 * Available under MIT license <http://mths.be/mit>
	 */
	;(function() {
	  'use strict';
	
	  /** Used to determine if values are of the language type `Object` */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };
	
	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;
	
	  /** Backup possible global object */
	  var oldRoot = root;
	
	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports;
	
	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	
	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  /**
	   * Used as the maximum length of an array-like object.
	   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
	   * for more details.
	   */
	  var maxSafeInteger = Math.pow(2, 53) - 1;
	
	  /** Opera regexp */
	  var reOpera = /\bOpera/;
	
	  /** Possible global object */
	  var thisBinding = this;
	
	  /** Used for native method references */
	  var objectProto = Object.prototype;
	
	  /** Used to check for own properties of an object */
	  var hasOwnProperty = objectProto.hasOwnProperty;
	
	  /** Used to resolve the internal `[[Class]]` of values */
	  var toString = objectProto.toString;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Capitalizes a string value.
	   *
	   * @private
	   * @param {string} string The string to capitalize.
	   * @returns {string} The capitalized string.
	   */
	  function capitalize(string) {
	    string = String(string);
	    return string.charAt(0).toUpperCase() + string.slice(1);
	  }
	
	  /**
	   * A utility function to clean up the OS name.
	   *
	   * @private
	   * @param {string} os The OS name to clean up.
	   * @param {string} [pattern] A `RegExp` pattern matching the OS name.
	   * @param {string} [label] A label for the OS.
	   */
	  function cleanupOS(os, pattern, label) {
	    // platform tokens defined at
	    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
	    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
	    var data = {
	      '6.4':  '10',
	      '6.3':  '8.1',
	      '6.2':  '8',
	      '6.1':  'Server 2008 R2 / 7',
	      '6.0':  'Server 2008 / Vista',
	      '5.2':  'Server 2003 / XP 64-bit',
	      '5.1':  'XP',
	      '5.01': '2000 SP1',
	      '5.0':  '2000',
	      '4.0':  'NT',
	      '4.90': 'ME'
	    };
	    // detect Windows version from platform tokens
	    if (pattern && label && /^Win/i.test(os) &&
	        (data = data[0/*Opera 9.25 fix*/, /[\d.]+$/.exec(os)])) {
	      os = 'Windows ' + data;
	    }
	    // correct character case and cleanup
	    os = String(os);
	
	    if (pattern && label) {
	      os = os.replace(RegExp(pattern, 'i'), label);
	    }
	
	    os = format(
	      os.replace(/ ce$/i, ' CE')
	        .replace(/\bhpw/i, 'web')
	        .replace(/\bMacintosh\b/, 'Mac OS')
	        .replace(/_PowerPC\b/i, ' OS')
	        .replace(/\b(OS X) [^ \d]+/i, '$1')
	        .replace(/\bMac (OS X)\b/, '$1')
	        .replace(/\/(\d)/, ' $1')
	        .replace(/_/g, '.')
	        .replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '')
	        .replace(/\bx86\.64\b/gi, 'x86_64')
	        .replace(/\b(Windows Phone) OS\b/, '$1')
	        .split(' on ')[0]
	    );
	
	    return os;
	  }
	
	  /**
	   * An iteration utility for arrays and objects.
	   *
	   * @private
	   * @param {Array|Object} object The object to iterate over.
	   * @param {Function} callback The function called per iteration.
	   */
	  function each(object, callback) {
	    var index = -1,
	        length = object ? object.length : 0;
	
	    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
	      while (++index < length) {
	        callback(object[index], index, object);
	      }
	    } else {
	      forOwn(object, callback);
	    }
	  }
	
	  /**
	   * Trim and conditionally capitalize string values.
	   *
	   * @private
	   * @param {string} string The string to format.
	   * @returns {string} The formatted string.
	   */
	  function format(string) {
	    string = trim(string);
	    return /^(?:webOS|i(?:OS|P))/.test(string)
	      ? string
	      : capitalize(string);
	  }
	
	  /**
	   * Iterates over an object's own properties, executing the `callback` for each.
	   *
	   * @private
	   * @param {Object} object The object to iterate over.
	   * @param {Function} callback The function executed per own property.
	   */
	  function forOwn(object, callback) {
	    for (var key in object) {
	      if (hasOwnProperty.call(object, key)) {
	        callback(object[key], key, object);
	      }
	    }
	  }
	
	  /**
	   * Gets the internal `[[Class]]` of a value.
	   *
	   * @private
	   * @param {*} value The value.
	   * @returns {string} The `[[Class]]`.
	   */
	  function getClassOf(value) {
	    return value == null
	      ? capitalize(value)
	      : toString.call(value).slice(8, -1);
	  }
	
	  /**
	   * Host objects can return type values that are different from their actual
	   * data type. The objects we are concerned with usually return non-primitive
	   * types of "object", "function", or "unknown".
	   *
	   * @private
	   * @param {*} object The owner of the property.
	   * @param {string} property The property to check.
	   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
	   */
	  function isHostType(object, property) {
	    var type = object != null ? typeof object[property] : 'number';
	    return !/^(?:boolean|number|string|undefined)$/.test(type) &&
	      (type == 'object' ? !!object[property] : true);
	  }
	
	  /**
	   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
	   *
	   * @private
	   * @param {string} string The string to qualify.
	   * @returns {string} The qualified string.
	   */
	  function qualify(string) {
	    return String(string).replace(/([ -])(?!$)/g, '$1?');
	  }
	
	  /**
	   * A bare-bones `Array#reduce` like utility function.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} callback The function called per iteration.
	   * @returns {*} The accumulated result.
	   */
	  function reduce(array, callback) {
	    var accumulator = null;
	    each(array, function(value, index) {
	      accumulator = callback(accumulator, value, index, array);
	    });
	    return accumulator;
	  }
	
	  /**
	   * Removes leading and trailing whitespace from a string.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} The trimmed string.
	   */
	  function trim(string) {
	    return String(string).replace(/^ +| +$/g, '');
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Creates a new platform object.
	   *
	   * @memberOf platform
	   * @param {Object|string} [ua=navigator.userAgent] The user agent string or
	   *  context object.
	   * @returns {Object} A platform object.
	   */
	  function parse(ua) {
	
	    /** The environment context object */
	    var context = root;
	
	    /** Used to flag when a custom context is provided */
	    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';
	
	    // juggle arguments
	    if (isCustomContext) {
	      context = ua;
	      ua = null;
	    }
	
	    /** Browser navigator object */
	    var nav = context.navigator || {};
	
	    /** Browser user agent string */
	    var userAgent = nav.userAgent || '';
	
	    ua || (ua = userAgent);
	
	    /** Used to flag when `thisBinding` is the [ModuleScope] */
	    var isModuleScope = isCustomContext || thisBinding == oldRoot;
	
	    /** Used to detect if browser is like Chrome */
	    var likeChrome = isCustomContext
	      ? !!nav.likeChrome
	      : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());
	
	    /** Internal `[[Class]]` value shortcuts */
	    var objectClass = 'Object',
	        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
	        enviroClass = isCustomContext ? objectClass : 'Environment',
	        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),
	        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';
	
	    /** Detect Java environment */
	    var java = /\bJava/.test(javaClass) && context.java;
	
	    /** Detect Rhino */
	    var rhino = java && getClassOf(context.environment) == enviroClass;
	
	    /** A character to represent alpha */
	    var alpha = java ? 'a' : '\u03b1';
	
	    /** A character to represent beta */
	    var beta = java ? 'b' : '\u03b2';
	
	    /** Browser document object */
	    var doc = context.document || {};
	
	    /**
	     * Detect Opera browser (Presto-based)
	     * http://www.howtocreate.co.uk/operaStuff/operaObject.html
	     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
	     */
	    var opera = context.operamini || context.opera;
	
	    /** Opera `[[Class]]` */
	    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))
	      ? operaClass
	      : (opera = null);
	
	    /*------------------------------------------------------------------------*/
	
	    /** Temporary variable used over the script's lifetime */
	    var data;
	
	    /** The CPU architecture */
	    var arch = ua;
	
	    /** Platform description array */
	    var description = [];
	
	    /** Platform alpha/beta indicator */
	    var prerelease = null;
	
	    /** A flag to indicate that environment features should be used to resolve the platform */
	    var useFeatures = ua == userAgent;
	
	    /** The browser/environment version */
	    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();
	
	    /** A flag to indicate if the OS ends with "/ Version" */
	    var isSpecialCasedOS;
	
	    /* Detectable layout engines (order is important) */
	    var layout = getLayout([
	      'Trident',
	      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },
	      'iCab',
	      'Presto',
	      'NetFront',
	      'Tasman',
	      'KHTML',
	      'Gecko'
	    ]);
	
	    /* Detectable browser names (order is important) */
	    var name = getName([
	      'Adobe AIR',
	      'Arora',
	      'Avant Browser',
	      'Breach',
	      'Camino',
	      'Epiphany',
	      'Fennec',
	      'Flock',
	      'Galeon',
	      'GreenBrowser',
	      'iCab',
	      'Iceweasel',
	      { 'label': 'SRWare Iron', 'pattern': 'Iron' },
	      'K-Meleon',
	      'Konqueror',
	      'Lunascape',
	      'Maxthon',
	      'Midori',
	      'Nook Browser',
	      'PhantomJS',
	      'Raven',
	      'Rekonq',
	      'RockMelt',
	      'SeaMonkey',
	      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
	      'Sleipnir',
	      'SlimBrowser',
	      'Sunrise',
	      'Swiftfox',
	      'WebPositive',
	      'Opera Mini',
	      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },
	      'Opera',
	      { 'label': 'Opera', 'pattern': 'OPR' },
	      'Chrome',
	      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },
	      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },
	      { 'label': 'IE', 'pattern': 'IEMobile' },
	      { 'label': 'IE', 'pattern': 'MSIE' },
	      'Safari'
	    ]);
	
	    /* Detectable products (order is important) */
	    var product = getProduct([
	      { 'label': 'BlackBerry', 'pattern': 'BB10' },
	      'BlackBerry',
	      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },
	      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },
	      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },
	      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },
	      'Google TV',
	      'Lumia',
	      'iPad',
	      'iPod',
	      'iPhone',
	      'Kindle',
	      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
	      'Nook',
	      'PlayBook',
	      'PlayStation 4',
	      'PlayStation 3',
	      'PlayStation Vita',
	      'TouchPad',
	      'Transformer',
	      { 'label': 'Wii U', 'pattern': 'WiiU' },
	      'Wii',
	      'Xbox One',
	      { 'label': 'Xbox 360', 'pattern': 'Xbox' },
	      'Xoom'
	    ]);
	
	    /* Detectable manufacturers */
	    var manufacturer = getManufacturer({
	      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },
	      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },
	      'Asus': { 'Transformer': 1 },
	      'Barnes & Noble': { 'Nook': 1 },
	      'BlackBerry': { 'PlayBook': 1 },
	      'Google': { 'Google TV': 1 },
	      'HP': { 'TouchPad': 1 },
	      'HTC': {},
	      'LG': {},
	      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },
	      'Motorola': { 'Xoom': 1 },
	      'Nintendo': { 'Wii U': 1,  'Wii': 1 },
	      'Nokia': { 'Lumia': 1 },
	      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },
	      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }
	    });
	
	    /* Detectable OSes (order is important) */
	    var os = getOS([
	      'Windows Phone ',
	      'Android',
	      'CentOS',
	      'Debian',
	      'Fedora',
	      'FreeBSD',
	      'Gentoo',
	      'Haiku',
	      'Kubuntu',
	      'Linux Mint',
	      'Red Hat',
	      'SuSE',
	      'Ubuntu',
	      'Xubuntu',
	      'Cygwin',
	      'Symbian OS',
	      'hpwOS',
	      'webOS ',
	      'webOS',
	      'Tablet OS',
	      'Linux',
	      'Mac OS X',
	      'Macintosh',
	      'Mac',
	      'Windows 98;',
	      'Windows '
	    ]);
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Picks the layout engine from an array of guesses.
	     *
	     * @private
	     * @param {Array} guesses An array of guesses.
	     * @returns {null|string} The detected layout engine.
	     */
	    function getLayout(guesses) {
	      return reduce(guesses, function(result, guess) {
	        return result || RegExp('\\b' + (
	          guess.pattern || qualify(guess)
	        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
	      });
	    }
	
	    /**
	     * Picks the manufacturer from an array of guesses.
	     *
	     * @private
	     * @param {Array} guesses An object of guesses.
	     * @returns {null|string} The detected manufacturer.
	     */
	    function getManufacturer(guesses) {
	      return reduce(guesses, function(result, value, key) {
	        // lookup the manufacturer by product or scan the UA for the manufacturer
	        return result || (
	          value[product] ||
	          value[0/*Opera 9.25 fix*/, /^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] ||
	          RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)
	        ) && key;
	      });
	    }
	
	    /**
	     * Picks the browser name from an array of guesses.
	     *
	     * @private
	     * @param {Array} guesses An array of guesses.
	     * @returns {null|string} The detected browser name.
	     */
	    function getName(guesses) {
	      return reduce(guesses, function(result, guess) {
	        return result || RegExp('\\b' + (
	          guess.pattern || qualify(guess)
	        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
	      });
	    }
	
	    /**
	     * Picks the OS name from an array of guesses.
	     *
	     * @private
	     * @param {Array} guesses An array of guesses.
	     * @returns {null|string} The detected OS name.
	     */
	    function getOS(guesses) {
	      return reduce(guesses, function(result, guess) {
	        var pattern = guess.pattern || qualify(guess);
	        if (!result && (result =
	              RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua)
	            )) {
	          result = cleanupOS(result, pattern, guess.label || guess);
	        }
	        return result;
	      });
	    }
	
	    /**
	     * Picks the product name from an array of guesses.
	     *
	     * @private
	     * @param {Array} guesses An array of guesses.
	     * @returns {null|string} The detected product name.
	     */
	    function getProduct(guesses) {
	      return reduce(guesses, function(result, guess) {
	        var pattern = guess.pattern || qualify(guess);
	        if (!result && (result =
	              RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) ||
	              RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua)
	            )) {
	          // split by forward slash and append product version if needed
	          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
	            result[0] += ' ' + result[1];
	          }
	          // correct character case and cleanup
	          guess = guess.label || guess;
	          result = format(result[0]
	            .replace(RegExp(pattern, 'i'), guess)
	            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')
	            .replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
	        }
	        return result;
	      });
	    }
	
	    /**
	     * Resolves the version using an array of UA patterns.
	     *
	     * @private
	     * @param {Array} patterns An array of UA patterns.
	     * @returns {null|string} The detected version.
	     */
	    function getVersion(patterns) {
	      return reduce(patterns, function(result, pattern) {
	        return result || (RegExp(pattern +
	          '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
	      });
	    }
	
	    /**
	     * Returns `platform.description` when the platform object is coerced to a string.
	     *
	     * @name toString
	     * @memberOf platform
	     * @returns {string} Returns `platform.description` if available, else an empty string.
	     */
	    function toStringPlatform() {
	      return this.description || '';
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // convert layout to an array so we can add extra details
	    layout && (layout = [layout]);
	
	    // detect product names that contain their manufacturer's name
	    if (manufacturer && !product) {
	      product = getProduct([manufacturer]);
	    }
	    // clean up Google TV
	    if ((data = /\bGoogle TV\b/.exec(product))) {
	      product = data[0];
	    }
	    // detect simulators
	    if (/\bSimulator\b/i.test(ua)) {
	      product = (product ? product + ' ' : '') + 'Simulator';
	    }
	    // detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS
	    if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
	      description.push('running in Turbo/Uncompressed mode');
	    }
	    // detect iOS
	    if (/^iP/.test(product)) {
	      name || (name = 'Safari');
	      os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua))
	        ? ' ' + data[1].replace(/_/g, '.')
	        : '');
	    }
	    // detect Kubuntu
	    else if (name == 'Konqueror' && !/buntu/i.test(os)) {
	      os = 'Kubuntu';
	    }
	    // detect Android browsers
	    else if (manufacturer && manufacturer != 'Google' &&
	        ((/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua)) || /\bVita\b/.test(product))) {
	      name = 'Android Browser';
	      os = /\bAndroid\b/.test(os) ? os : 'Android';
	    }
	    // detect false positives for Firefox/Safari
	    else if (!name || (data = !/\bMinefield\b|\(Android;/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
	      // escape the `/` for Firefox 1
	      if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
	        // clear name of false positives
	        name = null;
	      }
	      // reassign a generic name
	      if ((data = product || manufacturer || os) &&
	          (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
	        name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
	      }
	    }
	    // detect Firefox OS
	    if ((data = /\((Mobile|Tablet).*?Firefox\b/i.exec(ua)) && data[1]) {
	      os = 'Firefox OS';
	      if (!product) {
	        product = data[1];
	      }
	    }
	    // detect non-Opera versions (order is important)
	    if (!version) {
	      version = getVersion([
	        '(?:Cloud9|CriOS|CrMo|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))',
	        'Version',
	        qualify(name),
	        '(?:Firefox|Minefield|NetFront)'
	      ]);
	    }
	    // detect stubborn layout engines
	    if (layout == 'iCab' && parseFloat(version) > 3) {
	      layout = ['WebKit'];
	    } else if (
	        layout != 'Trident' &&
	        (data =
	          /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') ||
	          /\b(?:Midori|Nook|Safari)\b/i.test(ua) && 'WebKit' ||
	          !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident')
	        )
	    ) {
	      layout = [data];
	    }
	    // detect NetFront on PlayStation
	    else if (/\bPlayStation\b(?! Vita\b)/i.test(name) && layout == 'WebKit') {
	      layout = ['NetFront'];
	    }
	    // detect Windows Phone 7 desktop mode
	    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
	      name += ' Mobile';
	      os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
	      description.unshift('desktop mode');
	    }
	    // detect Windows Phone 8+ desktop mode
	    else if (/\bWPDesktop\b/i.test(ua)) {
	      name = 'IE Mobile';
	      os = 'Windows Phone 8+';
	      description.unshift('desktop mode');
	      version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
	    }
	    // detect IE 11 and above
	    else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
	      if (!/\bWPDesktop\b/i.test(ua)) {
	        if (name) {
	          description.push('identifying as ' + name + (version ? ' ' + version : ''));
	        }
	        name = 'IE';
	      }
	      version = data[1];
	    }
	    // detect Microsoft Edge
	    else if ((name == 'Chrome' || name != 'IE') && (data = /\bEdge\/([\d.]+)/.exec(ua))) {
	      name = 'Microsoft Edge';
	      version = data[1];
	      layout = ['Trident'];
	    }
	    // leverage environment features
	    if (useFeatures) {
	      // detect server-side environments
	      // Rhino has a global function while others have a global object
	      if (isHostType(context, 'global')) {
	        if (java) {
	          data = java.lang.System;
	          arch = data.getProperty('os.arch');
	          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
	        }
	        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {
	          os || (os = data[0].os || null);
	          try {
	            data[1] = context.require('ringo/engine').version;
	            version = data[1].join('.');
	            name = 'RingoJS';
	          } catch(e) {
	            if (data[0].global.system == context.system) {
	              name = 'Narwhal';
	            }
	          }
	        }
	        else if (typeof context.process == 'object' && (data = context.process)) {
	          name = 'Node.js';
	          arch = data.arch;
	          os = data.platform;
	          version = /[\d.]+/.exec(data.version)[0];
	        }
	        else if (rhino) {
	          name = 'Rhino';
	        }
	      }
	      // detect Adobe AIR
	      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {
	        name = 'Adobe AIR';
	        os = data.flash.system.Capabilities.os;
	      }
	      // detect PhantomJS
	      else if (getClassOf((data = context.phantom)) == phantomClass) {
	        name = 'PhantomJS';
	        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);
	      }
	      // detect IE compatibility modes
	      else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
	        // we're in compatibility mode when the Trident version + 4 doesn't
	        // equal the document mode
	        version = [version, doc.documentMode];
	        if ((data = +data[1] + 4) != version[1]) {
	          description.push('IE ' + version[1] + ' mode');
	          layout && (layout[1] = '');
	          version[1] = data;
	        }
	        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
	      }
	      os = os && format(os);
	    }
	    // detect prerelease phases
	    if (version && (data =
	          /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) ||
	          /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||
	          /\bMinefield\b/i.test(ua) && 'a'
	        )) {
	      prerelease = /b/i.test(data) ? 'beta' : 'alpha';
	      version = version.replace(RegExp(data + '\\+?$'), '') +
	        (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
	    }
	    // detect Firefox Mobile
	    if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS)\b/.test(os)) {
	      name = 'Firefox Mobile';
	    }
	    // obscure Maxthon's unreliable version
	    else if (name == 'Maxthon' && version) {
	      version = version.replace(/\.[\d.]+/, '.x');
	    }
	    // detect Silk desktop/accelerated modes
	    else if (name == 'Silk') {
	      if (!/\bMobi/i.test(ua)) {
	        os = 'Android';
	        description.unshift('desktop mode');
	      }
	      if (/Accelerated *= *true/i.test(ua)) {
	        description.unshift('accelerated');
	      }
	    }
	    // detect Xbox 360 and Xbox One
	    else if (/\bXbox\b/i.test(product)) {
	      os = null;
	      if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
	        description.unshift('mobile mode');
	      }
	    }
	    // add mobile postfix
	    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&
	        (os == 'Windows CE' || /Mobi/i.test(ua))) {
	      name += ' Mobile';
	    }
	    // detect IE platform preview
	    else if (name == 'IE' && useFeatures && context.external === null) {
	      description.unshift('platform preview');
	    }
	    // detect BlackBerry OS version
	    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
	    else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data =
	          (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] ||
	          version
	        )) {
	      data = [data, /BB10/.test(ua)];
	      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
	      version = null;
	    }
	    // detect Opera identifying/masking itself as another browser
	    // http://www.opera.com/support/kb/view/843/
	    else if (this != forOwn && (
	          product != 'Wii' && (
	            (useFeatures && opera) ||
	            (/Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua)) ||
	            (name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os)) ||
	            (name == 'IE' && (
	              (os && !/^Win/.test(os) && version > 5.5) ||
	              /\bWindows XP\b/.test(os) && version > 8 ||
	              version == 8 && !/\bTrident\b/.test(ua)
	            ))
	          )
	        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {
	
	      // when "indentifying", the UA contains both Opera and the other browser's name
	      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
	      if (reOpera.test(name)) {
	        if (/\bIE\b/.test(data) && os == 'Mac OS') {
	          os = null;
	        }
	        data = 'identify' + data;
	      }
	      // when "masking", the UA contains only the other browser's name
	      else {
	        data = 'mask' + data;
	        if (operaClass) {
	          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
	        } else {
	          name = 'Opera';
	        }
	        if (/\bIE\b/.test(data)) {
	          os = null;
	        }
	        if (!useFeatures) {
	          version = null;
	        }
	      }
	      layout = ['Presto'];
	      description.push(data);
	    }
	    // detect WebKit Nightly and approximate Chrome/Safari versions
	    if ((data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
	      // correct build for numeric comparison
	      // (e.g. "532.5" becomes "532.05")
	      data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
	      // nightly builds are postfixed with a `+`
	      if (name == 'Safari' && data[1].slice(-1) == '+') {
	        name = 'WebKit Nightly';
	        prerelease = 'alpha';
	        version = data[1].slice(0, -1);
	      }
	      // clear incorrect browser versions
	      else if (version == data[1] ||
	          version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
	        version = null;
	      }
	      // use the full Chrome version when available
	      data[1] = (/\bChrome\/([\d.]+)/i.exec(ua) || 0)[1];
	      // detect Blink layout engine
	      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && name != 'IE' && name != 'Microsoft Edge') {
	        layout = ['Blink'];
	      }
	      // detect JavaScriptCore
	      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
	      if (!useFeatures || (!likeChrome && !data[1])) {
	        layout && (layout[1] = 'like Safari');
	        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');
	      } else {
	        layout && (layout[1] = 'like Chrome');
	        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
	      }
	      // add the postfix of ".x" or "+" for approximate versions
	      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
	      // obscure version for some Safari 1-2 releases
	      if (name == 'Safari' && (!version || parseInt(version) > 45)) {
	        version = data;
	      }
	    }
	    // detect Opera desktop modes
	    if (name == 'Opera' &&  (data = /\bzbov|zvav$/.exec(os))) {
	      name += ' ';
	      description.unshift('desktop mode');
	      if (data == 'zvav') {
	        name += 'Mini';
	        version = null;
	      } else {
	        name += 'Mobile';
	      }
	      os = os.replace(RegExp(' *' + data + '$'), '');
	    }
	    // detect Chrome desktop mode
	    else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
	      description.unshift('desktop mode');
	      name = 'Chrome Mobile';
	      version = null;
	
	      if (/\bOS X\b/.test(os)) {
	        manufacturer = 'Apple';
	        os = 'iOS 4.3+';
	      } else {
	        os = null;
	      }
	    }
	    // strip incorrect OS versions
	    if (version && version.indexOf((data = /[\d.]+$/.exec(os))) == 0 &&
	        ua.indexOf('/' + data + '-') > -1) {
	      os = trim(os.replace(data, ''));
	    }
	    // add layout engine
	    if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (
	        /Browser|Lunascape|Maxthon/.test(name) ||
	        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {
	      // don't add layout details to description if they are falsey
	      (data = layout[layout.length - 1]) && description.push(data);
	    }
	    // combine contextual information
	    if (description.length) {
	      description = ['(' + description.join('; ') + ')'];
	    }
	    // append manufacturer
	    if (manufacturer && product && product.indexOf(manufacturer) < 0) {
	      description.push('on ' + manufacturer);
	    }
	    // append product
	    if (product) {
	      description.push((/^on /.test(description[description.length -1]) ? '' : 'on ') + product);
	    }
	    // parse OS into an object
	    if (os) {
	      data = / ([\d.+]+)$/.exec(os);
	      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
	      os = {
	        'architecture': 32,
	        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,
	        'version': data ? data[1] : null,
	        'toString': function() {
	          var version = this.version;
	          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
	        }
	      };
	    }
	    // add browser/OS architecture
	    if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
	      if (os) {
	        os.architecture = 64;
	        os.family = os.family.replace(RegExp(' *' + data), '');
	      }
	      if (
	          name && (/\bWOW64\b/i.test(ua) ||
	          (useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua)))
	      ) {
	        description.unshift('32-bit');
	      }
	    }
	
	    ua || (ua = null);
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The platform object.
	     *
	     * @name platform
	     * @type Object
	     */
	    var platform = {};
	
	    /**
	     * The platform description.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.description = ua;
	
	    /**
	     * The name of the browser's layout engine.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.layout = layout && layout[0];
	
	    /**
	     * The name of the product's manufacturer.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.manufacturer = manufacturer;
	
	    /**
	     * The name of the browser/environment.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.name = name;
	
	    /**
	     * The alpha/beta release indicator.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.prerelease = prerelease;
	
	    /**
	     * The name of the product hosting the browser.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.product = product;
	
	    /**
	     * The browser's user agent string.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.ua = ua;
	
	    /**
	     * The browser/environment version.
	     *
	     * @memberOf platform
	     * @type string|null
	     */
	    platform.version = name && version;
	
	    /**
	     * The name of the operating system.
	     *
	     * @memberOf platform
	     * @type Object
	     */
	    platform.os = os || {
	
	      /**
	       * The CPU architecture the OS is built for.
	       *
	       * @memberOf platform.os
	       * @type number|null
	       */
	      'architecture': null,
	
	      /**
	       * The family of the OS.
	       *
	       * Common values include:
	       * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
	       * "Windows XP", "OS X", "Ubuntu", "Debian", "Fedora", "Red Hat", "SuSE",
	       * "Android", "iOS" and "Windows Phone"
	       *
	       * @memberOf platform.os
	       * @type string|null
	       */
	      'family': null,
	
	      /**
	       * The version of the OS.
	       *
	       * @memberOf platform.os
	       * @type string|null
	       */
	      'version': null,
	
	      /**
	       * Returns the OS string.
	       *
	       * @memberOf platform.os
	       * @returns {string} The OS string.
	       */
	      'toString': function() { return 'null'; }
	    };
	
	    platform.parse = parse;
	    platform.toString = toStringPlatform;
	
	    if (platform.version) {
	      description.unshift(version);
	    }
	    if (platform.name) {
	      description.unshift(name);
	    }
	    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
	      description.push(product ? '(' + os + ')' : 'on ' + os);
	    }
	    if (description.length) {
	      platform.description = description.join(' ');
	    }
	    return platform;
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  // export platform
	  // some AMD build optimizers, like r.js, check for condition patterns like the following:
	  if (true) {
	    // define as an anonymous module so, through path mapping, it can be aliased
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return parse();
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Narwhal, Node.js, Rhino -require, or RingoJS
	    forOwn(parse(), function(value, key) {
	      freeExports[key] = value;
	    });
	  }
	  // in a browser or Rhino
	  else {
	    root.platform = parse();
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(331)(module), (function() { return this; }())))

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.2.1
	 */
	
	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }
	
	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }
	
	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }
	
	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }
	
	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;
	
	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }
	
	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }
	
	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }
	
	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	
	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';
	
	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // see https://github.com/cujojs/when/issues/410 for details
	      return function() {
	        process.nextTick(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });
	
	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }
	
	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }
	
	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }
	
	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];
	
	        callback(arg);
	
	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }
	
	      lib$es6$promise$asap$$len = 0;
	    }
	
	    function lib$es6$promise$asap$$attemptVertx() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(337);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }
	
	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }
	    function lib$es6$promise$then$$then(onFulfillment, onRejection) {
	      var parent = this;
	
	      var child = new this.constructor(lib$es6$promise$$internal$$noop);
	
	      if (child[lib$es6$promise$$internal$$PROMISE_ID] === undefined) {
	        lib$es6$promise$$internal$$makePromise(child);
	      }
	
	      var state = parent._state;
	
	      if (state) {
	        var callback = arguments[state - 1];
	        lib$es6$promise$asap$$asap(function(){
	          lib$es6$promise$$internal$$invokeCallback(state, child, callback, parent._result);
	        });
	      } else {
	        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	      }
	
	      return child;
	    }
	    var lib$es6$promise$then$$default = lib$es6$promise$then$$then;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    var lib$es6$promise$$internal$$PROMISE_ID = Math.random().toString(36).substring(16);
	
	    function lib$es6$promise$$internal$$noop() {}
	
	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;
	
	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$selfFulfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }
	
	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }
	
	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;
	
	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }
	
	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) {
	      if (maybeThenable.constructor === promise.constructor &&
	          then === lib$es6$promise$then$$default &&
	          constructor.resolve === lib$es6$promise$promise$resolve$$default) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }
	
	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }
	
	      lib$es6$promise$$internal$$publish(promise);
	    }
	
	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	
	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;
	
	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }
	
	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;
	
	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }
	
	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;
	
	      parent._onerror = null;
	
	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;
	
	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;
	
	      if (subscribers.length === 0) { return; }
	
	      var child, callback, detail = promise._result;
	
	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];
	
	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }
	
	      promise._subscribers.length = 0;
	    }
	
	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }
	
	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;
	
	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);
	
	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }
	
	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }
	
	      } else {
	        value = detail;
	        succeeded = true;
	      }
	
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }
	
	    var lib$es6$promise$$internal$$id = 0;
	    function lib$es6$promise$$internal$$nextId() {
	      return lib$es6$promise$$internal$$id++;
	    }
	
	    function lib$es6$promise$$internal$$makePromise(promise) {
	      promise[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$id++;
	      promise._state = undefined;
	      promise._result = undefined;
	      promise._subscribers = [];
	    }
	
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        return new Constructor(function(resolve, reject) {
	          reject(new TypeError('You must pass an array to race.'));
	        });
	      } else {
	        return new Constructor(function(resolve, reject) {
	          var length = entries.length;
	          for (var i = 0; i < length; i++) {
	            Constructor.resolve(entries[i]).then(resolve, reject);
	          }
	        });
	      }
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
	
	
	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }
	
	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }
	
	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.
	
	      Terminology
	      -----------
	
	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.
	
	      A promise can be in one of three states: pending, fulfilled, or rejected.
	
	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.
	
	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.
	
	
	      Basic Usage:
	      ------------
	
	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);
	
	        // on failure
	        reject(reason);
	      });
	
	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Advanced Usage:
	      ---------------
	
	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.
	
	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();
	
	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();
	
	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }
	
	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Unlike callbacks, promises are great composable primitives.
	
	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON
	
	        return values;
	      });
	      ```
	
	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$nextId();
	      this._result = this._state = undefined;
	      this._subscribers = [];
	
	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();
	        this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();
	      }
	    }
	
	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;
	
	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,
	
	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.
	
	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```
	
	      Chaining
	      --------
	
	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.
	
	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });
	
	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	
	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```
	
	      Assimilation
	      ------------
	
	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```
	
	      If the assimliated promise rejects, then the downstream promise will also reject.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```
	
	      Simple Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var result;
	
	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```
	
	      Advanced Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var author, books;
	
	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	
	      function foundBooks(books) {
	
	      }
	
	      function failure(reason) {
	
	      }
	
	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: lib$es6$promise$then$$default,
	
	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.
	
	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }
	
	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }
	
	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      this._instanceConstructor = Constructor;
	      this.promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (!this.promise[lib$es6$promise$$internal$$PROMISE_ID]) {
	        lib$es6$promise$$internal$$makePromise(this.promise);
	      }
	
	      if (lib$es6$promise$utils$$isArray(input)) {
	        this._input     = input;
	        this.length     = input.length;
	        this._remaining = input.length;
	
	        this._result = new Array(this.length);
	
	        if (this.length === 0) {
	          lib$es6$promise$$internal$$fulfill(this.promise, this._result);
	        } else {
	          this.length = this.length || 0;
	          this._enumerate();
	          if (this._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(this.promise, this._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(this.promise, lib$es6$promise$enumerator$$validationError());
	      }
	    }
	
	    function lib$es6$promise$enumerator$$validationError() {
	      return new Error('Array Methods must be provided an Array');
	    }
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var length  = this.length;
	      var input   = this._input;
	
	      for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        this._eachEntry(input[i], i);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var c = this._instanceConstructor;
	      var resolve = c.resolve;
	
	      if (resolve === lib$es6$promise$promise$resolve$$default) {
	        var then = lib$es6$promise$$internal$$getThen(entry);
	
	        if (then === lib$es6$promise$then$$default &&
	            entry._state !== lib$es6$promise$$internal$$PENDING) {
	          this._settledAt(entry._state, i, entry._result);
	        } else if (typeof then !== 'function') {
	          this._remaining--;
	          this._result[i] = entry;
	        } else if (c === lib$es6$promise$promise$$default) {
	          var promise = new c(lib$es6$promise$$internal$$noop);
	          lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);
	          this._willSettleAt(promise, i);
	        } else {
	          this._willSettleAt(new c(function(resolve) { resolve(entry); }), i);
	        }
	      } else {
	        this._willSettleAt(resolve(entry), i);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var promise = this.promise;
	
	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        this._remaining--;
	
	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          this._result[i] = value;
	        }
	      }
	
	      if (this._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, this._result);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;
	
	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;
	
	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }
	
	      var P = local.Promise;
	
	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }
	
	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
	
	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };
	
	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(338)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }
	
	    lib$es6$promise$polyfill$$default();
	}).call(this);
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(336), (function() { return this; }()), __webpack_require__(331)(module)))

/***/ }),
/* 336 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 337 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 338 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var axios_1 = __webpack_require__(340);
	var _ = __webpack_require__(330);
	var es6_promise_1 = __webpack_require__(335);
	var UrlUtil_1 = __webpack_require__(365);
	var GenericConnection = (function () {
	    function GenericConnection(cfg) {
	        this.cfg = cfg;
	    }
	    GenericConnection.prototype.get = function (basePath, suffix, queryParams, callback) {
	        return handleRequest(basePath, suffix, "GET", this.cfg, undefined, queryParams, callback);
	    };
	    GenericConnection.prototype.post = function (basePath, suffix, body, queryParams, callback) {
	        return handleRequest(basePath, suffix, "POST", this.cfg, body, queryParams, callback);
	    };
	    GenericConnection.prototype.put = function (basePath, suffix, body, queryParams, callback) {
	        return handleRequest(basePath, suffix, "PUT", this.cfg, body, queryParams, callback);
	    };
	    return GenericConnection;
	}());
	exports.GenericConnection = GenericConnection;
	var LocalAuthConnection = (function (_super) {
	    __extends(LocalAuthConnection, _super);
	    function LocalAuthConnection(cfg) {
	        var _this = _super.call(this, cfg) || this;
	        _this.cfg = cfg;
	        return _this;
	    }
	    LocalAuthConnection.prototype.get = function (basePath, suffix, queryParams, callback) {
	        var config = _.omit(this.cfg, "apiKey");
	        return handleRequest(basePath, suffix, "GET", config, undefined, queryParams, callback);
	    };
	    LocalAuthConnection.prototype.getSkipCitrix = function (basePath, suffix, queryParams, callback) {
	        var config = _.omit(this.cfg, "apiKey");
	        return handleRequest(basePath, suffix, "GET", config, undefined, queryParams, callback, true);
	    };
	    LocalAuthConnection.prototype.post = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, "apiKey");
	        return handleRequest(basePath, suffix, "POST", config, body, queryParams, callback);
	    };
	    LocalAuthConnection.prototype.put = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, "apiKey");
	        return handleRequest(basePath, suffix, "PUT", config, body, queryParams, callback);
	    };
	    return LocalAuthConnection;
	}(GenericConnection));
	exports.LocalAuthConnection = LocalAuthConnection;
	var LocalConnection = (function (_super) {
	    __extends(LocalConnection, _super);
	    function LocalConnection(cfg) {
	        var _this = _super.call(this, cfg) || this;
	        _this.cfg = cfg;
	        return _this;
	    }
	    LocalConnection.prototype.get = function (basePath, suffix, queryParams, callback) {
	        var config = _.omit(this.cfg, ["apiKey", "jwt"]);
	        return handleRequest(basePath, suffix, "GET", config, undefined, queryParams, callback);
	    };
	    LocalConnection.prototype.getSkipCitrix = function (basePath, suffix, queryParams, callback) {
	        var config = _.omit(this.cfg, ["apiKey", "jwt"]);
	        return handleRequest(basePath, suffix, "GET", config, undefined, queryParams, callback, true);
	    };
	    LocalConnection.prototype.post = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, ["apiKey", "jwt"]);
	        return handleRequest(basePath, suffix, "POST", config, body, queryParams, callback);
	    };
	    LocalConnection.prototype.put = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, ["apiKey", "jwt"]);
	        return handleRequest(basePath, suffix, "PUT", config, body, queryParams, callback);
	    };
	    return LocalConnection;
	}(GenericConnection));
	exports.LocalConnection = LocalConnection;
	var RemoteConnection = (function (_super) {
	    __extends(RemoteConnection, _super);
	    function RemoteConnection(cfg) {
	        var _this = _super.call(this, cfg) || this;
	        _this.cfg = cfg;
	        return _this;
	    }
	    RemoteConnection.prototype.get = function (basePath, suffix, queryParams, callback) {
	        var config = _.omit(this.cfg, "jwt");
	        return handleRequest(basePath, suffix, "GET", config, undefined, queryParams, callback, true);
	    };
	    RemoteConnection.prototype.post = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, "jwt");
	        return handleRequest(basePath, suffix, "POST", config, body, queryParams, callback, true);
	    };
	    RemoteConnection.prototype.put = function (basePath, suffix, body, queryParams, callback) {
	        var config = _.omit(this.cfg, "jwt");
	        return handleRequest(basePath, suffix, "PUT", config, body, queryParams, callback, true);
	    };
	    return RemoteConnection;
	}(GenericConnection));
	exports.RemoteConnection = RemoteConnection;
	var LocalTestConnection = (function (_super) {
	    __extends(LocalTestConnection, _super);
	    function LocalTestConnection() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.config = undefined;
	        return _this;
	    }
	    LocalTestConnection.prototype.get = function (basePath, suffix, queryParams, callback) {
	        return handleTestRequest(basePath, suffix, "GET", this.config, undefined, queryParams, callback);
	    };
	    LocalTestConnection.prototype.post = function (basePath, suffix, body, queryParams, callback) {
	        return handleTestRequest(basePath, suffix, "POST", this.config, body, queryParams, callback);
	    };
	    LocalTestConnection.prototype.put = function (basePath, suffix, body, queryParams, callback) {
	        return handleTestRequest(basePath, suffix, "PUT", this.config, body, queryParams, callback);
	    };
	    return LocalTestConnection;
	}(GenericConnection));
	exports.LocalTestConnection = LocalTestConnection;
	function handleRequest(basePath, suffix, method, gclConfig, body, params, callback, skipCitrixCheck) {
	    if (!callback || typeof callback !== "function") {
	        callback = function () { };
	    }
	    if (skipCitrixCheck || !gclConfig.citrix || gclConfig.agentPort !== -1) {
	        var config_1 = {
	            url: UrlUtil_1.UrlUtil.create(basePath, suffix, gclConfig, skipCitrixCheck),
	            method: method,
	            headers: {
	                "Accept-Language": "en-US"
	            },
	            responseType: "json"
	        };
	        if (body) {
	            config_1.data = body;
	        }
	        if (params) {
	            config_1.params = params;
	        }
	        if (gclConfig.apiKey) {
	            config_1.headers.apikey = gclConfig.apiKey;
	        }
	        if (gclConfig.jwt) {
	            config_1.headers.Authorization = "Bearer " + gclConfig.jwt;
	        }
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            axios_1.default.request(config_1).then(function (response) {
	                callback(null, response.data);
	                return resolve(response.data);
	            }).catch(function (error) {
	                if (error.response) {
	                    if (error.response.data) {
	                        callback(error.response.data, null);
	                        return reject(error.response.data);
	                    }
	                    else {
	                        callback(error.response, null);
	                        return reject(error.response);
	                    }
	                }
	                else {
	                    callback(error, null);
	                    return reject(error);
	                }
	            });
	        });
	    }
	    else {
	        var agentPortError = {
	            description: "Running in Citrix environment but no Agent port was defined in config.",
	            status: 400,
	            code: "801"
	        };
	        callback(agentPortError, null);
	        return es6_promise_1.Promise.reject(agentPortError);
	    }
	}
	function handleTestRequest(basePath, suffix, method, gclConfig, body, params, callback) {
	    if (!callback || typeof callback !== "function") {
	        callback = function () { };
	    }
	    if (gclConfig.citrix && gclConfig.agentPort === -1) {
	        var agentPortError = {
	            description: "Running in Citrix environment but no Agent port was defined in config.",
	            status: 400,
	            code: "801"
	        };
	        callback(agentPortError, null);
	        return es6_promise_1.Promise.reject(agentPortError);
	    }
	    else {
	        var config_2 = {
	            url: UrlUtil_1.UrlUtil.create(basePath, suffix, gclConfig, true),
	            method: method,
	            headers: {
	                "Accept-Language": "en-US",
	                "X-Consumer-Username": "testorg.testapp.v1"
	            },
	            responseType: "json"
	        };
	        if (body) {
	            config_2.data = body;
	        }
	        if (params) {
	            config_2.params = params;
	        }
	        if (gclConfig.jwt) {
	            config_2.headers.Authorization = "Bearer " + gclConfig.jwt;
	        }
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            axios_1.default.request(config_2).then(function (response) {
	                callback(null, response.data);
	                return resolve(response.data);
	            }).catch(function (error) {
	                if (error.response) {
	                    callback(error.response, null);
	                    return reject(error.response);
	                }
	                else {
	                    callback(error, null);
	                    return reject(error);
	                }
	            });
	        });
	    }
	}


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(341);

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	var bind = __webpack_require__(343);
	var Axios = __webpack_require__(344);
	var defaults = __webpack_require__(345);
	
	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);
	
	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);
	
	  // Copy context to instance
	  utils.extend(instance, context);
	
	  return instance;
	}
	
	// Create the default instance to be exported
	var axios = createInstance(defaults);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};
	
	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(362);
	axios.CancelToken = __webpack_require__(363);
	axios.isCancel = __webpack_require__(359);
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(364);
	
	module.exports = axios;
	
	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bind = __webpack_require__(343);
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 343 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaults = __webpack_require__(345);
	var utils = __webpack_require__(342);
	var InterceptorManager = __webpack_require__(356);
	var dispatchRequest = __webpack_require__(357);
	var isAbsoluteURL = __webpack_require__(360);
	var combineURLs = __webpack_require__(361);
	
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }
	
	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	
	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	
	module.exports = Axios;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(342);
	var normalizeHeaderName = __webpack_require__(346);
	
	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(347);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(347);
	  }
	  return adapter;
	}
	
	var defaults = {
	  adapter: getDefaultAdapter(),
	
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],
	
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	
	utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
	  defaults.headers[method] = {};
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	
	module.exports = defaults;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(336)))

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(342);
	var settle = __webpack_require__(348);
	var buildURL = __webpack_require__(351);
	var parseHeaders = __webpack_require__(352);
	var isURLSameOrigin = __webpack_require__(353);
	var createError = __webpack_require__(349);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(354);
	
	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	
	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }
	
	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;
	
	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }
	
	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }
	
	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
	
	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	
	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }
	
	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }
	
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	
	      settle(resolve, reject, response);
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(355);
	
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;
	
	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }
	
	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }
	
	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }
	
	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        if (request.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }
	
	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }
	
	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }
	
	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }
	
	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }
	
	    if (requestData === undefined) {
	      requestData = null;
	    }
	
	    // Send the request
	    request.send(requestData);
	  });
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(336)))

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var createError = __webpack_require__(349);
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response
	    ));
	  }
	};


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var enhanceError = __webpack_require__(350);
	
	/**
	 * Create an Error with the specified message, config, error code, and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, response);
	};


/***/ }),
/* 350 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.response = response;
	  return error;
	};


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }
	
	      if (!utils.isArray(val)) {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) { return parsed; }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });
	
	  return parsed;
	};


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;
	
	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;
	
	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }
	
	      urlParsingNode.setAttribute('href', href);
	
	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }
	
	    originURL = resolveURL(window.location.href);
	
	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :
	
	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 354 */
/***/ (function(module, exports) {

	'use strict';
	
	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js
	
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';
	
	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}
	
	module.exports = btoa;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));
	
	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }
	
	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }
	
	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }
	
	        if (secure === true) {
	          cookie.push('secure');
	        }
	
	        document.cookie = cookie.join('; ');
	      },
	
	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },
	
	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :
	
	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	var transformData = __webpack_require__(358);
	var isCancel = __webpack_require__(359);
	var defaults = __webpack_require__(345);
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	
	  // Ensure headers exist
	  config.headers = config.headers || {};
	
	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );
	
	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );
	
	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );
	
	  var adapter = config.adapter || defaults.adapter;
	
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);
	
	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );
	
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);
	
	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }
	
	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(342);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};


/***/ }),
/* 359 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 360 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 361 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 362 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}
	
	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};
	
	Cancel.prototype.__CANCEL__ = true;
	
	module.exports = Cancel;


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Cancel = __webpack_require__(362);
	
	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }
	
	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }
	
	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};
	
	module.exports = CancelToken;


/***/ }),
/* 364 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var agent_1 = __webpack_require__(366);
	var UrlUtil = (function () {
	    function UrlUtil() {
	    }
	    UrlUtil.create = function (base, suffix, config, skipCitrixCheck) {
	        if (config.citrix && config.agentPort !== -1 && !skipCitrixCheck) {
	            return base + agent_1.AgentClient.urlPrefix(config.agentPort) + suffix;
	        }
	        else {
	            return base + suffix;
	        }
	    };
	    return UrlUtil;
	}());
	exports.UrlUtil = UrlUtil;


/***/ }),
/* 366 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var AgentClient = (function () {
	    function AgentClient(url, connection) {
	        this.url = url;
	        this.connection = connection;
	    }
	    AgentClient.urlPrefix = function (port) {
	        return AgentClient.AGENT_PATH + "/" + port;
	    };
	    AgentClient.prototype.get = function (filters, callback) {
	        return this.connection.getSkipCitrix(this.url, AgentClient.AGENT_PATH, filters, callback);
	    };
	    return AgentClient;
	}());
	AgentClient.AGENT_PATH = "/agent";
	exports.AgentClient = AgentClient;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var es6_promise_1 = __webpack_require__(335);
	var SEPARATOR = "/";
	var QP_APIKEY = "?apikey=";
	var SECURITY = "/security";
	var SYS_INFO = "/system/status";
	var SECURITY_JWT_ISSUE = SECURITY + "/jwt/issue";
	var SECURITY_JWT_REFRESH = SECURITY + "/jwt/refresh";
	var DOWNLOAD = "/download/gcl";
	var PUB_KEY = SECURITY + "/keys/public";
	var DEVICE = "/devices";
	var DSClient = (function () {
	    function DSClient(url, connection, cfg) {
	        this.url = url;
	        this.connection = connection;
	        this.cfg = cfg;
	    }
	    DSClient.prototype.getUrl = function () { return this.url; };
	    DSClient.prototype.getInfo = function (callback) {
	        return this.connection.get(this.url, SYS_INFO, undefined, callback);
	    };
	    DSClient.prototype.getDevice = function (uuid, callback) {
	        return this.connection.get(this.url, DEVICE + SEPARATOR + uuid, undefined, callback);
	    };
	    DSClient.prototype.getJWT = function (callback) {
	        var self = this;
	        if (callback) {
	            doGetJwt();
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                doGetJwt(resolve, reject);
	            });
	        }
	        function doGetJwt(resolve, reject) {
	            self.connection.get(self.url, SECURITY_JWT_ISSUE, undefined, function (error, data) {
	                if (error) {
	                    if (callback) {
	                        return callback(error, null);
	                    }
	                    else {
	                        reject(error);
	                    }
	                }
	                else {
	                    if (data && data.token) {
	                        self.cfg.jwt = data.token;
	                    }
	                    if (callback) {
	                        return callback(null, data);
	                    }
	                    else {
	                        resolve(data);
	                    }
	                }
	            });
	        }
	    };
	    DSClient.prototype.refreshJWT = function (callback) {
	        var actualJWT = this.cfg.jwt;
	        if (actualJWT) {
	            return this.connection.post(this.url, SECURITY_JWT_REFRESH, { originalJWT: actualJWT }, undefined, callback);
	        }
	        else {
	            var error = { code: "500", description: "No JWT available", status: 412 };
	            if (callback) {
	                return callback(error, null);
	            }
	            else {
	                return es6_promise_1.Promise.reject(error);
	            }
	        }
	    };
	    DSClient.prototype.getPubKey = function (callback) {
	        return this.connection.get(this.url, PUB_KEY, undefined, callback);
	    };
	    DSClient.prototype.downloadLink = function (infoBrowser, callback) {
	        var self = this;
	        if (callback) {
	            doGetDownloadLink();
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                doGetDownloadLink(resolve, reject);
	            });
	        }
	        function doGetDownloadLink(resolve, reject) {
	            self.connection.post(self.url, DOWNLOAD, infoBrowser, undefined, function (err, data) {
	                if (err) {
	                    if (callback) {
	                        return callback(err, null);
	                    }
	                    else {
	                        reject(err);
	                    }
	                }
	                else {
	                    var returnObject = { url: self.cfg.dsUrlBase + data.path + QP_APIKEY + self.cfg.apiKey, success: true };
	                    if (callback) {
	                        return callback(null, returnObject);
	                    }
	                    else {
	                        return resolve(returnObject);
	                    }
	                }
	            });
	        }
	    };
	    DSClient.prototype.register = function (info, device_id, callback) {
	        var req = _.merge({ uuid: device_id, version: info.core_version }, _.omit(info, "core_version"));
	        return this.connection.put(this.url, DEVICE + SEPARATOR + device_id, req, undefined, callback);
	    };
	    DSClient.prototype.sync = function (info, device_id, callback) {
	        var req = _.merge({ uuid: device_id, version: info.core_version }, _.omit(info, "core_version"));
	        return this.connection.post(this.url, DEVICE + SEPARATOR + device_id, req, undefined, callback);
	    };
	    return DSClient;
	}());
	exports.DSClient = DSClient;


/***/ }),
/* 368 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var CHALLENGE = "/challenge";
	var CERTIFICATE = "/certs/validate-chain";
	var SYSTEM_STATUS = "/system/status";
	var SIGNATURE = "/signature/validate";
	var OCVClient = (function () {
	    function OCVClient(url, connection) {
	        this.url = url;
	        this.connection = connection;
	    }
	    OCVClient.prototype.getUrl = function () { return this.url; };
	    OCVClient.prototype.validateSignature = function (data, callback) {
	        return this.connection.post(this.url, SIGNATURE, data, undefined, callback);
	    };
	    OCVClient.prototype.getInfo = function (callback) {
	        return this.connection.get(this.url, SYSTEM_STATUS, undefined, callback);
	    };
	    OCVClient.prototype.getChallenge = function (digestAlgorithm, callback) {
	        return this.connection.get(this.url, CHALLENGE, { digest: digestAlgorithm }, callback);
	    };
	    OCVClient.prototype.validateChallengeSignedHash = function (data, callback) {
	        return this.connection.post(this.url, CHALLENGE, data, undefined, callback);
	    };
	    OCVClient.prototype.validateCertificateChain = function (data, callback) {
	        return this.connection.post(this.url, CERTIFICATE, data, undefined, callback);
	    };
	    return OCVClient;
	}());
	exports.OCVClient = OCVClient;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var EMV_1 = __webpack_require__(370);
	var EidBe_1 = __webpack_require__(484);
	var EidLux_1 = __webpack_require__(485);
	var mobib_1 = __webpack_require__(486);
	var LuxTrust_1 = __webpack_require__(487);
	var ocra_1 = __webpack_require__(488);
	var Aventra_1 = __webpack_require__(489);
	var Oberthur_1 = __webpack_require__(490);
	var piv_1 = __webpack_require__(491);
	var safenet_1 = __webpack_require__(492);
	var dnie_1 = __webpack_require__(493);
	var EidPt_1 = __webpack_require__(494);
	var RemoteLoading_1 = __webpack_require__(495);
	var Belfius_1 = __webpack_require__(496);
	var CONTAINER_CONTEXT_PATH = "/plugins/";
	var CONTAINER_NEW_CONTEXT_PATH = "/containers/";
	var CONTAINER_BEID = CONTAINER_CONTEXT_PATH + "beid";
	var CONTAINER_LUXEID = CONTAINER_CONTEXT_PATH + "luxeid";
	var CONTAINER_DNIE = CONTAINER_CONTEXT_PATH + "dnie";
	var CONTAINER_EMV = CONTAINER_CONTEXT_PATH + "emv";
	var CONTAINER_LUXTRUST = CONTAINER_CONTEXT_PATH + "luxtrust";
	var CONTAINER_MOBIB = CONTAINER_CONTEXT_PATH + "mobib";
	var CONTAINER_OCRA = CONTAINER_CONTEXT_PATH + "ocra";
	var CONTAINER_AVENTRA = CONTAINER_CONTEXT_PATH + "aventra";
	var CONTAINER_OBERTHUR = CONTAINER_CONTEXT_PATH + "oberthur";
	var CONTAINER_PIV = CONTAINER_CONTEXT_PATH + "piv";
	var CONTAINER_PTEID = CONTAINER_CONTEXT_PATH + "pteid";
	var CONTAINER_SAFENET = CONTAINER_CONTEXT_PATH + "safenet";
	var CONTAINER_REMOTE_LOADING = CONTAINER_CONTEXT_PATH + "readerapi";
	var PluginFactory = (function () {
	    function PluginFactory(url, connection) {
	        this.url = url;
	        this.connection = connection;
	    }
	    PluginFactory.prototype.createDNIe = function (reader_id) { return new dnie_1.DNIe(this.url, CONTAINER_DNIE, this.connection, reader_id); };
	    PluginFactory.prototype.createEidBE = function (reader_id) { return new EidBe_1.EidBe(this.url, CONTAINER_BEID, this.connection, reader_id); };
	    PluginFactory.prototype.createEidLUX = function (reader_id, pin) {
	        return new EidLux_1.EidLux(this.url, CONTAINER_LUXEID, this.connection, reader_id, pin);
	    };
	    PluginFactory.prototype.createEidPT = function (reader_id) { return new EidPt_1.EidPt(this.url, CONTAINER_PTEID, this.connection, reader_id); };
	    PluginFactory.prototype.createEmv = function (reader_id) { return new EMV_1.EMV(this.url, CONTAINER_EMV, this.connection, reader_id); };
	    PluginFactory.prototype.createLuxTrust = function (reader_id) { return new LuxTrust_1.LuxTrust(this.url, CONTAINER_LUXTRUST, this.connection, reader_id); };
	    PluginFactory.prototype.createMobib = function (reader_id) { return new mobib_1.Mobib(this.url, CONTAINER_MOBIB, this.connection, reader_id); };
	    PluginFactory.prototype.createOcra = function (reader_id) { return new ocra_1.Ocra(this.url, CONTAINER_OCRA, this.connection, reader_id); };
	    PluginFactory.prototype.createAventraNO = function (reader_id) { return new Aventra_1.Aventra(this.url, CONTAINER_AVENTRA, this.connection, reader_id); };
	    PluginFactory.prototype.createOberthurNO = function (reader_id) { return new Oberthur_1.Oberthur(this.url, CONTAINER_OBERTHUR, this.connection, reader_id); };
	    PluginFactory.prototype.createPIV = function (reader_id) { return new piv_1.PIV(this.url, CONTAINER_PIV, this.connection, reader_id); };
	    PluginFactory.prototype.createSafeNet = function (config) {
	        return new safenet_1.SafeNet(this.url, CONTAINER_SAFENET, this.connection, config);
	    };
	    PluginFactory.prototype.createRemoteLoading = function (reader_id) {
	        return new RemoteLoading_1.RemoteLoading(this.url, CONTAINER_REMOTE_LOADING, this.connection, reader_id);
	    };
	    PluginFactory.prototype.createBelfius = function (reader_id) {
	        return new Belfius_1.Belfius(this.url, CONTAINER_REMOTE_LOADING, this.connection, reader_id);
	    };
	    return PluginFactory;
	}());
	exports.PluginFactory = PluginFactory;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var EMV = (function (_super) {
	    __extends(EMV, _super);
	    function EMV() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EMV.prototype.applicationData = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EMV.APPLICATION_DATA), undefined, callback);
	    };
	    EMV.prototype.applications = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EMV.APPLICATIONS), undefined, callback);
	    };
	    EMV.prototype.iccPublicKeyCertificate = function (aid, callback) {
	        return this.connection.post(this.baseUrl, this.containerSuffix(EMV.ICC_PUBLIC_KEY_CERT), { aid: aid }, undefined, callback);
	    };
	    EMV.prototype.issuerPublicKeyCertificate = function (aid, callback) {
	        return this.connection.post(this.baseUrl, this.containerSuffix(EMV.ISSUER_PUBLIC_KEY_CERT), { aid: aid }, undefined, callback);
	    };
	    return EMV;
	}(Card_1.GenericPinCard));
	EMV.APPLICATIONS = "/applications";
	EMV.APPLICATION_DATA = "/application-data";
	EMV.ISSUER_PUBLIC_KEY_CERT = "/issuer-public-key-certificate";
	EMV.ICC_PUBLIC_KEY_CERT = "/icc-public-key-certificate";
	exports.EMV = EMV;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var PinEnforcer_1 = __webpack_require__(372);
	var CertParser_1 = __webpack_require__(373);
	var ResponseHandler_1 = __webpack_require__(482);
	var RequestHandler_1 = __webpack_require__(483);
	var GenericContainer = (function () {
	    function GenericContainer(baseUrl, containerUrl, connection, reader_id) {
	        this.baseUrl = baseUrl;
	        this.containerUrl = containerUrl;
	        this.connection = connection;
	        this.reader_id = reader_id;
	    }
	    GenericContainer.prototype.containerSuffix = function (path) {
	        if (path && path.length) {
	            return this.containerUrl + "/" + this.reader_id + path;
	        }
	        else {
	            return this.containerUrl + "/" + this.reader_id;
	        }
	    };
	    return GenericContainer;
	}());
	exports.GenericContainer = GenericContainer;
	var GenericSmartCard = (function (_super) {
	    __extends(GenericSmartCard, _super);
	    function GenericSmartCard() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    GenericSmartCard.prototype.allData = function (options, callback) {
	        var requestOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.get(this.baseUrl, this.containerSuffix(), requestOptions.params).then(function (data) {
	            return CertParser_1.CertParser.process(data, requestOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    return GenericSmartCard;
	}(GenericContainer));
	exports.GenericSmartCard = GenericSmartCard;
	var GenericPinCard = (function (_super) {
	    __extends(GenericPinCard, _super);
	    function GenericPinCard() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    GenericPinCard.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericPinCard.VERIFY_PIN), body, undefined, callback);
	        });
	    };
	    return GenericPinCard;
	}(GenericSmartCard));
	GenericPinCard.VERIFY_PIN = "/verify-pin";
	exports.GenericPinCard = GenericPinCard;
	var GenericCertCard = (function (_super) {
	    __extends(GenericCertCard, _super);
	    function GenericCertCard() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    GenericCertCard.prototype.allAlgoRefsForAuthentication = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(GenericCertCard.AUTHENTICATE), undefined, callback);
	    };
	    GenericCertCard.prototype.allAlgoRefsForSigning = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(GenericCertCard.SIGN_DATA), undefined, callback);
	    };
	    GenericCertCard.prototype.allCerts = function (options, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.get(this.baseUrl, this.containerSuffix(GenericCertCard.ALL_CERTIFICATES), reqOptions.params).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    GenericCertCard.prototype.authenticate = function (body, callback) {
	        var _this = this;
	        body.algorithm_reference = body.algorithm_reference.toLocaleLowerCase();
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericCertCard.AUTHENTICATE), body, undefined, callback);
	        });
	    };
	    GenericCertCard.prototype.signData = function (body, callback) {
	        var _this = this;
	        body.algorithm_reference = body.algorithm_reference.toLocaleLowerCase();
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericCertCard.SIGN_DATA), body, undefined, callback);
	        });
	    };
	    GenericCertCard.prototype.getCertificate = function (certUrl, options) {
	        var self = this;
	        return self.connection.get(this.baseUrl, self.containerSuffix(GenericCertCard.ALL_CERTIFICATES + certUrl), undefined).then(function (data) {
	            return CertParser_1.CertParser.process(data, options.parseCerts, options.callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, options.callback);
	        });
	    };
	    return GenericCertCard;
	}(GenericPinCard));
	GenericCertCard.ALL_CERTIFICATES = "/certificates";
	GenericCertCard.AUTHENTICATE = "/authenticate";
	GenericCertCard.CERT_ROOT = "/root";
	GenericCertCard.CERT_AUTHENTICATION = "/authentication";
	GenericCertCard.CERT_NON_REPUDIATION = "/non-repudiation";
	GenericCertCard.CERT_ISSUER = "/issuer";
	GenericCertCard.CERT_SIGNING = "/signing";
	GenericCertCard.CERT_ENCRYPTION = "/encryption";
	GenericCertCard.CERT_CITIZEN = "/citizen";
	GenericCertCard.CERT_RRN = "/rrn";
	GenericCertCard.SIGN_DATA = "/sign";
	exports.GenericCertCard = GenericCertCard;
	var GenericSecuredCertCard = (function (_super) {
	    __extends(GenericSecuredCertCard, _super);
	    function GenericSecuredCertCard() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    GenericSecuredCertCard.prototype.allAlgoRefsForAuthentication = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(GenericSecuredCertCard.AUTHENTICATE), undefined, callback);
	    };
	    GenericSecuredCertCard.prototype.allAlgoRefsForSigning = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(GenericSecuredCertCard.SIGN_DATA), undefined, callback);
	    };
	    GenericSecuredCertCard.prototype.allData = function (options, body, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.post(this.baseUrl, this.containerSuffix(), body, reqOptions.params).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.allCerts = function (options, body, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.post(this.baseUrl, this.containerSuffix(GenericSecuredCertCard.ALL_CERTIFICATES), body, reqOptions.params).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericSecuredCertCard.VERIFY_PIN), body, undefined, callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.signData = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericSecuredCertCard.SIGN_DATA), body, undefined, callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.authenticate = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(GenericSecuredCertCard.AUTHENTICATE), body, undefined, callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.getCertificate = function (certUrl, body, options, params) {
	        var _this = this;
	        var self = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin)
	            .then(function () {
	            return self.connection.post(_this.baseUrl, self.containerSuffix(GenericSecuredCertCard.ALL_CERTIFICATES + certUrl), body, params);
	        })
	            .then(function (data) {
	            return CertParser_1.CertParser.process(data, options.parseCerts, options.callback);
	        }).catch(function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, options.callback);
	        });
	    };
	    GenericSecuredCertCard.prototype.getCertificateArray = function (certUrl, body, options, params) {
	        var _this = this;
	        var self = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin)
	            .then(function () {
	            return self.connection.post(_this.baseUrl, self.containerSuffix(GenericSecuredCertCard.ALL_CERTIFICATES + certUrl), body, params);
	        })
	            .then(function (data) {
	            return CertParser_1.CertParser.process(data, options.parseCerts, options.callback);
	        }).catch(function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, options.callback);
	        });
	    };
	    return GenericSecuredCertCard;
	}(GenericContainer));
	GenericSecuredCertCard.ALL_CERTIFICATES = "/certificates";
	GenericSecuredCertCard.AUTHENTICATE = "/authenticate";
	GenericSecuredCertCard.CERT_AUTHENTICATION = "/authentication";
	GenericSecuredCertCard.CERT_NON_REPUDIATION = "/non-repudiation";
	GenericSecuredCertCard.CERT_INTERMEDIATE = "/intermediate";
	GenericSecuredCertCard.CERT_ROOT = "/root";
	GenericSecuredCertCard.CERT_SIGNING = "/signing";
	GenericSecuredCertCard.SIGN_DATA = "/sign";
	GenericSecuredCertCard.VERIFY_PIN = "/verify-pin";
	exports.GenericSecuredCertCard = GenericSecuredCertCard;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(335);
	var CORE_READERS = "/card-readers";
	var PinEnforcer = (function () {
	    function PinEnforcer() {
	    }
	    PinEnforcer.check = function (connection, baseUrl, readerId, pinValue) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            if (connection.cfg.forceHardwarePinpad) {
	                connection.get(baseUrl, CORE_READERS + "/" + readerId, undefined).then(function (reader) {
	                    if (reader.data.pinpad) {
	                        if (pinValue) {
	                            reject({ data: { message: "Strict pinpad enforcement is enabled. This request was sent with a PIN, but the" +
	                                        " reader has a pinpad." } });
	                        }
	                        else {
	                            resolve();
	                        }
	                    }
	                    else {
	                        if (!pinValue) {
	                            reject({ data: { message: "Strict pinpad enforcement is enabled. This request was sent without a PIN, but the" +
	                                        " reader does not have a pinpad." } });
	                        }
	                        else {
	                            resolve();
	                        }
	                    }
	                }, function (error) {
	                    reject(error);
	                });
	            }
	            else {
	                resolve();
	            }
	        });
	    };
	    return PinEnforcer;
	}());
	exports.PinEnforcer = PinEnforcer;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var asn1js = __webpack_require__(374);
	var Base64 = __webpack_require__(376);
	var pkijs_1 = __webpack_require__(377);
	var ResponseHandler_1 = __webpack_require__(482);
	var CertParser = (function () {
	    function CertParser() {
	    }
	    CertParser.process = function (response, parseCerts, callback) {
	        if (response && response.data && typeof response.data === "object" && !_.isArray(response.data)) {
	            _.forEach(response.data, function (value, key) {
	                if (key.indexOf("certificate") > -1) {
	                    if (typeof value === "string") {
	                        response.data[key] = { base64: value };
	                        if (parseCerts) {
	                            response.data[key].parsed = CertParser.processCert(value);
	                        }
	                    }
	                    if (_.isArray(value)) {
	                        var newData_1 = [];
	                        _.forEach(value, function (certificate) {
	                            var cert = { base64: certificate };
	                            if (parseCerts) {
	                                cert.parsed = CertParser.processCert(certificate);
	                            }
	                            newData_1.push(cert);
	                        });
	                        response.data[key] = newData_1;
	                    }
	                }
	            });
	        }
	        else {
	            if (_.isArray(response.data)) {
	                var newData_2 = [];
	                _.forEach(response.data, function (certificate) {
	                    var cert = { base64: certificate };
	                    if (parseCerts) {
	                        cert.parsed = CertParser.processCert(certificate);
	                    }
	                    newData_2.push(cert);
	                });
	                response.data = newData_2;
	            }
	            else {
	                var cert = { base64: response.data };
	                if (parseCerts) {
	                    cert.parsed = CertParser.processCert(response.data);
	                }
	                response.data = cert;
	            }
	        }
	        return ResponseHandler_1.ResponseHandler.response(response, callback);
	    };
	    CertParser.processCert = function (certificate) {
	        var rawCert = Base64.atob(certificate);
	        var buffer = CertParser.str2ab(rawCert);
	        var asn1 = asn1js.fromBER(buffer);
	        return new pkijs_1.Certificate({ schema: asn1.result });
	    };
	    CertParser.str2ab = function (str) {
	        var buf = new ArrayBuffer(str.length);
	        var bufView = new Uint8Array(buf);
	        for (var i = 0, strLen = str.length; i < strLen; i++) {
	            bufView[i] = str.charCodeAt(i);
	        }
	        return buf;
	    };
	    return CertParser;
	}());
	exports.CertParser = CertParser;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.RawData = exports.Repeated = exports.Any = exports.Choice = exports.TIME = exports.Duration = exports.DateTime = exports.TimeOfDay = exports.DATE = exports.GeneralizedTime = exports.UTCTime = exports.CharacterString = exports.GeneralString = exports.VisibleString = exports.GraphicString = exports.IA5String = exports.VideotexString = exports.TeletexString = exports.PrintableString = exports.NumericString = exports.UniversalString = exports.BmpString = exports.Utf8String = exports.ObjectIdentifier = exports.Enumerated = exports.Integer = exports.BitString = exports.OctetString = exports.Null = exports.Set = exports.Sequence = exports.Boolean = exports.EndOfContent = exports.Constructed = exports.Primitive = exports.BaseBlock = undefined;
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
	opyright (c) 2016, Peculiar Ventures
	ll rights reserved.
	
	uthor 2016, Yury Strozhevsky <www.strozhevsky.com>.
	
	edistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 1. Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.
	
	edistributions in binary form must reproduce the above copyright notice,
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *    this list of conditions and the following disclaimer in the documentation
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *    and/or other materials provided with the distribution.
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 3. Neither the name of the copyright holder nor the names of its contributors
	may be used to endorse or promote products derived from this software without
	specific prior written permission.
	
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	
	
	
	
	
	
	
	
	
	
	//**************************************************************************************
	
	
	exports.fromBER = fromBER;
	exports.compareSchema = compareSchema;
	exports.verifySchema = verifySchema;
	exports.fromJSON = fromJSON;
	
	var _pvutils = __webpack_require__(375);
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	//region Declaration of global variables
	//**************************************************************************************
	var zero = new Uint8Array([0x00]);
	
	var powers2 = [new Uint8Array([1])];
	var digitsString = "0123456789";
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration for "LocalBaseBlock" class
	//**************************************************************************************
	/**
	 * Class used as a base block for all remaining ASN.1 classes
	 * @typedef LocalBaseBlock
	 * @interface
	 * @property {number} blockLength
	 * @property {string} error
	 * @property {Array.<string>} warnings
	 * @property {ArrayBuffer} valueBeforeDecode
	 */
	
	var LocalBaseBlock = function () {
		//**********************************************************************************
		/**
	  * Constructor for "LocalBaseBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueBeforeDecode]
	  */
		function LocalBaseBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalBaseBlock);
	
			/**
	   * @type {number} blockLength
	   */
			this.blockLength = (0, _pvutils.getParametersValue)(parameters, "blockLength", 0);
			/**
	   * @type {string} error
	   */
			this.error = (0, _pvutils.getParametersValue)(parameters, "error", "");
			/**
	   * @type {Array.<string>} warnings
	   */
			this.warnings = (0, _pvutils.getParametersValue)(parameters, "warnings", []);
			//noinspection JSCheckFunctionSignatures
			/**
	   * @type {ArrayBuffer} valueBeforeDecode
	   */
			if ("valueBeforeDecode" in parameters) this.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);else this.valueBeforeDecode = new ArrayBuffer(0);
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalBaseBlock, [{
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
			value: function toJSON() {
				return {
					blockName: this.constructor.blockName(),
					blockLength: this.blockLength,
					error: this.error,
					warnings: this.warnings,
					valueBeforeDecode: (0, _pvutils.bufferToHexCodes)(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "baseBlock";
			}
		}]);
	
		return LocalBaseBlock;
	}();
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Description for "LocalHexBlock" class
	//**************************************************************************************
	/**
	 * Class used as a base block for all remaining ASN.1 classes
	 * @extends LocalBaseBlock
	 * @typedef LocalHexBlock
	 * @property {number} blockLength
	 * @property {string} error
	 * @property {Array.<string>} warnings
	 * @property {ArrayBuffer} valueBeforeDecode
	 * @property {boolean} isHexOnly
	 * @property {ArrayBuffer} valueHex
	 */
	//noinspection JSUnusedLocalSymbols
	
	
	var LocalHexBlock = function LocalHexBlock(BaseClass) {
		return function (_BaseClass) {
			_inherits(LocalHexBlockMixin, _BaseClass);
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Constructor for "LocalHexBlock" class
	   * @param {Object} [parameters={}]
	   * @property {ArrayBuffer} [valueHex]
	   */
			function LocalHexBlockMixin() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				_classCallCheck(this, LocalHexBlockMixin);
	
				/**
	    * @type {boolean}
	    */
				var _this = _possibleConstructorReturn(this, (LocalHexBlockMixin.__proto__ || Object.getPrototypeOf(LocalHexBlockMixin)).call(this, parameters));
	
				_this.isHexOnly = (0, _pvutils.getParametersValue)(parameters, "isHexOnly", false);
				/**
	    * @type {ArrayBuffer}
	    */
				if ("valueHex" in parameters) _this.valueHex = parameters.valueHex.slice(0);else _this.valueHex = new ArrayBuffer(0);
				return _this;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
	
			_createClass(LocalHexBlockMixin, [{
				key: "fromBER",
	
				//**********************************************************************************
				/**
	    * Base function for converting block from BER encoded array of bytes
	    * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	    * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	    * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	    * @returns {number} Offset after least decoded byte
	    */
				value: function fromBER(inputBuffer, inputOffset, inputLength) {
					//region Basic check for parameters
					//noinspection JSCheckFunctionSignatures
					if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
					//endregion
	
					//region Getting Uint8Array from ArrayBuffer
					var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
					//endregion
	
					//region Initial checks
					if (intBuffer.length === 0) {
						this.warnings.push("Zero buffer length");
						return inputOffset;
					}
					//endregion
	
					//region Copy input buffer to internal buffer
					this.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);
					//endregion
	
					this.blockLength = inputLength;
	
					return inputOffset + inputLength;
				}
				//**********************************************************************************
				/**
	    * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	    * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	    * @returns {ArrayBuffer}
	    */
	
			}, {
				key: "toBER",
				value: function toBER() {
					var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
					if (this.isHexOnly !== true) {
						this.error = "Flag \"isHexOnly\" is not set, abort";
						return new ArrayBuffer(0);
					}
	
					if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);
	
					//noinspection JSCheckFunctionSignatures
					return this.valueHex.slice(0);
				}
				//**********************************************************************************
				/**
	    * Convertion for the block to JSON object
	    * @returns {Object}
	    */
	
			}, {
				key: "toJSON",
				value: function toJSON() {
					var object = {};
	
					//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
					try {
						object = _get(LocalHexBlockMixin.prototype.__proto__ || Object.getPrototypeOf(LocalHexBlockMixin.prototype), "toJSON", this).call(this);
					} catch (ex) {}
					//endregion
	
					object.blockName = this.constructor.blockName();
					object.isHexOnly = this.isHexOnly;
					object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);
	
					return object;
				}
				//**********************************************************************************
	
			}], [{
				key: "blockName",
				value: function blockName() {
					return "hexBlock";
				}
			}]);
	
			return LocalHexBlockMixin;
		}(BaseClass);
	};
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of identification block class
	//**************************************************************************************
	
	var LocalIdentificationBlock = function (_LocalHexBlock) {
		_inherits(LocalIdentificationBlock, _LocalHexBlock);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalBaseBlock" class
	  * @param {Object} [parameters={}]
	  * @property {Object} [idBlock]
	  */
		function LocalIdentificationBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalIdentificationBlock);
	
			var _this2 = _possibleConstructorReturn(this, (LocalIdentificationBlock.__proto__ || Object.getPrototypeOf(LocalIdentificationBlock)).call(this));
	
			if ("idBlock" in parameters) {
				//region Properties from hexBlock class
				_this2.isHexOnly = (0, _pvutils.getParametersValue)(parameters.idBlock, "isHexOnly", false);
				_this2.valueHex = (0, _pvutils.getParametersValue)(parameters.idBlock, "valueHex", new ArrayBuffer(0));
				//endregion
	
				_this2.tagClass = (0, _pvutils.getParametersValue)(parameters.idBlock, "tagClass", -1);
				_this2.tagNumber = (0, _pvutils.getParametersValue)(parameters.idBlock, "tagNumber", -1);
				_this2.isConstructed = (0, _pvutils.getParametersValue)(parameters.idBlock, "isConstructed", false);
			} else {
				_this2.tagClass = -1;
				_this2.tagNumber = -1;
				_this2.isConstructed = false;
			}
			return _this2;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalIdentificationBlock, [{
			key: "toBER",
	
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Initial variables
				var firstOctet = 0;
				var retBuf = void 0;
				var retView = void 0;
				//endregion
	
				switch (this.tagClass) {
					case 1:
						firstOctet |= 0x00; // UNIVERSAL
						break;
					case 2:
						firstOctet |= 0x40; // APPLICATION
						break;
					case 3:
						firstOctet |= 0x80; // CONTEXT-SPECIFIC
						break;
					case 4:
						firstOctet |= 0xC0; // PRIVATE
						break;
					default:
						this.error = "Unknown tag class";
						return new ArrayBuffer(0);
				}
	
				if (this.isConstructed) firstOctet |= 0x20;
	
				if (this.tagNumber < 31 && !this.isHexOnly) {
					retBuf = new ArrayBuffer(1);
					retView = new Uint8Array(retBuf);
	
					if (!sizeOnly) {
						var number = this.tagNumber;
						number &= 0x1F;
						firstOctet |= number;
	
						retView[0] = firstOctet;
					}
	
					return retBuf;
				}
	
				if (this.isHexOnly === false) {
					var encodedBuf = (0, _pvutils.utilToBase)(this.tagNumber, 7);
					var encodedView = new Uint8Array(encodedBuf);
					var size = encodedBuf.byteLength;
	
					retBuf = new ArrayBuffer(size + 1);
					retView = new Uint8Array(retBuf);
					retView[0] = firstOctet | 0x1F;
	
					if (!sizeOnly) {
						for (var i = 0; i < size - 1; i++) {
							retView[i + 1] = encodedView[i] | 0x80;
						}retView[size] = encodedView[size - 1];
					}
	
					return retBuf;
				}
	
				retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);
				retView = new Uint8Array(retBuf);
	
				retView[0] = firstOctet | 0x1F;
	
				if (sizeOnly === false) {
					var curView = new Uint8Array(this.valueHex);
	
					for (var _i = 0; _i < curView.length - 1; _i++) {
						retView[_i + 1] = curView[_i] | 0x80;
					}retView[this.valueHex.byteLength] = curView[curView.length - 1];
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number}
	   */
	
		}, {
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				//region Getting Uint8Array from ArrayBuffer
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
				//endregion
	
				//region Initial checks
				if (intBuffer.length === 0) {
					this.error = "Zero buffer length";
					return -1;
				}
				//endregion
	
				//region Find tag class
				var tagClassMask = intBuffer[0] & 0xC0;
	
				switch (tagClassMask) {
					case 0x00:
						this.tagClass = 1; // UNIVERSAL
						break;
					case 0x40:
						this.tagClass = 2; // APPLICATION
						break;
					case 0x80:
						this.tagClass = 3; // CONTEXT-SPECIFIC
						break;
					case 0xC0:
						this.tagClass = 4; // PRIVATE
						break;
					default:
						this.error = "Unknown tag class";
						return -1;
				}
				//endregion
	
				//region Find it's constructed or not
				this.isConstructed = (intBuffer[0] & 0x20) === 0x20;
				//endregion
	
				//region Find tag number
				this.isHexOnly = false;
	
				var tagNumberMask = intBuffer[0] & 0x1F;
	
				//region Simple case (tag number < 31)
				if (tagNumberMask !== 0x1F) {
					this.tagNumber = tagNumberMask;
					this.blockLength = 1;
				}
				//endregion
				//region Tag number bigger or equal to 31
				else {
						var count = 1;
	
						this.valueHex = new ArrayBuffer(255);
						var tagNumberBufferMaxLength = 255;
						var intTagNumberBuffer = new Uint8Array(this.valueHex);
	
						//noinspection JSBitwiseOperatorUsage
						while (intBuffer[count] & 0x80) {
							intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
							count++;
	
							if (count >= intBuffer.length) {
								this.error = "End of input reached before message was fully decoded";
								return -1;
							}
	
							//region In case if tag number length is greater than 255 bytes (rare but possible case)
							if (count === tagNumberBufferMaxLength) {
								tagNumberBufferMaxLength += 255;
	
								var _tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);
								var _tempBufferView = new Uint8Array(_tempBuffer);
	
								for (var i = 0; i < intTagNumberBuffer.length; i++) {
									_tempBufferView[i] = intTagNumberBuffer[i];
								}this.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);
								intTagNumberBuffer = new Uint8Array(this.valueHex);
							}
							//endregion
						}
	
						this.blockLength = count + 1;
						intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer
	
						//region Cut buffer
						var tempBuffer = new ArrayBuffer(count);
						var tempBufferView = new Uint8Array(tempBuffer);
	
						for (var _i2 = 0; _i2 < count; _i2++) {
							tempBufferView[_i2] = intTagNumberBuffer[_i2];
						}this.valueHex = new ArrayBuffer(count);
						intTagNumberBuffer = new Uint8Array(this.valueHex);
						intTagNumberBuffer.set(tempBufferView);
						//endregion
	
						//region Try to convert long tag number to short form
						if (this.blockLength <= 9) this.tagNumber = (0, _pvutils.utilFromBase)(intTagNumberBuffer, 7);else {
							this.isHexOnly = true;
							this.warnings.push("Tag too long, represented as hex-coded");
						}
						//endregion
					}
				//endregion
				//endregion
	
				//region Check if constructed encoding was using for primitive type
				if (this.tagClass === 1 && this.isConstructed) {
					switch (this.tagNumber) {
						case 1: // Boolean
						case 2: // REAL
						case 5: // Null
						case 6: // OBJECT IDENTIFIER
						case 9: // REAL
						case 14: // Time
						case 23:
						case 24:
						case 31:
						case 32:
						case 33:
						case 34:
							this.error = "Constructed encoding used for primitive type";
							return -1;
						default:
					}
				}
				//endregion
	
				return inputOffset + this.blockLength; // Return current offset in input buffer
			}
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName: string,
	   *  tagClass: number,
	   *  tagNumber: number,
	   *  isConstructed: boolean,
	   *  isHexOnly: boolean,
	   *  valueHex: ArrayBuffer,
	   *  blockLength: number,
	   *  error: string, warnings: Array.<string>,
	   *  valueBeforeDecode: string}}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalIdentificationBlock.prototype.__proto__ || Object.getPrototypeOf(LocalIdentificationBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.blockName = this.constructor.blockName();
				object.tagClass = this.tagClass;
				object.tagNumber = this.tagNumber;
				object.isConstructed = this.isConstructed;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "identificationBlock";
			}
		}]);
	
		return LocalIdentificationBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of length block class
	//**************************************************************************************
	
	
	var LocalLengthBlock = function (_LocalBaseBlock) {
		_inherits(LocalLengthBlock, _LocalBaseBlock);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalLengthBlock" class
	  * @param {Object} [parameters={}]
	  * @property {Object} [lenBlock]
	  */
		function LocalLengthBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalLengthBlock);
	
			var _this3 = _possibleConstructorReturn(this, (LocalLengthBlock.__proto__ || Object.getPrototypeOf(LocalLengthBlock)).call(this));
	
			if ("lenBlock" in parameters) {
				_this3.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters.lenBlock, "isIndefiniteForm", false);
				_this3.longFormUsed = (0, _pvutils.getParametersValue)(parameters.lenBlock, "longFormUsed", false);
				_this3.length = (0, _pvutils.getParametersValue)(parameters.lenBlock, "length", 0);
			} else {
				_this3.isIndefiniteForm = false;
				_this3.longFormUsed = false;
				_this3.length = 0;
			}
			return _this3;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalLengthBlock, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number}
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				//region Getting Uint8Array from ArrayBuffer
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
				//endregion
	
				//region Initial checks
				if (intBuffer.length === 0) {
					this.error = "Zero buffer length";
					return -1;
				}
	
				if (intBuffer[0] === 0xFF) {
					this.error = "Length block 0xFF is reserved by standard";
					return -1;
				}
				//endregion
	
				//region Check for length form type
				this.isIndefiniteForm = intBuffer[0] === 0x80;
				//endregion
	
				//region Stop working in case of indefinite length form
				if (this.isIndefiniteForm === true) {
					this.blockLength = 1;
					return inputOffset + this.blockLength;
				}
				//endregion
	
				//region Check is long form of length encoding using
				this.longFormUsed = !!(intBuffer[0] & 0x80);
				//endregion
	
				//region Stop working in case of short form of length value
				if (this.longFormUsed === false) {
					this.length = intBuffer[0];
					this.blockLength = 1;
					return inputOffset + this.blockLength;
				}
				//endregion
	
				//region Calculate length value in case of long form
				var count = intBuffer[0] & 0x7F;
	
				if (count > 8) // Too big length value
					{
						this.error = "Too big integer";
						return -1;
					}
	
				if (count + 1 > intBuffer.length) {
					this.error = "End of input reached before message was fully decoded";
					return -1;
				}
	
				var lengthBufferView = new Uint8Array(count);
	
				for (var i = 0; i < count; i++) {
					lengthBufferView[i] = intBuffer[i + 1];
				}if (lengthBufferView[count - 1] === 0x00) this.warnings.push("Needlessly long encoded length");
	
				this.length = (0, _pvutils.utilFromBase)(lengthBufferView, 8);
	
				if (this.longFormUsed && this.length <= 127) this.warnings.push("Unneccesary usage of long length form");
	
				this.blockLength = count + 1;
				//endregion
	
				return inputOffset + this.blockLength; // Return current offset in input buffer
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Initial variables
				var retBuf = void 0;
				var retView = void 0;
				//endregion
	
				if (this.length > 127) this.longFormUsed = true;
	
				if (this.isIndefiniteForm) {
					retBuf = new ArrayBuffer(1);
	
					if (sizeOnly === false) {
						retView = new Uint8Array(retBuf);
						retView[0] = 0x80;
					}
	
					return retBuf;
				}
	
				if (this.longFormUsed === true) {
					var encodedBuf = (0, _pvutils.utilToBase)(this.length, 8);
	
					if (encodedBuf.byteLength > 127) {
						this.error = "Too big length";
						return new ArrayBuffer(0);
					}
	
					retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
	
					if (sizeOnly === true) return retBuf;
	
					var encodedView = new Uint8Array(encodedBuf);
					retView = new Uint8Array(retBuf);
	
					retView[0] = encodedBuf.byteLength | 0x80;
	
					for (var i = 0; i < encodedBuf.byteLength; i++) {
						retView[i + 1] = encodedView[i];
					}return retBuf;
				}
	
				retBuf = new ArrayBuffer(1);
	
				if (sizeOnly === false) {
					retView = new Uint8Array(retBuf);
	
					retView[0] = this.length;
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalLengthBlock.prototype.__proto__ || Object.getPrototypeOf(LocalLengthBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.blockName = this.constructor.blockName();
				object.isIndefiniteForm = this.isIndefiniteForm;
				object.longFormUsed = this.longFormUsed;
				object.length = this.length;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "lengthBlock";
			}
		}]);
	
		return LocalLengthBlock;
	}(LocalBaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of value block class
	//**************************************************************************************
	
	
	var LocalValueBlock = function (_LocalBaseBlock2) {
		_inherits(LocalValueBlock, _LocalBaseBlock2);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalValueBlock);
	
			return _possibleConstructorReturn(this, (LocalValueBlock.__proto__ || Object.getPrototypeOf(LocalValueBlock)).call(this, parameters));
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalValueBlock, [{
			key: "fromBER",
	
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number}
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Throw an exception for a function which needs to be specified in extended classes
				throw TypeError("User need to make a specific function in a class which extends \"LocalValueBlock\"");
				//endregion
			}
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Throw an exception for a function which needs to be specified in extended classes
				throw TypeError("User need to make a specific function in a class which extends \"LocalValueBlock\"");
				//endregion
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "valueBlock";
			}
		}]);
	
		return LocalValueBlock;
	}(LocalBaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of basic ASN.1 block class
	//**************************************************************************************
	
	
	var BaseBlock = exports.BaseBlock = function (_LocalBaseBlock3) {
		_inherits(BaseBlock, _LocalBaseBlock3);
	
		//**********************************************************************************
		/**
	  * Constructor for "BaseBlock" class
	  * @param {Object} [parameters={}]
	  * @property {Object} [primitiveSchema]
	  * @property {string} [name]
	  * @property {boolean} [optional]
	  * @param valueBlockType Type of value block
	  */
		function BaseBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
			var valueBlockType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LocalValueBlock;
	
			_classCallCheck(this, BaseBlock);
	
			var _this5 = _possibleConstructorReturn(this, (BaseBlock.__proto__ || Object.getPrototypeOf(BaseBlock)).call(this, parameters));
	
			if ("name" in parameters) _this5.name = parameters.name;
			if ("optional" in parameters) _this5.optional = parameters.optional;
			if ("primitiveSchema" in parameters) _this5.primitiveSchema = parameters.primitiveSchema;
	
			_this5.idBlock = new LocalIdentificationBlock(parameters);
			_this5.lenBlock = new LocalLengthBlock(parameters);
			_this5.valueBlock = new valueBlockType(parameters);
			return _this5;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(BaseBlock, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number}
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var retBuf = void 0;
	
				var idBlockBuf = this.idBlock.toBER(sizeOnly);
				var valueBlockSizeBuf = this.valueBlock.toBER(true);
	
				this.lenBlock.length = valueBlockSizeBuf.byteLength;
				var lenBlockBuf = this.lenBlock.toBER(sizeOnly);
	
				retBuf = (0, _pvutils.utilConcatBuf)(idBlockBuf, lenBlockBuf);
	
				var valueBlockBuf = void 0;
	
				if (sizeOnly === false) valueBlockBuf = this.valueBlock.toBER(sizeOnly);else valueBlockBuf = new ArrayBuffer(this.lenBlock.length);
	
				retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBlockBuf);
	
				if (this.lenBlock.isIndefiniteForm === true) {
					var indefBuf = new ArrayBuffer(2);
	
					if (sizeOnly === false) {
						var indefView = new Uint8Array(indefBuf);
	
						indefView[0] = 0x00;
						indefView[1] = 0x00;
					}
	
					retBuf = (0, _pvutils.utilConcatBuf)(retBuf, indefBuf);
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(BaseBlock.prototype.__proto__ || Object.getPrototypeOf(BaseBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.idBlock = this.idBlock.toJSON();
				object.lenBlock = this.lenBlock.toJSON();
				object.valueBlock = this.valueBlock.toJSON();
	
				if ("name" in this) object.name = this.name;
				if ("optional" in this) object.optional = this.optional;
				if ("primitiveSchema" in this) object.primitiveSchema = this.primitiveSchema.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BaseBlock";
			}
		}]);
	
		return BaseBlock;
	}(LocalBaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of basic block for all PRIMITIVE types
	//**************************************************************************************
	
	
	var LocalPrimitiveValueBlock = function (_LocalValueBlock) {
		_inherits(LocalPrimitiveValueBlock, _LocalValueBlock);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalPrimitiveValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueBeforeDecode]
	  */
		function LocalPrimitiveValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalPrimitiveValueBlock);
	
			//region Variables from "hexBlock" class
			var _this6 = _possibleConstructorReturn(this, (LocalPrimitiveValueBlock.__proto__ || Object.getPrototypeOf(LocalPrimitiveValueBlock)).call(this, parameters));
	
			if ("valueHex" in parameters) _this6.valueHex = parameters.valueHex.slice(0);else _this6.valueHex = new ArrayBuffer(0);
	
			_this6.isHexOnly = (0, _pvutils.getParametersValue)(parameters, "isHexOnly", true);
			//endregion
			return _this6;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number}
	  */
	
	
		_createClass(LocalPrimitiveValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				//region Getting Uint8Array from ArrayBuffer
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
				//endregion
	
				//region Initial checks
				if (intBuffer.length === 0) {
					this.warnings.push("Zero buffer length");
					return inputOffset;
				}
				//endregion
	
				//region Copy input buffer into internal buffer
				this.valueHex = new ArrayBuffer(intBuffer.length);
				var valueHexView = new Uint8Array(this.valueHex);
	
				for (var i = 0; i < intBuffer.length; i++) {
					valueHexView[i] = intBuffer[i];
				} //endregion
	
				this.blockLength = inputLength;
	
				return inputOffset + inputLength;
			}
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				return this.valueHex.slice(0);
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalPrimitiveValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalPrimitiveValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);
				object.isHexOnly = this.isHexOnly;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "PrimitiveValueBlock";
			}
		}]);
	
		return LocalPrimitiveValueBlock;
	}(LocalValueBlock);
	//**************************************************************************************
	
	
	var Primitive = exports.Primitive = function (_BaseBlock) {
		_inherits(Primitive, _BaseBlock);
	
		//**********************************************************************************
		/**
	  * Constructor for "Primitive" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function Primitive() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Primitive);
	
			var _this7 = _possibleConstructorReturn(this, (Primitive.__proto__ || Object.getPrototypeOf(Primitive)).call(this, parameters, LocalPrimitiveValueBlock));
	
			_this7.idBlock.isConstructed = false;
			return _this7;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Primitive, null, [{
			key: "blockName",
			value: function blockName() {
				return "PRIMITIVE";
			}
			//**********************************************************************************
	
		}]);
	
		return Primitive;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of basic block for all CONSTRUCTED types
	//**************************************************************************************
	
	
	var LocalConstructedValueBlock = function (_LocalValueBlock2) {
		_inherits(LocalConstructedValueBlock, _LocalValueBlock2);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalConstructedValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalConstructedValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalConstructedValueBlock);
	
			var _this8 = _possibleConstructorReturn(this, (LocalConstructedValueBlock.__proto__ || Object.getPrototypeOf(LocalConstructedValueBlock)).call(this, parameters));
	
			_this8.value = (0, _pvutils.getParametersValue)(parameters, "value", []);
			_this8.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters, "isIndefiniteForm", false);
			return _this8;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number}
	  */
	
	
		_createClass(LocalConstructedValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Store initial offset and length
				var initialOffset = inputOffset;
				var initialLength = inputLength;
				//endregion
	
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				//region Getting Uint8Array from ArrayBuffer
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
				//endregion
	
				//region Initial checks
				if (intBuffer.length === 0) {
					this.warnings.push("Zero buffer length");
					return inputOffset;
				}
				//endregion
	
				//region Aux function
				function checkLen(indefiniteLength, length) {
					if (indefiniteLength === true) return 1;
	
					return length;
				}
				//endregion
	
				var currentOffset = inputOffset;
	
				while (checkLen(this.isIndefiniteForm, inputLength) > 0) {
					var returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);
					if (returnObject.offset === -1) {
						this.error = returnObject.result.error;
						this.warnings.concat(returnObject.result.warnings);
						return -1;
					}
	
					currentOffset = returnObject.offset;
	
					this.blockLength += returnObject.result.blockLength;
					inputLength -= returnObject.result.blockLength;
	
					this.value.push(returnObject.result);
	
					if (this.isIndefiniteForm === true && returnObject.result.constructor.blockName() === EndOfContent.blockName()) break;
				}
	
				if (this.isIndefiniteForm === true) {
					if (this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName()) this.value.pop();else this.warnings.push("No EndOfContent block encoded");
				}
	
				//region Copy "inputBuffer" to "valueBeforeDecode"
				this.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);
				//endregion
	
				return currentOffset;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var retBuf = new ArrayBuffer(0);
	
				for (var i = 0; i < this.value.length; i++) {
					var valueBuf = this.value[i].toBER(sizeOnly);
					retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalConstructedValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalConstructedValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.isIndefiniteForm = this.isIndefiniteForm;
				object.value = [];
				for (var i = 0; i < this.value.length; i++) {
					object.value.push(this.value[i].toJSON());
				}return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "ConstructedValueBlock";
			}
		}]);
	
		return LocalConstructedValueBlock;
	}(LocalValueBlock);
	//**************************************************************************************
	
	
	var Constructed = exports.Constructed = function (_BaseBlock2) {
		_inherits(Constructed, _BaseBlock2);
	
		//**********************************************************************************
		/**
	  * Constructor for "Constructed" class
	  * @param {Object} [parameters={}]
	  */
		function Constructed() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Constructed);
	
			var _this9 = _possibleConstructorReturn(this, (Constructed.__proto__ || Object.getPrototypeOf(Constructed)).call(this, parameters, LocalConstructedValueBlock));
	
			_this9.idBlock.isConstructed = true;
			return _this9;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Constructed, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number}
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
	
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "CONSTRUCTED";
			}
		}]);
	
		return Constructed;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 EndOfContent type class
	//**************************************************************************************
	
	
	var LocalEndOfContentValueBlock = function (_LocalValueBlock3) {
		_inherits(LocalEndOfContentValueBlock, _LocalValueBlock3);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalEndOfContentValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalEndOfContentValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalEndOfContentValueBlock);
	
			return _possibleConstructorReturn(this, (LocalEndOfContentValueBlock.__proto__ || Object.getPrototypeOf(LocalEndOfContentValueBlock)).call(this, parameters));
		}
		//**********************************************************************************
		//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number}
	  */
	
	
		_createClass(LocalEndOfContentValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region There is no "value block" for EndOfContent type and we need to return the same offset
				return inputOffset;
				//endregion
			}
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				return new ArrayBuffer(0);
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "EndOfContentValueBlock";
			}
			//**********************************************************************************
	
		}]);
	
		return LocalEndOfContentValueBlock;
	}(LocalValueBlock);
	//**************************************************************************************
	
	
	var EndOfContent = exports.EndOfContent = function (_BaseBlock3) {
		_inherits(EndOfContent, _BaseBlock3);
	
		//**********************************************************************************
		function EndOfContent() {
			var paramaters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, EndOfContent);
	
			var _this11 = _possibleConstructorReturn(this, (EndOfContent.__proto__ || Object.getPrototypeOf(EndOfContent)).call(this, paramaters, LocalEndOfContentValueBlock));
	
			_this11.idBlock.tagClass = 1; // UNIVERSAL
			_this11.idBlock.tagNumber = 0; // EndOfContent
			return _this11;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(EndOfContent, null, [{
			key: "blockName",
			value: function blockName() {
				return "EndOfContent";
			}
			//**********************************************************************************
	
		}]);
	
		return EndOfContent;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 Boolean type class
	//**************************************************************************************
	
	
	var LocalBooleanValueBlock = function (_LocalValueBlock4) {
		_inherits(LocalBooleanValueBlock, _LocalValueBlock4);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalBooleanValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalBooleanValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalBooleanValueBlock);
	
			var _this12 = _possibleConstructorReturn(this, (LocalBooleanValueBlock.__proto__ || Object.getPrototypeOf(LocalBooleanValueBlock)).call(this, parameters));
	
			_this12.value = (0, _pvutils.getParametersValue)(parameters, "value", false);
			_this12.isHexOnly = (0, _pvutils.getParametersValue)(parameters, "isHexOnly", false);
	
			if ("valueHex" in parameters) _this12.valueHex = parameters.valueHex.slice(0);else {
				_this12.valueHex = new ArrayBuffer(1);
				if (_this12.value === true) {
					var view = new Uint8Array(_this12.valueHex);
					view[0] = 0xFF;
				}
			}
			return _this12;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(LocalBooleanValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				//region Getting Uint8Array from ArrayBuffer
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
				//endregion
	
				if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
	
				this.value = intBuffer[0] !== 0x00;
	
				this.isHexOnly = true;
	
				//region Copy input buffer to internal array
				this.valueHex = new ArrayBuffer(intBuffer.length);
				var view = new Uint8Array(this.valueHex);
	
				for (var i = 0; i < intBuffer.length; i++) {
					view[i] = intBuffer[i];
				} //endregion
	
				this.blockLength = inputLength;
	
				return inputOffset + inputLength;
			}
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				return this.valueHex;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalBooleanValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalBooleanValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.value;
				object.isHexOnly = this.isHexOnly;
				object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BooleanValueBlock";
			}
		}]);
	
		return LocalBooleanValueBlock;
	}(LocalValueBlock);
	//**************************************************************************************
	
	
	var Boolean = exports.Boolean = function (_BaseBlock4) {
		_inherits(Boolean, _BaseBlock4);
	
		//**********************************************************************************
		/**
	  * Constructor for "Boolean" class
	  * @param {Object} [parameters={}]
	  */
		function Boolean() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Boolean);
	
			var _this13 = _possibleConstructorReturn(this, (Boolean.__proto__ || Object.getPrototypeOf(Boolean)).call(this, parameters, LocalBooleanValueBlock));
	
			_this13.idBlock.tagClass = 1; // UNIVERSAL
			_this13.idBlock.tagNumber = 1; // Boolean
			return _this13;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Boolean, null, [{
			key: "blockName",
			value: function blockName() {
				return "Boolean";
			}
			//**********************************************************************************
	
		}]);
	
		return Boolean;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 Sequence and Set type classes
	//**************************************************************************************
	
	
	var Sequence = exports.Sequence = function (_Constructed) {
		_inherits(Sequence, _Constructed);
	
		//**********************************************************************************
		/**
	  * Constructor for "Sequence" class
	  * @param {Object} [parameters={}]
	  */
		function Sequence() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Sequence);
	
			var _this14 = _possibleConstructorReturn(this, (Sequence.__proto__ || Object.getPrototypeOf(Sequence)).call(this, parameters));
	
			_this14.idBlock.tagClass = 1; // UNIVERSAL
			_this14.idBlock.tagNumber = 16; // Sequence
			return _this14;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Sequence, null, [{
			key: "blockName",
			value: function blockName() {
				return "Sequence";
			}
			//**********************************************************************************
	
		}]);
	
		return Sequence;
	}(Constructed);
	//**************************************************************************************
	
	
	var Set = exports.Set = function (_Constructed2) {
		_inherits(Set, _Constructed2);
	
		//**********************************************************************************
		/**
	  * Constructor for "Set" class
	  * @param {Object} [parameters={}]
	  */
		function Set() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Set);
	
			var _this15 = _possibleConstructorReturn(this, (Set.__proto__ || Object.getPrototypeOf(Set)).call(this, parameters));
	
			_this15.idBlock.tagClass = 1; // UNIVERSAL
			_this15.idBlock.tagNumber = 17; // Set
			return _this15;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Set, null, [{
			key: "blockName",
			value: function blockName() {
				return "Set";
			}
			//**********************************************************************************
	
		}]);
	
		return Set;
	}(Constructed);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 Null type class
	//**************************************************************************************
	
	
	var Null = exports.Null = function (_BaseBlock5) {
		_inherits(Null, _BaseBlock5);
	
		//**********************************************************************************
		/**
	  * Constructor for "Null" class
	  * @param {Object} [parameters={}]
	  */
		function Null() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Null);
	
			// We will not have a call to "Null value block" because of specified "fromBER" and "toBER" functions
	
			var _this16 = _possibleConstructorReturn(this, (Null.__proto__ || Object.getPrototypeOf(Null)).call(this, parameters, LocalBaseBlock));
	
			_this16.idBlock.tagClass = 1; // UNIVERSAL
			_this16.idBlock.tagNumber = 5; // Null
			return _this16;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Null, [{
			key: "fromBER",
	
			//**********************************************************************************
			//noinspection JSUnusedLocalSymbols
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				this.blockLength += inputLength;
	
				return inputOffset + inputLength;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var retBuf = new ArrayBuffer(2);
	
				if (sizeOnly === true) return retBuf;
	
				var retView = new Uint8Array(retBuf);
				retView[0] = 0x05;
				retView[1] = 0x00;
	
				return retBuf;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "Null";
			}
		}]);
	
		return Null;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 OctetString type class
	//**************************************************************************************
	
	
	var LocalOctetStringValueBlock = function (_LocalHexBlock2) {
		_inherits(LocalOctetStringValueBlock, _LocalHexBlock2);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalOctetStringValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function LocalOctetStringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalOctetStringValueBlock);
	
			var _this17 = _possibleConstructorReturn(this, (LocalOctetStringValueBlock.__proto__ || Object.getPrototypeOf(LocalOctetStringValueBlock)).call(this, parameters));
	
			_this17.isConstructed = (0, _pvutils.getParametersValue)(parameters, "isConstructed", false);
			return _this17;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(LocalOctetStringValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = 0;
	
				if (this.isConstructed === true) {
					this.isHexOnly = false;
	
					resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
					if (resultOffset === -1) return resultOffset;
	
					for (var i = 0; i < this.value.length; i++) {
						var currentBlockName = this.value[i].constructor.blockName();
	
						if (currentBlockName === EndOfContent.blockName()) {
							if (this.isIndefiniteForm === true) break;else {
								this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
								return -1;
							}
						}
	
						if (currentBlockName !== OctetString.blockName()) {
							this.error = "OCTET STRING may consists of OCTET STRINGs only";
							return -1;
						}
					}
				} else {
					this.isHexOnly = true;
	
					resultOffset = _get(LocalOctetStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalOctetStringValueBlock.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
					this.blockLength = inputLength;
				}
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				if (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);
	
				var retBuf = new ArrayBuffer(this.valueHex.byteLength);
	
				if (sizeOnly === true) return retBuf;
	
				if (this.valueHex.byteLength === 0) return retBuf;
	
				retBuf = this.valueHex.slice(0);
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalOctetStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalOctetStringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.isConstructed = this.isConstructed;
				object.isHexOnly = this.isHexOnly;
				object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "OctetStringValueBlock";
			}
		}]);
	
		return LocalOctetStringValueBlock;
	}(LocalHexBlock(LocalConstructedValueBlock));
	//**************************************************************************************
	
	
	var OctetString = exports.OctetString = function (_BaseBlock6) {
		_inherits(OctetString, _BaseBlock6);
	
		//**********************************************************************************
		/**
	  * Constructor for "OctetString" class
	  * @param {Object} [parameters={}]
	  */
		function OctetString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OctetString);
	
			var _this18 = _possibleConstructorReturn(this, (OctetString.__proto__ || Object.getPrototypeOf(OctetString)).call(this, parameters, LocalOctetStringValueBlock));
	
			_this18.idBlock.tagClass = 1; // UNIVERSAL
			_this18.idBlock.tagNumber = 4; // OctetString
			return _this18;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(OctetString, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				this.valueBlock.isConstructed = this.idBlock.isConstructed;
				this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
	
				//region Ability to encode empty OCTET STRING
				if (inputLength === 0) {
					if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
					if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
					return inputOffset;
				}
				//endregion
	
				return _get(OctetString.prototype.__proto__ || Object.getPrototypeOf(OctetString.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "isEqual",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Checking that two OCTETSTRINGs are equal
	   * @param {OctetString} octetString
	   */
			value: function isEqual(octetString) {
				//region Check input type
				if (octetString instanceof OctetString === false) return false;
				//endregion
	
				//region Compare two JSON strings
				if (JSON.stringify(this) !== JSON.stringify(octetString)) return false;
				//endregion
	
				return true;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "OctetString";
			}
		}]);
	
		return OctetString;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 BitString type class
	//**************************************************************************************
	
	
	var LocalBitStringValueBlock = function (_LocalHexBlock3) {
		_inherits(LocalBitStringValueBlock, _LocalHexBlock3);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalBitStringValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function LocalBitStringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalBitStringValueBlock);
	
			var _this19 = _possibleConstructorReturn(this, (LocalBitStringValueBlock.__proto__ || Object.getPrototypeOf(LocalBitStringValueBlock)).call(this, parameters));
	
			_this19.unusedBits = (0, _pvutils.getParametersValue)(parameters, "unusedBits", 0);
			_this19.isConstructed = (0, _pvutils.getParametersValue)(parameters, "isConstructed", false);
			_this19.blockLength = _this19.valueHex.byteLength + 1; // "+1" for "unusedBits"
			return _this19;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(LocalBitStringValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Ability to decode zero-length BitString value
				if (inputLength === 0) return inputOffset;
				//endregion
	
				var resultOffset = -1;
	
				//region If the BISTRING supposed to be a constructed value
				if (this.isConstructed === true) {
					resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
					if (resultOffset === -1) return resultOffset;
	
					for (var i = 0; i < this.value.length; i++) {
						var currentBlockName = this.value[i].constructor.blockName();
	
						if (currentBlockName === EndOfContent.blockName()) {
							if (this.isIndefiniteForm === true) break;else {
								this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
								return -1;
							}
						}
	
						if (currentBlockName !== BitString.blockName()) {
							this.error = "BIT STRING may consists of BIT STRINGs only";
							return -1;
						}
	
						if (this.unusedBits > 0 && this.value[i].unusedBits > 0) {
							this.error = "Usign of \"unused bits\" inside constructive BIT STRING allowed for least one only";
							return -1;
						}
	
						this.unusedBits = this.value[i].unusedBits;
						if (this.unusedBits > 7) {
							this.error = "Unused bits for BitString must be in range 0-7";
							return -1;
						}
					}
	
					return resultOffset;
				}
				//endregion
				//region If the BitString supposed to be a primitive value
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
	
				this.unusedBits = intBuffer[0];
				if (this.unusedBits > 7) {
					this.error = "Unused bits for BitString must be in range 0-7";
					return -1;
				}
	
				//region Copy input buffer to internal buffer
				this.valueHex = new ArrayBuffer(intBuffer.length - 1);
				var view = new Uint8Array(this.valueHex);
				for (var _i3 = 0; _i3 < inputLength - 1; _i3++) {
					view[_i3] = intBuffer[_i3 + 1];
				} //endregion
	
				this.blockLength = intBuffer.length;
	
				return inputOffset + inputLength;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				if (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);
	
				if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength + 1);
	
				if (this.valueHex.byteLength === 0) return new ArrayBuffer(0);
	
				var curView = new Uint8Array(this.valueHex);
	
				var retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);
				var retView = new Uint8Array(retBuf);
	
				retView[0] = this.unusedBits;
	
				for (var i = 0; i < this.valueHex.byteLength; i++) {
					retView[i + 1] = curView[i];
				}return retBuf;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalBitStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalBitStringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.unusedBits = this.unusedBits;
				object.isConstructed = this.isConstructed;
				object.isHexOnly = this.isHexOnly;
				object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BitStringValueBlock";
			}
		}]);
	
		return LocalBitStringValueBlock;
	}(LocalHexBlock(LocalConstructedValueBlock));
	//**************************************************************************************
	
	
	var BitString = exports.BitString = function (_BaseBlock7) {
		_inherits(BitString, _BaseBlock7);
	
		//**********************************************************************************
		/**
	  * Constructor for "BitString" class
	  * @param {Object} [parameters={}]
	  */
		function BitString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, BitString);
	
			var _this20 = _possibleConstructorReturn(this, (BitString.__proto__ || Object.getPrototypeOf(BitString)).call(this, parameters, LocalBitStringValueBlock));
	
			_this20.idBlock.tagClass = 1; // UNIVERSAL
			_this20.idBlock.tagNumber = 3; // BitString
			return _this20;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(BitString, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				//region Ability to encode empty BitString
				if (inputLength === 0) return inputOffset;
				//endregion
	
				this.valueBlock.isConstructed = this.idBlock.isConstructed;
				this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
	
				return _get(BitString.prototype.__proto__ || Object.getPrototypeOf(BitString.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
			}
			//**********************************************************************************
			/**
	   * Checking that two BITSTRINGs are equal
	   * @param {BitString} bitString
	   */
	
		}, {
			key: "isEqual",
			value: function isEqual(bitString) {
				//region Check input type
				if (bitString instanceof BitString === false) return false;
				//endregion
	
				//region Compare two JSON strings
				if (JSON.stringify(this) !== JSON.stringify(bitString)) return false;
				//endregion
	
				return true;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BitString";
			}
		}]);
	
		return BitString;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 Integer type class
	//**************************************************************************************
	/**
	 * @extends LocalValueBlock
	 */
	
	
	var LocalIntegerValueBlock = function (_LocalHexBlock4) {
		_inherits(LocalIntegerValueBlock, _LocalHexBlock4);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalIntegerValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function LocalIntegerValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalIntegerValueBlock);
	
			var _this21 = _possibleConstructorReturn(this, (LocalIntegerValueBlock.__proto__ || Object.getPrototypeOf(LocalIntegerValueBlock)).call(this, parameters));
	
			if ("value" in parameters) _this21.valueDec = parameters.value;
			return _this21;
		}
		//**********************************************************************************
		/**
	  * Setter for "valueHex"
	  * @param {ArrayBuffer} _value
	  */
	
	
		_createClass(LocalIntegerValueBlock, [{
			key: "fromDER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from DER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @param {number} [expectedLength=0] Expected length of converted "valueHex" buffer
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromDER(inputBuffer, inputOffset, inputLength) {
				var expectedLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	
				var offset = this.fromBER(inputBuffer, inputOffset, inputLength);
				if (offset === -1) return offset;
	
				var view = new Uint8Array(this._valueHex);
	
				if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {
					var updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);
					var updatedView = new Uint8Array(updatedValueHex);
	
					updatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));
	
					this._valueHex = updatedValueHex.slice(0);
				} else {
					if (expectedLength !== 0) {
						if (this._valueHex.byteLength < expectedLength) {
							if (expectedLength - this._valueHex.byteLength > 1) expectedLength = this._valueHex.byteLength + 1;
	
							var _updatedValueHex = new ArrayBuffer(expectedLength);
							var _updatedView = new Uint8Array(_updatedValueHex);
	
							_updatedView.set(view, expectedLength - this._valueHex.byteLength);
	
							this._valueHex = _updatedValueHex.slice(0);
						}
					}
				}
	
				return offset;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toDER",
			value: function toDER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var view = new Uint8Array(this._valueHex);
	
				switch (true) {
					case (view[0] & 0x80) !== 0:
						{
							var updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);
							var updatedView = new Uint8Array(updatedValueHex);
	
							updatedView[0] = 0x00;
							updatedView.set(view, 1);
	
							this._valueHex = updatedValueHex.slice(0);
						}
						break;
					case view[0] === 0x00 && (view[1] & 0x80) === 0:
						{
							var _updatedValueHex2 = new ArrayBuffer(this._valueHex.byteLength - 1);
							var _updatedView2 = new Uint8Array(_updatedValueHex2);
	
							_updatedView2.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));
	
							this._valueHex = _updatedValueHex2.slice(0);
						}
						break;
					default:
				}
	
				return this.toBER(sizeOnly);
			}
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
	
		}, {
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = _get(LocalIntegerValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalIntegerValueBlock.prototype), "fromBER", this).call(this, inputBuffer, inputOffset, inputLength);
				if (resultOffset === -1) return resultOffset;
	
				this.blockLength = inputLength;
	
				return inputOffset + inputLength;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//noinspection JSCheckFunctionSignatures
				return this.valueHex.slice(0);
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalIntegerValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalIntegerValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.valueDec = this.valueDec;
	
				return object;
			}
			//**********************************************************************************
			/**
	   * Convert current value to decimal string representation
	   */
	
		}, {
			key: "toString",
			value: function toString() {
				//region Aux functions
				function viewAdd(first, second) {
					//region Initial variables
					var c = new Uint8Array([0]);
	
					var firstView = new Uint8Array(first);
					var secondView = new Uint8Array(second);
	
					var firstViewCopy = firstView.slice(0);
					var firstViewCopyLength = firstViewCopy.length - 1;
					var secondViewCopy = secondView.slice(0);
					var secondViewCopyLength = secondViewCopy.length - 1;
	
					var value = 0;
	
					var max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
	
					var counter = 0;
					//endregion
	
					for (var i = max; i >= 0; i--, counter++) {
						switch (true) {
							case counter < secondViewCopy.length:
								value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
								break;
							default:
								value = firstViewCopy[firstViewCopyLength - counter] + c[0];
						}
	
						c[0] = value / 10;
	
						switch (true) {
							case counter >= firstViewCopy.length:
								firstViewCopy = (0, _pvutils.utilConcatView)(new Uint8Array([value % 10]), firstViewCopy);
								break;
							default:
								firstViewCopy[firstViewCopyLength - counter] = value % 10;
						}
					}
	
					if (c[0] > 0) firstViewCopy = (0, _pvutils.utilConcatView)(c, firstViewCopy);
	
					return firstViewCopy.slice(0);
				}
	
				function power2(n) {
					if (n >= powers2.length) {
						for (var p = powers2.length; p <= n; p++) {
							var c = new Uint8Array([0]);
							var _digits = powers2[p - 1].slice(0);
	
							for (var i = _digits.length - 1; i >= 0; i--) {
								var newValue = new Uint8Array([(_digits[i] << 1) + c[0]]);
								c[0] = newValue[0] / 10;
								_digits[i] = newValue[0] % 10;
							}
	
							if (c[0] > 0) _digits = (0, _pvutils.utilConcatView)(c, _digits);
	
							powers2.push(_digits);
						}
					}
	
					return powers2[n];
				}
	
				function viewSub(first, second) {
					//region Initial variables
					var b = 0;
	
					var firstView = new Uint8Array(first);
					var secondView = new Uint8Array(second);
	
					var firstViewCopy = firstView.slice(0);
					var firstViewCopyLength = firstViewCopy.length - 1;
					var secondViewCopy = secondView.slice(0);
					var secondViewCopyLength = secondViewCopy.length - 1;
	
					var value = void 0;
	
					var counter = 0;
					//endregion
	
					for (var i = secondViewCopyLength; i >= 0; i--, counter++) {
						value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
	
						switch (true) {
							case value < 0:
								b = 1;
								firstViewCopy[firstViewCopyLength - counter] = value + 10;
								break;
							default:
								b = 0;
								firstViewCopy[firstViewCopyLength - counter] = value;
						}
					}
	
					if (b > 0) {
						for (var _i4 = firstViewCopyLength - secondViewCopyLength + 1; _i4 >= 0; _i4--, counter++) {
							value = firstViewCopy[firstViewCopyLength - counter] - b;
	
							if (value < 0) {
								b = 1;
								firstViewCopy[firstViewCopyLength - counter] = value + 10;
							} else {
								b = 0;
								firstViewCopy[firstViewCopyLength - counter] = value;
								break;
							}
						}
					}
	
					return firstViewCopy.slice();
				}
				//endregion
	
				//region Initial variables
				var firstBit = this._valueHex.byteLength * 8 - 1;
	
				var digits = new Uint8Array(this._valueHex.byteLength * 8 / 3);
				var bitNumber = 0;
				var currentByte = void 0;
	
				var asn1View = new Uint8Array(this._valueHex);
	
				var result = "";
	
				var flag = false;
				//endregion
	
				//region Calculate number
				for (var byteNumber = this._valueHex.byteLength - 1; byteNumber >= 0; byteNumber--) {
					currentByte = asn1View[byteNumber];
	
					for (var i = 0; i < 8; i++) {
						if ((currentByte & 1) === 1) {
							switch (bitNumber) {
								case firstBit:
									digits = viewSub(power2(bitNumber), digits);
									result = "-";
									break;
								default:
									digits = viewAdd(digits, power2(bitNumber));
							}
						}
	
						bitNumber++;
						currentByte >>= 1;
					}
				}
				//endregion
	
				//region Print number
				for (var _i5 = 0; _i5 < digits.length; _i5++) {
					if (digits[_i5]) flag = true;
	
					if (flag) result += digitsString.charAt(digits[_i5]);
				}
	
				if (flag === false) result += digitsString.charAt(0);
				//endregion
	
				return result;
			}
			//**********************************************************************************
	
		}, {
			key: "valueHex",
			set: function set(_value) {
				this._valueHex = _value.slice(0);
	
				if (_value.byteLength >= 4) {
					this.warnings.push("Too big Integer for decoding, hex only");
					this.isHexOnly = true;
					this._valueDec = 0;
				} else {
					this.isHexOnly = false;
	
					if (_value.byteLength > 0) this._valueDec = _pvutils.utilDecodeTC.call(this);
				}
			}
			//**********************************************************************************
			/**
	   * Getter for "valueHex"
	   * @returns {ArrayBuffer}
	   */
			,
			get: function get() {
				return this._valueHex;
			}
			//**********************************************************************************
			/**
	   * Getter for "valueDec"
	   * @param {number} _value
	   */
	
		}, {
			key: "valueDec",
			set: function set(_value) {
				this._valueDec = _value;
	
				this.isHexOnly = false;
				this._valueHex = (0, _pvutils.utilEncodeTC)(_value);
			}
			//**********************************************************************************
			/**
	   * Getter for "valueDec"
	   * @returns {number}
	   */
			,
			get: function get() {
				return this._valueDec;
			}
		}], [{
			key: "blockName",
			value: function blockName() {
				return "IntegerValueBlock";
			}
		}]);
	
		return LocalIntegerValueBlock;
	}(LocalHexBlock(LocalValueBlock));
	//**************************************************************************************
	
	
	var Integer = exports.Integer = function (_BaseBlock8) {
		_inherits(Integer, _BaseBlock8);
	
		//**********************************************************************************
		/**
	  * Constructor for "Integer" class
	  * @param {Object} [parameters={}]
	  */
		function Integer() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Integer);
	
			var _this22 = _possibleConstructorReturn(this, (Integer.__proto__ || Object.getPrototypeOf(Integer)).call(this, parameters, LocalIntegerValueBlock));
	
			_this22.idBlock.tagClass = 1; // UNIVERSAL
			_this22.idBlock.tagNumber = 2; // Integer
			return _this22;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Integer, [{
			key: "isEqual",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Compare two Integer object, or Integer and ArrayBuffer objects
	   * @param {!Integer|ArrayBuffer} otherValue
	   * @returns {boolean}
	   */
			value: function isEqual(otherValue) {
				if (otherValue instanceof Integer) {
					if (this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers
						return (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);
	
					if (this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly) return this.valueBlock.valueDec === otherValue.valueBlock.valueDec;
	
					return false;
				}
	
				if (otherValue instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue);
	
				return false;
			}
			//**********************************************************************************
			/**
	   * Convert current Integer value from BER into DER format
	   * @returns {Integer}
	   */
	
		}, {
			key: "convertToDER",
			value: function convertToDER() {
				var integer = new Integer({ valueHex: this.valueBlock.valueHex });
				integer.valueBlock.toDER();
	
				return integer;
			}
			//**********************************************************************************
			/**
	   * Convert current Integer value from DER to BER format
	   * @returns {Integer}
	   */
	
		}, {
			key: "convertFromDER",
			value: function convertFromDER() {
				var expectedLength = this.valueBlock.valueHex.byteLength % 2 ? this.valueBlock.valueHex.byteLength + 1 : this.valueBlock.valueHex.byteLength;
				var integer = new Integer({ valueHex: this.valueBlock.valueHex });
				integer.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);
	
				return integer;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "Integer";
			}
		}]);
	
		return Integer;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 Enumerated type class
	//**************************************************************************************
	
	
	var Enumerated = exports.Enumerated = function (_Integer) {
		_inherits(Enumerated, _Integer);
	
		//**********************************************************************************
		/**
	  * Constructor for "Enumerated" class
	  * @param {Object} [parameters={}]
	  */
		function Enumerated() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Enumerated);
	
			var _this23 = _possibleConstructorReturn(this, (Enumerated.__proto__ || Object.getPrototypeOf(Enumerated)).call(this, parameters));
	
			_this23.idBlock.tagClass = 1; // UNIVERSAL
			_this23.idBlock.tagNumber = 10; // Enumerated
			return _this23;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Enumerated, null, [{
			key: "blockName",
			value: function blockName() {
				return "Enumerated";
			}
			//**********************************************************************************
	
		}]);
	
		return Enumerated;
	}(Integer);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of ASN.1 ObjectIdentifier type class
	//**************************************************************************************
	
	
	var LocalSidValueBlock = function (_LocalHexBlock5) {
		_inherits(LocalSidValueBlock, _LocalHexBlock5);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalSidValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {number} [valueDec]
	  * @property {boolean} [isFirstSid]
	  */
		function LocalSidValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalSidValueBlock);
	
			var _this24 = _possibleConstructorReturn(this, (LocalSidValueBlock.__proto__ || Object.getPrototypeOf(LocalSidValueBlock)).call(this, parameters));
	
			_this24.valueDec = (0, _pvutils.getParametersValue)(parameters, "valueDec", -1);
			_this24.isFirstSid = (0, _pvutils.getParametersValue)(parameters, "isFirstSid", false);
			return _this24;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalSidValueBlock, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				if (inputLength === 0) return inputOffset;
	
				//region Basic check for parameters
				//noinspection JSCheckFunctionSignatures
				if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1;
				//endregion
	
				var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
	
				this.valueHex = new ArrayBuffer(inputLength);
				var view = new Uint8Array(this.valueHex);
	
				for (var i = 0; i < inputLength; i++) {
					view[i] = intBuffer[i] & 0x7F;
	
					this.blockLength++;
	
					if ((intBuffer[i] & 0x80) === 0x00) break;
				}
	
				//region Ajust size of valueHex buffer
				var tempValueHex = new ArrayBuffer(this.blockLength);
				var tempView = new Uint8Array(tempValueHex);
	
				for (var _i6 = 0; _i6 < this.blockLength; _i6++) {
					tempView[_i6] = view[_i6];
				} //noinspection JSCheckFunctionSignatures
				this.valueHex = tempValueHex.slice(0);
				view = new Uint8Array(this.valueHex);
				//endregion
	
				if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
					this.error = "End of input reached before message was fully decoded";
					return -1;
				}
	
				if (view[0] === 0x00) this.warnings.push("Needlessly long format of SID encoding");
	
				if (this.blockLength <= 8) this.valueDec = (0, _pvutils.utilFromBase)(view, 7);else {
					this.isHexOnly = true;
					this.warnings.push("Too big SID for decoding, hex only");
				}
	
				return inputOffset + this.blockLength;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Initial variables
				var retBuf = void 0;
				var retView = void 0;
				//endregion
	
				if (this.isHexOnly) {
					if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);
	
					var curView = new Uint8Array(this.valueHex);
	
					retBuf = new ArrayBuffer(this.blockLength);
					retView = new Uint8Array(retBuf);
	
					for (var i = 0; i < this.blockLength - 1; i++) {
						retView[i] = curView[i] | 0x80;
					}retView[this.blockLength - 1] = curView[this.blockLength - 1];
	
					return retBuf;
				}
	
				var encodedBuf = (0, _pvutils.utilToBase)(this.valueDec, 7);
				if (encodedBuf.byteLength === 0) {
					this.error = "Error during encoding SID value";
					return new ArrayBuffer(0);
				}
	
				retBuf = new ArrayBuffer(encodedBuf.byteLength);
	
				if (sizeOnly === false) {
					var encodedView = new Uint8Array(encodedBuf);
					retView = new Uint8Array(retBuf);
	
					for (var _i7 = 0; _i7 < encodedBuf.byteLength - 1; _i7++) {
						retView[_i7] = encodedView[_i7] | 0x80;
					}retView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Create string representation of current SID block
	   * @returns {string}
	   */
	
		}, {
			key: "toString",
			value: function toString() {
				var result = "";
	
				if (this.isHexOnly === true) result = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);else {
					if (this.isFirstSid) {
						var sidValue = this.valueDec;
	
						if (this.valueDec <= 39) result = "0.";else {
							if (this.valueDec <= 79) {
								result = "1.";
								sidValue -= 40;
							} else {
								result = "2.";
								sidValue -= 80;
							}
						}
	
						result = result + sidValue.toString();
					} else result = this.valueDec.toString();
				}
	
				return result;
			}
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalSidValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalSidValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.valueDec = this.valueDec;
				object.isFirstSid = this.isFirstSid;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "sidBlock";
			}
		}]);
	
		return LocalSidValueBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	
	
	var LocalObjectIdentifierValueBlock = function (_LocalValueBlock5) {
		_inherits(LocalObjectIdentifierValueBlock, _LocalValueBlock5);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalObjectIdentifierValueBlock" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function LocalObjectIdentifierValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalObjectIdentifierValueBlock);
	
			var _this25 = _possibleConstructorReturn(this, (LocalObjectIdentifierValueBlock.__proto__ || Object.getPrototypeOf(LocalObjectIdentifierValueBlock)).call(this, parameters));
	
			_this25.fromString((0, _pvutils.getParametersValue)(parameters, "value", ""));
			return _this25;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(LocalObjectIdentifierValueBlock, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = inputOffset;
	
				while (inputLength > 0) {
					var sidBlock = new LocalSidValueBlock();
					resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
					if (resultOffset === -1) {
						this.blockLength = 0;
						this.error = sidBlock.error;
						return resultOffset;
					}
	
					if (this.value.length === 0) sidBlock.isFirstSid = true;
	
					this.blockLength += sidBlock.blockLength;
					inputLength -= sidBlock.blockLength;
	
					this.value.push(sidBlock);
				}
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var retBuf = new ArrayBuffer(0);
	
				for (var i = 0; i < this.value.length; i++) {
					var valueBuf = this.value[i].toBER(sizeOnly);
					if (valueBuf.byteLength === 0) {
						this.error = this.value[i].error;
						return new ArrayBuffer(0);
					}
	
					retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);
				}
	
				return retBuf;
			}
			//**********************************************************************************
			/**
	   * Create "LocalObjectIdentifierValueBlock" class from string
	   * @param {string} string Input string to convert from
	   * @returns {boolean}
	   */
	
		}, {
			key: "fromString",
			value: function fromString(string) {
				this.value = []; // Clear existing SID values
	
				var pos1 = 0;
				var pos2 = 0;
	
				var sid = "";
	
				var flag = false;
	
				do {
					pos2 = string.indexOf(".", pos1);
					if (pos2 === -1) sid = string.substr(pos1);else sid = string.substr(pos1, pos2 - pos1);
	
					pos1 = pos2 + 1;
	
					if (flag) {
						var sidBlock = this.value[0];
	
						var plus = 0;
	
						switch (sidBlock.valueDec) {
							case 0:
								break;
							case 1:
								plus = 40;
								break;
							case 2:
								plus = 80;
								break;
							default:
								this.value = []; // clear SID array
								return false; // ???
						}
	
						var parsedSID = parseInt(sid, 10);
						if (isNaN(parsedSID)) return true;
	
						sidBlock.valueDec = parsedSID + plus;
	
						flag = false;
					} else {
						var _sidBlock = new LocalSidValueBlock();
						_sidBlock.valueDec = parseInt(sid, 10);
						if (isNaN(_sidBlock.valueDec)) return true;
	
						if (this.value.length === 0) {
							_sidBlock.isFirstSid = true;
							flag = true;
						}
	
						this.value.push(_sidBlock);
					}
				} while (pos2 !== -1);
	
				return true;
			}
			//**********************************************************************************
			/**
	   * Converts "LocalObjectIdentifierValueBlock" class to string
	   * @returns {string}
	   */
	
		}, {
			key: "toString",
			value: function toString() {
				var result = "";
				var isHexOnly = false;
	
				for (var i = 0; i < this.value.length; i++) {
					isHexOnly = this.value[i].isHexOnly;
	
					var sidStr = this.value[i].toString();
	
					if (i !== 0) result = result + ".";
	
					if (isHexOnly) {
						sidStr = "{" + sidStr + "}";
	
						if (this.value[i].isFirstSid) result = "2.{" + sidStr + " - 80}";else result = result + sidStr;
					} else result = result + sidStr;
				}
	
				return result;
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalObjectIdentifierValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalObjectIdentifierValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.toString();
				object.sidArray = [];
				for (var i = 0; i < this.value.length; i++) {
					object.sidArray.push(this.value[i].toJSON());
				}return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "ObjectIdentifierValueBlock";
			}
		}]);
	
		return LocalObjectIdentifierValueBlock;
	}(LocalValueBlock);
	//**************************************************************************************
	/**
	 * @extends BaseBlock
	 */
	
	
	var ObjectIdentifier = exports.ObjectIdentifier = function (_BaseBlock9) {
		_inherits(ObjectIdentifier, _BaseBlock9);
	
		//**********************************************************************************
		/**
	  * Constructor for "ObjectIdentifier" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function ObjectIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ObjectIdentifier);
	
			var _this26 = _possibleConstructorReturn(this, (ObjectIdentifier.__proto__ || Object.getPrototypeOf(ObjectIdentifier)).call(this, parameters, LocalObjectIdentifierValueBlock));
	
			_this26.idBlock.tagClass = 1; // UNIVERSAL
			_this26.idBlock.tagNumber = 6; // OBJECT IDENTIFIER
			return _this26;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(ObjectIdentifier, null, [{
			key: "blockName",
			value: function blockName() {
				return "ObjectIdentifier";
			}
			//**********************************************************************************
	
		}]);
	
		return ObjectIdentifier;
	}(BaseBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of all string's classes
	//**************************************************************************************
	
	
	var LocalUtf8StringValueBlock = function (_LocalHexBlock6) {
		_inherits(LocalUtf8StringValueBlock, _LocalHexBlock6);
	
		//**********************************************************************************
		//noinspection JSUnusedGlobalSymbols
		/**
	  * Constructor for "LocalUtf8StringValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalUtf8StringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalUtf8StringValueBlock);
	
			var _this27 = _possibleConstructorReturn(this, (LocalUtf8StringValueBlock.__proto__ || Object.getPrototypeOf(LocalUtf8StringValueBlock)).call(this, parameters));
	
			_this27.isHexOnly = true;
			_this27.value = ""; // String representation of decoded ArrayBuffer
			return _this27;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalUtf8StringValueBlock, [{
			key: "toJSON",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalUtf8StringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalUtf8StringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.value;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "Utf8StringValueBlock";
			}
		}]);
	
		return LocalUtf8StringValueBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	/**
	 * @extends BaseBlock
	 */
	
	
	var Utf8String = exports.Utf8String = function (_BaseBlock10) {
		_inherits(Utf8String, _BaseBlock10);
	
		//**********************************************************************************
		/**
	  * Constructor for "Utf8String" class
	  * @param {Object} [parameters={}]
	  * @property {ArrayBuffer} [valueHex]
	  */
		function Utf8String() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Utf8String);
	
			var _this28 = _possibleConstructorReturn(this, (Utf8String.__proto__ || Object.getPrototypeOf(Utf8String)).call(this, parameters, LocalUtf8StringValueBlock));
	
			if ("value" in parameters) _this28.fromString(parameters.value);
	
			_this28.idBlock.tagClass = 1; // UNIVERSAL
			_this28.idBlock.tagNumber = 12; // Utf8String
			return _this28;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Utf8String, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));
	
				try {
					//noinspection JSDeprecatedSymbols
					this.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));
				} catch (ex) {
					this.warnings.push("Error during \"decodeURIComponent\": " + ex + ", using raw string");
				}
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				//noinspection JSDeprecatedSymbols
				var str = unescape(encodeURIComponent(inputString));
				var strLen = str.length;
	
				this.valueBlock.valueHex = new ArrayBuffer(strLen);
				var view = new Uint8Array(this.valueBlock.valueHex);
	
				for (var i = 0; i < strLen; i++) {
					view[i] = str.charCodeAt(i);
				}this.valueBlock.value = inputString;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "Utf8String";
			}
		}]);
	
		return Utf8String;
	}(BaseBlock);
	//**************************************************************************************
	/**
	 * @extends LocalBaseBlock
	 * @extends LocalHexBlock
	 */
	
	
	var LocalBmpStringValueBlock = function (_LocalHexBlock7) {
		_inherits(LocalBmpStringValueBlock, _LocalHexBlock7);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalBmpStringValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalBmpStringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalBmpStringValueBlock);
	
			var _this29 = _possibleConstructorReturn(this, (LocalBmpStringValueBlock.__proto__ || Object.getPrototypeOf(LocalBmpStringValueBlock)).call(this, parameters));
	
			_this29.isHexOnly = true;
			_this29.value = "";
			return _this29;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalBmpStringValueBlock, [{
			key: "toJSON",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalBmpStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalBmpStringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.value;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BmpStringValueBlock";
			}
		}]);
	
		return LocalBmpStringValueBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	/**
	 * @extends BaseBlock
	 */
	
	
	var BmpString = exports.BmpString = function (_BaseBlock11) {
		_inherits(BmpString, _BaseBlock11);
	
		//**********************************************************************************
		/**
	  * Constructor for "BmpString" class
	  * @param {Object} [parameters={}]
	  */
		function BmpString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, BmpString);
	
			var _this30 = _possibleConstructorReturn(this, (BmpString.__proto__ || Object.getPrototypeOf(BmpString)).call(this, parameters, LocalBmpStringValueBlock));
	
			if ("value" in parameters) _this30.fromString(parameters.value);
	
			_this30.idBlock.tagClass = 1; // UNIVERSAL
			_this30.idBlock.tagNumber = 30; // BmpString
			return _this30;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(BmpString, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				//noinspection JSCheckFunctionSignatures
				var copyBuffer = inputBuffer.slice(0);
				var valueView = new Uint8Array(copyBuffer);
	
				for (var i = 0; i < valueView.length; i = i + 2) {
					var temp = valueView[i];
	
					valueView[i] = valueView[i + 1];
					valueView[i + 1] = temp;
				}
	
				this.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				var strLength = inputString.length;
	
				this.valueBlock.valueHex = new ArrayBuffer(strLength * 2);
				var valueHexView = new Uint8Array(this.valueBlock.valueHex);
	
				for (var i = 0; i < strLength; i++) {
					var codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);
					var codeView = new Uint8Array(codeBuf);
					if (codeView.length > 2) continue;
	
					var dif = 2 - codeView.length;
	
					for (var j = codeView.length - 1; j >= 0; j--) {
						valueHexView[i * 2 + j + dif] = codeView[j];
					}
				}
	
				this.valueBlock.value = inputString;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "BmpString";
			}
		}]);
	
		return BmpString;
	}(BaseBlock);
	//**************************************************************************************
	
	
	var LocalUniversalStringValueBlock = function (_LocalHexBlock8) {
		_inherits(LocalUniversalStringValueBlock, _LocalHexBlock8);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalUniversalStringValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalUniversalStringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalUniversalStringValueBlock);
	
			var _this31 = _possibleConstructorReturn(this, (LocalUniversalStringValueBlock.__proto__ || Object.getPrototypeOf(LocalUniversalStringValueBlock)).call(this, parameters));
	
			_this31.isHexOnly = true;
			_this31.value = "";
			return _this31;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalUniversalStringValueBlock, [{
			key: "toJSON",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalUniversalStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalUniversalStringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.value;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "UniversalStringValueBlock";
			}
		}]);
	
		return LocalUniversalStringValueBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	/**
	 * @extends BaseBlock
	 */
	
	
	var UniversalString = exports.UniversalString = function (_BaseBlock12) {
		_inherits(UniversalString, _BaseBlock12);
	
		//**********************************************************************************
		/**
	  * Constructor for "UniversalString" class
	  * @param {Object} [parameters={}]
	  */
		function UniversalString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, UniversalString);
	
			var _this32 = _possibleConstructorReturn(this, (UniversalString.__proto__ || Object.getPrototypeOf(UniversalString)).call(this, parameters, LocalUniversalStringValueBlock));
	
			if ("value" in parameters) _this32.fromString(parameters.value);
	
			_this32.idBlock.tagClass = 1; // UNIVERSAL
			_this32.idBlock.tagNumber = 28; // UniversalString
			return _this32;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(UniversalString, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				//noinspection JSCheckFunctionSignatures
				var copyBuffer = inputBuffer.slice(0);
				var valueView = new Uint8Array(copyBuffer);
	
				for (var i = 0; i < valueView.length; i = i + 4) {
					valueView[i] = valueView[i + 3];
					valueView[i + 1] = valueView[i + 2];
					valueView[i + 2] = 0x00;
					valueView[i + 3] = 0x00;
				}
	
				this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				var strLength = inputString.length;
	
				this.valueBlock.valueHex = new ArrayBuffer(strLength * 4);
				var valueHexView = new Uint8Array(this.valueBlock.valueHex);
	
				for (var i = 0; i < strLength; i++) {
					var codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);
					var codeView = new Uint8Array(codeBuf);
					if (codeView.length > 4) continue;
	
					var dif = 4 - codeView.length;
	
					for (var j = codeView.length - 1; j >= 0; j--) {
						valueHexView[i * 4 + j + dif] = codeView[j];
					}
				}
	
				this.valueBlock.value = inputString;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "UniversalString";
			}
		}]);
	
		return UniversalString;
	}(BaseBlock);
	//**************************************************************************************
	
	
	var LocalSimpleStringValueBlock = function (_LocalHexBlock9) {
		_inherits(LocalSimpleStringValueBlock, _LocalHexBlock9);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalSimpleStringValueBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalSimpleStringValueBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalSimpleStringValueBlock);
	
			var _this33 = _possibleConstructorReturn(this, (LocalSimpleStringValueBlock.__proto__ || Object.getPrototypeOf(LocalSimpleStringValueBlock)).call(this, parameters));
	
			_this33.value = "";
			_this33.isHexOnly = true;
			return _this33;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalSimpleStringValueBlock, [{
			key: "toJSON",
	
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(LocalSimpleStringValueBlock.prototype.__proto__ || Object.getPrototypeOf(LocalSimpleStringValueBlock.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.value = this.value;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "SimpleStringValueBlock";
			}
		}]);
	
		return LocalSimpleStringValueBlock;
	}(LocalHexBlock(LocalBaseBlock));
	//**************************************************************************************
	/**
	 * @extends BaseBlock
	 */
	
	
	var LocalSimpleStringBlock = function (_BaseBlock13) {
		_inherits(LocalSimpleStringBlock, _BaseBlock13);
	
		//**********************************************************************************
		/**
	  * Constructor for "LocalSimpleStringBlock" class
	  * @param {Object} [parameters={}]
	  */
		function LocalSimpleStringBlock() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, LocalSimpleStringBlock);
	
			var _this34 = _possibleConstructorReturn(this, (LocalSimpleStringBlock.__proto__ || Object.getPrototypeOf(LocalSimpleStringBlock)).call(this, parameters, LocalSimpleStringValueBlock));
	
			if ("value" in parameters) _this34.fromString(parameters.value);
			return _this34;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(LocalSimpleStringBlock, [{
			key: "fromBER",
	
			//**********************************************************************************
			/**
	   * Base function for converting block from BER encoded array of bytes
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	   * @returns {number} Offset after least decoded byte
	   */
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				var strLen = inputString.length;
	
				this.valueBlock.valueHex = new ArrayBuffer(strLen);
				var view = new Uint8Array(this.valueBlock.valueHex);
	
				for (var i = 0; i < strLen; i++) {
					view[i] = inputString.charCodeAt(i);
				}this.valueBlock.value = inputString;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "SIMPLESTRING";
			}
		}]);
	
		return LocalSimpleStringBlock;
	}(BaseBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var NumericString = exports.NumericString = function (_LocalSimpleStringBlo) {
		_inherits(NumericString, _LocalSimpleStringBlo);
	
		//**********************************************************************************
		/**
	  * Constructor for "NumericString" class
	  * @param {Object} [parameters={}]
	  */
		function NumericString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, NumericString);
	
			var _this35 = _possibleConstructorReturn(this, (NumericString.__proto__ || Object.getPrototypeOf(NumericString)).call(this, parameters));
	
			_this35.idBlock.tagClass = 1; // UNIVERSAL
			_this35.idBlock.tagNumber = 18; // NumericString
			return _this35;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(NumericString, null, [{
			key: "blockName",
			value: function blockName() {
				return "NumericString";
			}
			//**********************************************************************************
	
		}]);
	
		return NumericString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var PrintableString = exports.PrintableString = function (_LocalSimpleStringBlo2) {
		_inherits(PrintableString, _LocalSimpleStringBlo2);
	
		//**********************************************************************************
		/**
	  * Constructor for "PrintableString" class
	  * @param {Object} [parameters={}]
	  */
		function PrintableString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PrintableString);
	
			var _this36 = _possibleConstructorReturn(this, (PrintableString.__proto__ || Object.getPrototypeOf(PrintableString)).call(this, parameters));
	
			_this36.idBlock.tagClass = 1; // UNIVERSAL
			_this36.idBlock.tagNumber = 19; // PrintableString
			return _this36;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(PrintableString, null, [{
			key: "blockName",
			value: function blockName() {
				return "PrintableString";
			}
			//**********************************************************************************
	
		}]);
	
		return PrintableString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var TeletexString = exports.TeletexString = function (_LocalSimpleStringBlo3) {
		_inherits(TeletexString, _LocalSimpleStringBlo3);
	
		//**********************************************************************************
		/**
	  * Constructor for "TeletexString" class
	  * @param {Object} [parameters={}]
	  */
		function TeletexString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TeletexString);
	
			var _this37 = _possibleConstructorReturn(this, (TeletexString.__proto__ || Object.getPrototypeOf(TeletexString)).call(this, parameters));
	
			_this37.idBlock.tagClass = 1; // UNIVERSAL
			_this37.idBlock.tagNumber = 20; // TeletexString
			return _this37;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(TeletexString, null, [{
			key: "blockName",
			value: function blockName() {
				return "TeletexString";
			}
			//**********************************************************************************
	
		}]);
	
		return TeletexString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var VideotexString = exports.VideotexString = function (_LocalSimpleStringBlo4) {
		_inherits(VideotexString, _LocalSimpleStringBlo4);
	
		//**********************************************************************************
		/**
	  * Constructor for "VideotexString" class
	  * @param {Object} [parameters={}]
	  */
		function VideotexString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, VideotexString);
	
			var _this38 = _possibleConstructorReturn(this, (VideotexString.__proto__ || Object.getPrototypeOf(VideotexString)).call(this, parameters));
	
			_this38.idBlock.tagClass = 1; // UNIVERSAL
			_this38.idBlock.tagNumber = 21; // VideotexString
			return _this38;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(VideotexString, null, [{
			key: "blockName",
			value: function blockName() {
				return "VideotexString";
			}
			//**********************************************************************************
	
		}]);
	
		return VideotexString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var IA5String = exports.IA5String = function (_LocalSimpleStringBlo5) {
		_inherits(IA5String, _LocalSimpleStringBlo5);
	
		//**********************************************************************************
		/**
	  * Constructor for "IA5String" class
	  * @param {Object} [parameters={}]
	  */
		function IA5String() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, IA5String);
	
			var _this39 = _possibleConstructorReturn(this, (IA5String.__proto__ || Object.getPrototypeOf(IA5String)).call(this, parameters));
	
			_this39.idBlock.tagClass = 1; // UNIVERSAL
			_this39.idBlock.tagNumber = 22; // IA5String
			return _this39;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(IA5String, null, [{
			key: "blockName",
			value: function blockName() {
				return "IA5String";
			}
			//**********************************************************************************
	
		}]);
	
		return IA5String;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var GraphicString = exports.GraphicString = function (_LocalSimpleStringBlo6) {
		_inherits(GraphicString, _LocalSimpleStringBlo6);
	
		//**********************************************************************************
		/**
	  * Constructor for "GraphicString" class
	  * @param {Object} [parameters={}]
	  */
		function GraphicString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GraphicString);
	
			var _this40 = _possibleConstructorReturn(this, (GraphicString.__proto__ || Object.getPrototypeOf(GraphicString)).call(this, parameters));
	
			_this40.idBlock.tagClass = 1; // UNIVERSAL
			_this40.idBlock.tagNumber = 25; // GraphicString
			return _this40;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(GraphicString, null, [{
			key: "blockName",
			value: function blockName() {
				return "GraphicString";
			}
			//**********************************************************************************
	
		}]);
	
		return GraphicString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var VisibleString = exports.VisibleString = function (_LocalSimpleStringBlo7) {
		_inherits(VisibleString, _LocalSimpleStringBlo7);
	
		//**********************************************************************************
		/**
	  * Constructor for "VisibleString" class
	  * @param {Object} [parameters={}]
	  */
		function VisibleString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, VisibleString);
	
			var _this41 = _possibleConstructorReturn(this, (VisibleString.__proto__ || Object.getPrototypeOf(VisibleString)).call(this, parameters));
	
			_this41.idBlock.tagClass = 1; // UNIVERSAL
			_this41.idBlock.tagNumber = 26; // VisibleString
			return _this41;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(VisibleString, null, [{
			key: "blockName",
			value: function blockName() {
				return "VisibleString";
			}
			//**********************************************************************************
	
		}]);
	
		return VisibleString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var GeneralString = exports.GeneralString = function (_LocalSimpleStringBlo8) {
		_inherits(GeneralString, _LocalSimpleStringBlo8);
	
		//**********************************************************************************
		/**
	  * Constructor for "GeneralString" class
	  * @param {Object} [parameters={}]
	  */
		function GeneralString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GeneralString);
	
			var _this42 = _possibleConstructorReturn(this, (GeneralString.__proto__ || Object.getPrototypeOf(GeneralString)).call(this, parameters));
	
			_this42.idBlock.tagClass = 1; // UNIVERSAL
			_this42.idBlock.tagNumber = 27; // GeneralString
			return _this42;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(GeneralString, null, [{
			key: "blockName",
			value: function blockName() {
				return "GeneralString";
			}
			//**********************************************************************************
	
		}]);
	
		return GeneralString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	/**
	 * @extends LocalSimpleStringBlock
	 */
	
	
	var CharacterString = exports.CharacterString = function (_LocalSimpleStringBlo9) {
		_inherits(CharacterString, _LocalSimpleStringBlo9);
	
		//**********************************************************************************
		/**
	  * Constructor for "CharacterString" class
	  * @param {Object} [parameters={}]
	  */
		function CharacterString() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CharacterString);
	
			var _this43 = _possibleConstructorReturn(this, (CharacterString.__proto__ || Object.getPrototypeOf(CharacterString)).call(this, parameters));
	
			_this43.idBlock.tagClass = 1; // UNIVERSAL
			_this43.idBlock.tagNumber = 29; // CharacterString
			return _this43;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(CharacterString, null, [{
			key: "blockName",
			value: function blockName() {
				return "CharacterString";
			}
			//**********************************************************************************
	
		}]);
	
		return CharacterString;
	}(LocalSimpleStringBlock);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of all date and time classes
	//**************************************************************************************
	/**
	 * @extends VisibleString
	 */
	
	
	var UTCTime = exports.UTCTime = function (_VisibleString) {
		_inherits(UTCTime, _VisibleString);
	
		//**********************************************************************************
		/**
	  * Constructor for "UTCTime" class
	  * @param {Object} [parameters={}]
	  * @property {string} [value] String representatio of the date
	  * @property {Date} [valueDate] JavaScript "Date" object
	  */
		function UTCTime() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, UTCTime);
	
			var _this44 = _possibleConstructorReturn(this, (UTCTime.__proto__ || Object.getPrototypeOf(UTCTime)).call(this, parameters));
	
			_this44.year = 0;
			_this44.month = 0;
			_this44.day = 0;
			_this44.hour = 0;
			_this44.minute = 0;
			_this44.second = 0;
	
			//region Create UTCTime from ASN.1 UTC string value
			if ("value" in parameters) {
				_this44.fromString(parameters.value);
	
				_this44.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);
				var view = new Uint8Array(_this44.valueBlock.valueHex);
	
				for (var i = 0; i < parameters.value.length; i++) {
					view[i] = parameters.value.charCodeAt(i);
				}
			}
			//endregion
			//region Create GeneralizedTime from JavaScript Date type
			if ("valueDate" in parameters) {
				_this44.fromDate(parameters.valueDate);
				_this44.valueBlock.valueHex = _this44.toBuffer();
			}
			//endregion
	
			_this44.idBlock.tagClass = 1; // UNIVERSAL
			_this44.idBlock.tagNumber = 23; // UTCTime
			return _this44;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(UTCTime, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				this.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));
			}
			//**********************************************************************************
			/**
	   * Function converting ASN.1 internal string into ArrayBuffer
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBuffer",
			value: function toBuffer() {
				var str = this.toString();
	
				var buffer = new ArrayBuffer(str.length);
				var view = new Uint8Array(buffer);
	
				for (var i = 0; i < str.length; i++) {
					view[i] = str.charCodeAt(i);
				}return buffer;
			}
			//**********************************************************************************
			/**
	   * Function converting "Date" object into ASN.1 internal string
	   * @param {!Date} inputDate JavaScript "Date" object
	   */
	
		}, {
			key: "fromDate",
			value: function fromDate(inputDate) {
				this.year = inputDate.getUTCFullYear();
				this.month = inputDate.getUTCMonth() + 1;
				this.day = inputDate.getUTCDate();
				this.hour = inputDate.getUTCHours();
				this.minute = inputDate.getUTCMinutes();
				this.second = inputDate.getUTCSeconds();
			}
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Function converting ASN.1 internal string into "Date" object
	   * @returns {Date}
	   */
	
		}, {
			key: "toDate",
			value: function toDate() {
				return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				//region Parse input string
				var parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
				var parserArray = parser.exec(inputString);
				if (parserArray === null) {
					this.error = "Wrong input string for convertion";
					return;
				}
				//endregion
	
				//region Store parsed values
				var year = parseInt(parserArray[1], 10);
				if (year >= 50) this.year = 1900 + year;else this.year = 2000 + year;
	
				this.month = parseInt(parserArray[2], 10);
				this.day = parseInt(parserArray[3], 10);
				this.hour = parseInt(parserArray[4], 10);
				this.minute = parseInt(parserArray[5], 10);
				this.second = parseInt(parserArray[6], 10);
				//endregion
			}
			//**********************************************************************************
			/**
	   * Function converting ASN.1 internal class into JavaScript string
	   * @returns {string}
	   */
	
		}, {
			key: "toString",
			value: function toString() {
				var outputArray = new Array(7);
	
				outputArray[0] = (0, _pvutils.padNumber)(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);
				outputArray[1] = (0, _pvutils.padNumber)(this.month, 2);
				outputArray[2] = (0, _pvutils.padNumber)(this.day, 2);
				outputArray[3] = (0, _pvutils.padNumber)(this.hour, 2);
				outputArray[4] = (0, _pvutils.padNumber)(this.minute, 2);
				outputArray[5] = (0, _pvutils.padNumber)(this.second, 2);
				outputArray[6] = "Z";
	
				return outputArray.join("");
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(UTCTime.prototype.__proto__ || Object.getPrototypeOf(UTCTime.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.year = this.year;
				object.month = this.month;
				object.day = this.day;
				object.hour = this.hour;
				object.minute = this.minute;
				object.second = this.second;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "UTCTime";
			}
		}]);
	
		return UTCTime;
	}(VisibleString);
	//**************************************************************************************
	/**
	 * @extends VisibleString
	 */
	
	
	var GeneralizedTime = exports.GeneralizedTime = function (_VisibleString2) {
		_inherits(GeneralizedTime, _VisibleString2);
	
		//**********************************************************************************
		/**
	  * Constructor for "GeneralizedTime" class
	  * @param {Object} [parameters={}]
	  * @property {string} [value] String representatio of the date
	  * @property {Date} [valueDate] JavaScript "Date" object
	  */
		function GeneralizedTime() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GeneralizedTime);
	
			var _this45 = _possibleConstructorReturn(this, (GeneralizedTime.__proto__ || Object.getPrototypeOf(GeneralizedTime)).call(this, parameters));
	
			_this45.year = 0;
			_this45.month = 0;
			_this45.day = 0;
			_this45.hour = 0;
			_this45.minute = 0;
			_this45.second = 0;
			_this45.millisecond = 0;
	
			//region Create UTCTime from ASN.1 UTC string value
			if ("value" in parameters) {
				_this45.fromString(parameters.value);
	
				_this45.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);
				var view = new Uint8Array(_this45.valueBlock.valueHex);
	
				for (var i = 0; i < parameters.value.length; i++) {
					view[i] = parameters.value.charCodeAt(i);
				}
			}
			//endregion
			//region Create GeneralizedTime from JavaScript Date type
			if ("valueDate" in parameters) {
				_this45.fromDate(parameters.valueDate);
				_this45.valueBlock.valueHex = _this45.toBuffer();
			}
			//endregion
	
			_this45.idBlock.tagClass = 1; // UNIVERSAL
			_this45.idBlock.tagNumber = 24; // GeneralizedTime
			return _this45;
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(GeneralizedTime, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				var resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);
				if (resultOffset === -1) {
					this.error = this.valueBlock.error;
					return resultOffset;
				}
	
				this.fromBuffer(this.valueBlock.valueHex);
	
				if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
	
				if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
	
				if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;
	
				return resultOffset;
			}
			//**********************************************************************************
			/**
	   * Function converting ArrayBuffer into ASN.1 internal string
	   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromBuffer",
			value: function fromBuffer(inputBuffer) {
				this.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));
			}
			//**********************************************************************************
			/**
	   * Function converting ASN.1 internal string into ArrayBuffer
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBuffer",
			value: function toBuffer() {
				var str = this.toString();
	
				var buffer = new ArrayBuffer(str.length);
				var view = new Uint8Array(buffer);
	
				for (var i = 0; i < str.length; i++) {
					view[i] = str.charCodeAt(i);
				}return buffer;
			}
			//**********************************************************************************
			/**
	   * Function converting "Date" object into ASN.1 internal string
	   * @param {!Date} inputDate JavaScript "Date" object
	   */
	
		}, {
			key: "fromDate",
			value: function fromDate(inputDate) {
				this.year = inputDate.getUTCFullYear();
				this.month = inputDate.getUTCMonth() + 1;
				this.day = inputDate.getUTCDate();
				this.hour = inputDate.getUTCHours();
				this.minute = inputDate.getUTCMinutes();
				this.second = inputDate.getUTCSeconds();
				this.millisecond = inputDate.getUTCMilliseconds();
			}
			//**********************************************************************************
			//noinspection JSUnusedGlobalSymbols
			/**
	   * Function converting ASN.1 internal string into "Date" object
	   * @returns {Date}
	   */
	
		}, {
			key: "toDate",
			value: function toDate() {
				return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
			}
			//**********************************************************************************
			/**
	   * Function converting JavaScript string into ASN.1 internal class
	   * @param {!string} inputString ASN.1 BER encoded array
	   */
	
		}, {
			key: "fromString",
			value: function fromString(inputString) {
				//region Initial variables
				var isUTC = false;
	
				var timeString = "";
				var dateTimeString = "";
				var fractionPart = 0;
	
				var parser = void 0;
	
				var hourDifference = 0;
				var minuteDifference = 0;
				//endregion
	
				//region Convert as UTC time
				if (inputString[inputString.length - 1] === "Z") {
					timeString = inputString.substr(0, inputString.length - 1);
	
					isUTC = true;
				}
				//endregion
				//region Convert as local time
				else {
						//noinspection JSPrimitiveTypeWrapperUsage
						var number = new Number(inputString[inputString.length - 1]);
	
						if (isNaN(number.valueOf())) throw new Error("Wrong input string for convertion");
	
						timeString = inputString;
					}
				//endregion
	
				//region Check that we do not have a "+" and "-" symbols inside UTC time
				if (isUTC) {
					if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for convertion");
	
					if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for convertion");
				}
				//endregion
				//region Get "UTC time difference" in case of local time
				else {
						var multiplier = 1;
						var differencePosition = timeString.indexOf("+");
						var differenceString = "";
	
						if (differencePosition === -1) {
							differencePosition = timeString.indexOf("-");
							multiplier = -1;
						}
	
						if (differencePosition !== -1) {
							differenceString = timeString.substr(differencePosition + 1);
							timeString = timeString.substr(0, differencePosition);
	
							if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for convertion");
	
							//noinspection JSPrimitiveTypeWrapperUsage
							var _number = new Number(differenceString.substr(0, 2));
	
							if (isNaN(_number.valueOf())) throw new Error("Wrong input string for convertion");
	
							hourDifference = multiplier * _number;
	
							if (differenceString.length === 4) {
								//noinspection JSPrimitiveTypeWrapperUsage
								_number = new Number(differenceString.substr(2, 2));
	
								if (isNaN(_number.valueOf())) throw new Error("Wrong input string for convertion");
	
								minuteDifference = multiplier * _number;
							}
						}
					}
				//endregion
	
				//region Get position of fraction point
				var fractionPointPosition = timeString.indexOf("."); // Check for "full stop" symbol
				if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(","); // Check for "comma" symbol
				//endregion
	
				//region Get fraction part
				if (fractionPointPosition !== -1) {
					//noinspection JSPrimitiveTypeWrapperUsage
					var fractionPartCheck = new Number("0" + timeString.substr(fractionPointPosition));
	
					if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for convertion");
	
					fractionPart = fractionPartCheck.valueOf();
	
					dateTimeString = timeString.substr(0, fractionPointPosition);
				} else dateTimeString = timeString;
				//endregion
	
				//region Parse internal date
				switch (true) {
					case dateTimeString.length === 8:
						// "YYYYMMDD"
						parser = /(\d{4})(\d{2})(\d{2})/ig;
						if (fractionPointPosition !== -1) throw new Error("Wrong input string for convertion"); // Here we should not have a "fraction point"
						break;
					case dateTimeString.length === 10:
						// "YYYYMMDDHH"
						parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
	
						if (fractionPointPosition !== -1) {
							var fractionResult = 60 * fractionPart;
							this.minute = Math.floor(fractionResult);
	
							fractionResult = 60 * (fractionResult - this.minute);
							this.second = Math.floor(fractionResult);
	
							fractionResult = 1000 * (fractionResult - this.second);
							this.millisecond = Math.floor(fractionResult);
						}
						break;
					case dateTimeString.length === 12:
						// "YYYYMMDDHHMM"
						parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
	
						if (fractionPointPosition !== -1) {
							var _fractionResult = 60 * fractionPart;
							this.second = Math.floor(_fractionResult);
	
							_fractionResult = 1000 * (_fractionResult - this.second);
							this.millisecond = Math.floor(_fractionResult);
						}
						break;
					case dateTimeString.length === 14:
						// "YYYYMMDDHHMMSS"
						parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
	
						if (fractionPointPosition !== -1) {
							var _fractionResult2 = 1000 * fractionPart;
							this.millisecond = Math.floor(_fractionResult2);
						}
						break;
					default:
						throw new Error("Wrong input string for convertion");
				}
				//endregion
	
				//region Put parsed values at right places
				var parserArray = parser.exec(dateTimeString);
				if (parserArray === null) throw new Error("Wrong input string for convertion");
	
				for (var j = 1; j < parserArray.length; j++) {
					switch (j) {
						case 1:
							this.year = parseInt(parserArray[j], 10);
							break;
						case 2:
							this.month = parseInt(parserArray[j], 10);
							break;
						case 3:
							this.day = parseInt(parserArray[j], 10);
							break;
						case 4:
							this.hour = parseInt(parserArray[j], 10) + hourDifference;
							break;
						case 5:
							this.minute = parseInt(parserArray[j], 10) + minuteDifference;
							break;
						case 6:
							this.second = parseInt(parserArray[j], 10);
							break;
						default:
							throw new Error("Wrong input string for convertion");
					}
				}
				//endregion
	
				//region Get final date
				if (isUTC === false) {
					var tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
	
					this.year = tempDate.getUTCFullYear();
					this.month = tempDate.getUTCMonth();
					this.day = tempDate.getUTCDay();
					this.hour = tempDate.getUTCHours();
					this.minute = tempDate.getUTCMinutes();
					this.second = tempDate.getUTCSeconds();
					this.millisecond = tempDate.getUTCMilliseconds();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Function converting ASN.1 internal class into JavaScript string
	   * @returns {string}
	   */
	
		}, {
			key: "toString",
			value: function toString() {
				var outputArray = [];
	
				outputArray.push((0, _pvutils.padNumber)(this.year, 4));
				outputArray.push((0, _pvutils.padNumber)(this.month, 2));
				outputArray.push((0, _pvutils.padNumber)(this.day, 2));
				outputArray.push((0, _pvutils.padNumber)(this.hour, 2));
				outputArray.push((0, _pvutils.padNumber)(this.minute, 2));
				outputArray.push((0, _pvutils.padNumber)(this.second, 2));
				if (this.millisecond !== 0) {
					outputArray.push(".");
					outputArray.push((0, _pvutils.padNumber)(this.millisecond, 3));
				}
				outputArray.push("Z");
	
				return outputArray.join("");
			}
			//**********************************************************************************
			/**
	   * Aux function, need to get a block name. Need to have it here for inhiritence
	   * @returns {string}
	   */
	
		}, {
			key: "toJSON",
	
			//**********************************************************************************
			/**
	   * Convertion for the block to JSON object
	   * @returns {Object}
	   */
			value: function toJSON() {
				var object = {};
	
				//region Seems at the moment (Sep 2016) there is no way how to check method is supported in "super" object
				try {
					object = _get(GeneralizedTime.prototype.__proto__ || Object.getPrototypeOf(GeneralizedTime.prototype), "toJSON", this).call(this);
				} catch (ex) {}
				//endregion
	
				object.year = this.year;
				object.month = this.month;
				object.day = this.day;
				object.hour = this.hour;
				object.minute = this.minute;
				object.second = this.second;
				object.millisecond = this.millisecond;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "blockName",
			value: function blockName() {
				return "GeneralizedTime";
			}
		}]);
	
		return GeneralizedTime;
	}(VisibleString);
	//**************************************************************************************
	/**
	 * @extends Utf8String
	 */
	
	
	var DATE = exports.DATE = function (_Utf8String) {
		_inherits(DATE, _Utf8String);
	
		//**********************************************************************************
		/**
	  * Constructor for "DATE" class
	  * @param {Object} [parameters={}]
	  */
		function DATE() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, DATE);
	
			var _this46 = _possibleConstructorReturn(this, (DATE.__proto__ || Object.getPrototypeOf(DATE)).call(this, parameters));
	
			_this46.idBlock.tagClass = 1; // UNIVERSAL
			_this46.idBlock.tagNumber = 31; // DATE
			return _this46;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(DATE, null, [{
			key: "blockName",
			value: function blockName() {
				return "DATE";
			}
			//**********************************************************************************
	
		}]);
	
		return DATE;
	}(Utf8String);
	//**************************************************************************************
	/**
	 * @extends Utf8String
	 */
	
	
	var TimeOfDay = exports.TimeOfDay = function (_Utf8String2) {
		_inherits(TimeOfDay, _Utf8String2);
	
		//**********************************************************************************
		/**
	  * Constructor for "TimeOfDay" class
	  * @param {Object} [parameters={}]
	  */
		function TimeOfDay() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TimeOfDay);
	
			var _this47 = _possibleConstructorReturn(this, (TimeOfDay.__proto__ || Object.getPrototypeOf(TimeOfDay)).call(this, parameters));
	
			_this47.idBlock.tagClass = 1; // UNIVERSAL
			_this47.idBlock.tagNumber = 32; // TimeOfDay
			return _this47;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(TimeOfDay, null, [{
			key: "blockName",
			value: function blockName() {
				return "TimeOfDay";
			}
			//**********************************************************************************
	
		}]);
	
		return TimeOfDay;
	}(Utf8String);
	//**************************************************************************************
	/**
	 * @extends Utf8String
	 */
	
	
	var DateTime = exports.DateTime = function (_Utf8String3) {
		_inherits(DateTime, _Utf8String3);
	
		//**********************************************************************************
		/**
	  * Constructor for "DateTime" class
	  * @param {Object} [parameters={}]
	  */
		function DateTime() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, DateTime);
	
			var _this48 = _possibleConstructorReturn(this, (DateTime.__proto__ || Object.getPrototypeOf(DateTime)).call(this, parameters));
	
			_this48.idBlock.tagClass = 1; // UNIVERSAL
			_this48.idBlock.tagNumber = 33; // DateTime
			return _this48;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(DateTime, null, [{
			key: "blockName",
			value: function blockName() {
				return "DateTime";
			}
			//**********************************************************************************
	
		}]);
	
		return DateTime;
	}(Utf8String);
	//**************************************************************************************
	/**
	 * @extends Utf8String
	 */
	
	
	var Duration = exports.Duration = function (_Utf8String4) {
		_inherits(Duration, _Utf8String4);
	
		//**********************************************************************************
		/**
	  * Constructor for "Duration" class
	  * @param {Object} [parameters={}]
	  */
		function Duration() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Duration);
	
			var _this49 = _possibleConstructorReturn(this, (Duration.__proto__ || Object.getPrototypeOf(Duration)).call(this, parameters));
	
			_this49.idBlock.tagClass = 1; // UNIVERSAL
			_this49.idBlock.tagNumber = 34; // Duration
			return _this49;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(Duration, null, [{
			key: "blockName",
			value: function blockName() {
				return "Duration";
			}
			//**********************************************************************************
	
		}]);
	
		return Duration;
	}(Utf8String);
	//**************************************************************************************
	/**
	 * @extends Utf8String
	 */
	
	
	var TIME = exports.TIME = function (_Utf8String5) {
		_inherits(TIME, _Utf8String5);
	
		//**********************************************************************************
		/**
	  * Constructor for "Time" class
	  * @param {Object} [parameters={}]
	  */
		function TIME() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TIME);
	
			var _this50 = _possibleConstructorReturn(this, (TIME.__proto__ || Object.getPrototypeOf(TIME)).call(this, parameters));
	
			_this50.idBlock.tagClass = 1; // UNIVERSAL
			_this50.idBlock.tagNumber = 14; // Time
			return _this50;
		}
		//**********************************************************************************
		/**
	  * Aux function, need to get a block name. Need to have it here for inhiritence
	  * @returns {string}
	  */
	
	
		_createClass(TIME, null, [{
			key: "blockName",
			value: function blockName() {
				return "TIME";
			}
			//**********************************************************************************
	
		}]);
	
		return TIME;
	}(Utf8String);
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of special ASN.1 schema type Choice
	//**************************************************************************************
	
	
	var Choice =
	//**********************************************************************************
	/**
	 * Constructor for "Choice" class
	 * @param {Object} [parameters={}]
	 * @property {Array} [value] Array of ASN.1 types for make a choice from
	 * @property {boolean} [optional]
	 */
	exports.Choice = function Choice() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		_classCallCheck(this, Choice);
	
		this.value = (0, _pvutils.getParametersValue)(parameters, "value", []);
		this.optional = (0, _pvutils.getParametersValue)(parameters, "optional", false);
	}
	//**********************************************************************************
	;
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of special ASN.1 schema type Any
	//**************************************************************************************
	
	
	var Any =
	//**********************************************************************************
	/**
	 * Constructor for "Any" class
	 * @param {Object} [parameters={}]
	 * @property {string} [name]
	 * @property {boolean} [optional]
	 */
	exports.Any = function Any() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		_classCallCheck(this, Any);
	
		this.name = (0, _pvutils.getParametersValue)(parameters, "name", "");
		this.optional = (0, _pvutils.getParametersValue)(parameters, "optional", false);
	}
	//**********************************************************************************
	;
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of special ASN.1 schema type Repeated
	//**************************************************************************************
	
	
	var Repeated =
	//**********************************************************************************
	/**
	 * Constructor for "Repeated" class
	 * @param {Object} [parameters={}]
	 * @property {string} [name]
	 * @property {boolean} [optional]
	 */
	exports.Repeated = function Repeated() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		_classCallCheck(this, Repeated);
	
		this.name = (0, _pvutils.getParametersValue)(parameters, "name", "");
		this.optional = (0, _pvutils.getParametersValue)(parameters, "optional", false);
		this.value = (0, _pvutils.getParametersValue)(parameters, "value", new Any());
		this.local = (0, _pvutils.getParametersValue)(parameters, "local", false); // Could local or global array to store elements
	}
	//**********************************************************************************
	;
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of special ASN.1 schema type RawData
	//**************************************************************************************
	/**
	 * @description Special class providing ability to have "toBER/fromBER" for raw ArrayBuffer
	 */
	
	
	var RawData = exports.RawData = function () {
		//**********************************************************************************
		/**
	  * Constructor for "Repeated" class
	  * @param {Object} [parameters={}]
	  * @property {string} [name]
	  * @property {boolean} [optional]
	  */
		function RawData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RawData);
	
			this.data = (0, _pvutils.getParametersValue)(parameters, "data", new ArrayBuffer(0));
		}
		//**********************************************************************************
		/**
	  * Base function for converting block from BER encoded array of bytes
	  * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	  * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	  * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	  * @returns {number} Offset after least decoded byte
	  */
	
	
		_createClass(RawData, [{
			key: "fromBER",
			value: function fromBER(inputBuffer, inputOffset, inputLength) {
				this.data = inputBuffer.slice(inputOffset, inputLength);
			}
			//**********************************************************************************
			/**
	   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
	   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes
	   * @returns {ArrayBuffer}
	   */
	
		}, {
			key: "toBER",
			value: function toBER() {
				var sizeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				return this.data;
			}
			//**********************************************************************************
	
		}]);
	
		return RawData;
	}();
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Major ASN.1 BER decoding function
	//**************************************************************************************
	/**
	 * Internal library function for decoding ASN.1 BER
	 * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array
	 * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started
	 * @param {!number} inputLength Maximum length of array of bytes which can be using in this function
	 * @returns {{offset: number, result: Object}}
	 */
	
	
	function LocalFromBER(inputBuffer, inputOffset, inputLength) {
		var incomingOffset = inputOffset; // Need to store initial offset since "inputOffset" is changing in the function
	
		//region Local function changing a type for ASN.1 classes
		function localChangeType(inputObject, newType) {
			if (inputObject instanceof newType) return inputObject;
	
			var newObject = new newType();
			newObject.idBlock = inputObject.idBlock;
			newObject.lenBlock = inputObject.lenBlock;
			newObject.warnings = inputObject.warnings;
			//noinspection JSCheckFunctionSignatures
			newObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);
	
			return newObject;
		}
		//endregion
	
		//region Create a basic ASN.1 type since we need to return errors and warnings from the function
		var returnObject = new BaseBlock({}, Object);
		//endregion
	
		//region Basic check for parameters
		if ((0, _pvutils.checkBufferParams)(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false) {
			returnObject.error = "Wrong input parameters";
			return {
				offset: -1,
				result: returnObject
			};
		}
		//endregion
	
		//region Getting Uint8Array from ArrayBuffer
		var intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);
		//endregion
	
		//region Initial checks
		if (intBuffer.length === 0) {
			this.error = "Zero buffer length";
			return {
				offset: -1,
				result: returnObject
			};
		}
		//endregion
	
		//region Decode indentifcation block of ASN.1 BER structure
		var resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
		returnObject.warnings.concat(returnObject.idBlock.warnings);
		if (resultOffset === -1) {
			returnObject.error = returnObject.idBlock.error;
			return {
				offset: -1,
				result: returnObject
			};
		}
	
		inputOffset = resultOffset;
		inputLength -= returnObject.idBlock.blockLength;
		//endregion
	
		//region Decode length block of ASN.1 BER structure
		resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
		returnObject.warnings.concat(returnObject.lenBlock.warnings);
		if (resultOffset === -1) {
			returnObject.error = returnObject.lenBlock.error;
			return {
				offset: -1,
				result: returnObject
			};
		}
	
		inputOffset = resultOffset;
		inputLength -= returnObject.lenBlock.blockLength;
		//endregion
	
		//region Check for usign indefinite length form in encoding for primitive types
		if (returnObject.idBlock.isConstructed === false && returnObject.lenBlock.isIndefiniteForm === true) {
			returnObject.error = "Indefinite length form used for primitive encoding form";
			return {
				offset: -1,
				result: returnObject
			};
		}
		//endregion
	
		//region Switch ASN.1 block type
		var newASN1Type = BaseBlock;
	
		switch (returnObject.idBlock.tagClass) {
			//region UNIVERSAL
			case 1:
				//region Check for reserved tag numbers
				if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
					returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
					return {
						offset: -1,
						result: returnObject
					};
				}
				//endregion
	
				switch (returnObject.idBlock.tagNumber) {
					//region EndOfContent type
					case 0:
						//region Check for EndOfContent type
						if (returnObject.idBlock.isConstructed === true && returnObject.lenBlock.length > 0) {
							returnObject.error = "Type [UNIVERSAL 0] is reserved";
							return {
								offset: -1,
								result: returnObject
							};
						}
						//endregion
	
						newASN1Type = EndOfContent;
	
						break;
					//endregion
					//region Boolean type
					case 1:
						newASN1Type = Boolean;
						break;
					//endregion
					//region Integer type
					case 2:
						newASN1Type = Integer;
						break;
					//endregion
					//region BitString type
					case 3:
						newASN1Type = BitString;
						break;
					//endregion
					//region OctetString type
					case 4:
						newASN1Type = OctetString;
						break;
					//endregion
					//region Null type
					case 5:
						newASN1Type = Null;
						break;
					//endregion
					//region OBJECT IDENTIFIER type
					case 6:
						newASN1Type = ObjectIdentifier;
						break;
					//endregion
					//region Enumerated type
					case 10:
						newASN1Type = Enumerated;
						break;
					//endregion
					//region Utf8String type
					case 12:
						newASN1Type = Utf8String;
						break;
					//endregion
					//region Time type
					case 14:
						newASN1Type = TIME;
						break;
					//endregion
					//region ASN.1 reserved type
					case 15:
						returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
						return {
							offset: -1,
							result: returnObject
						};
					//endregion
					//region Sequence type
					case 16:
						newASN1Type = Sequence;
						break;
					//endregion
					//region Set type
					case 17:
						newASN1Type = Set;
						break;
					//endregion
					//region NumericString type
					case 18:
						newASN1Type = NumericString;
						break;
					//endregion
					//region PrintableString type
					case 19:
						newASN1Type = PrintableString;
						break;
					//endregion
					//region TeletexString type
					case 20:
						newASN1Type = TeletexString;
						break;
					//endregion
					//region VideotexString type
					case 21:
						newASN1Type = VideotexString;
						break;
					//endregion
					//region IA5String type
					case 22:
						newASN1Type = IA5String;
						break;
					//endregion
					//region UTCTime type
					case 23:
						newASN1Type = UTCTime;
						break;
					//endregion
					//region GeneralizedTime type
					case 24:
						newASN1Type = GeneralizedTime;
						break;
					//endregion
					//region GraphicString type
					case 25:
						newASN1Type = GraphicString;
						break;
					//endregion
					//region VisibleString type
					case 26:
						newASN1Type = VisibleString;
						break;
					//endregion
					//region GeneralString type
					case 27:
						newASN1Type = GeneralString;
						break;
					//endregion
					//region UniversalString type
					case 28:
						newASN1Type = UniversalString;
						break;
					//endregion
					//region CharacterString type
					case 29:
						newASN1Type = CharacterString;
						break;
					//endregion
					//region BmpString type
					case 30:
						newASN1Type = BmpString;
						break;
					//endregion
					//region DATE type
					case 31:
						newASN1Type = DATE;
						break;
					//endregion
					//region TimeOfDay type
					case 32:
						newASN1Type = TimeOfDay;
						break;
					//endregion
					//region Date-Time type
					case 33:
						newASN1Type = DateTime;
						break;
					//endregion
					//region Duration type
					case 34:
						newASN1Type = Duration;
						break;
					//endregion
					//region default
					default:
						{
							var newObject = void 0;
	
							if (returnObject.idBlock.isConstructed === true) newObject = new Constructed();else newObject = new Primitive();
	
							newObject.idBlock = returnObject.idBlock;
							newObject.lenBlock = returnObject.lenBlock;
							newObject.warnings = returnObject.warnings;
	
							returnObject = newObject;
	
							resultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);
						}
					//endregion
				}
				break;
			//endregion
			//region All other tag classes
			case 2: // APPLICATION
			case 3: // CONTEXT-SPECIFIC
			case 4: // PRIVATE
			default:
				{
					if (returnObject.idBlock.isConstructed === true) newASN1Type = Constructed;else newASN1Type = Primitive;
				}
			//endregion
		}
		//endregion
	
		//region Change type and perform BER decoding
		returnObject = localChangeType(returnObject, newASN1Type);
		resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm === true ? inputLength : returnObject.lenBlock.length);
		//endregion
	
		//region Coping incoming buffer for entire ASN.1 block
		returnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);
		//endregion
	
		return {
			offset: resultOffset,
			result: returnObject
		};
	}
	//**************************************************************************************
	/**
	 * Major function for decoding ASN.1 BER array into internal library structuries
	 * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes
	 */
	function fromBER(inputBuffer) {
		if (inputBuffer.byteLength === 0) {
			var result = new BaseBlock({}, Object);
			result.error = "Input buffer has zero length";
	
			return {
				offset: -1,
				result: result
			};
		}
	
		return LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);
	}
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Major scheme verification function
	//**************************************************************************************
	/**
	 * Compare of two ASN.1 object trees
	 * @param {!Object} root Root of input ASN.1 object tree
	 * @param {!Object} inputData Input ASN.1 object tree
	 * @param {!Object} inputSchema Input ASN.1 schema to compare with
	 * @return {{verified: boolean}|{verified:boolean, result: Object}}
	 */
	function compareSchema(root, inputData, inputSchema) {
		//region Special case for Choice schema element type
		if (inputSchema instanceof Choice) {
			var choiceResult = false;
	
			for (var j = 0; j < inputSchema.value.length; j++) {
				var result = compareSchema(root, inputData, inputSchema.value[j]);
				if (result.verified === true) {
					return {
						verified: true,
						result: root
					};
				}
			}
	
			if (choiceResult === false) {
				var _result = {
					verified: false,
					result: {
						error: "Wrong values for Choice type"
					}
				};
	
				if (inputSchema.hasOwnProperty("name")) _result.name = inputSchema.name;
	
				return _result;
			}
		}
		//endregion
	
		//region Special case for Any schema element type
		if (inputSchema instanceof Any) {
			//region Add named component of ASN.1 schema
			if (inputSchema.hasOwnProperty("name")) root[inputSchema.name] = inputData;
			//endregion
	
			return {
				verified: true,
				result: root
			};
		}
		//endregion
	
		//region Initial check
		if (root instanceof Object === false) {
			return {
				verified: false,
				result: { error: "Wrong root object" }
			};
		}
	
		if (inputData instanceof Object === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 data" }
			};
		}
	
		if (inputSchema instanceof Object === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		if ("idBlock" in inputSchema === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
		//endregion
	
		//region Comparing idBlock properties in ASN.1 data and ASN.1 schema
		//region Encode and decode ASN.1 schema idBlock
		/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>
		if ("fromBER" in inputSchema.idBlock === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		if ("toBER" in inputSchema.idBlock === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		var encodedId = inputSchema.idBlock.toBER(false);
		if (encodedId.byteLength === 0) {
			return {
				verified: false,
				result: { error: "Error encoding idBlock for ASN.1 schema" }
			};
		}
	
		var decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);
		if (decodedOffset === -1) {
			return {
				verified: false,
				result: { error: "Error decoding idBlock for ASN.1 schema" }
			};
		}
		//endregion
	
		//region tagClass
		if (inputSchema.idBlock.hasOwnProperty("tagClass") === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
			return {
				verified: false,
				result: root
			};
		}
		//endregion
		//region tagNumber
		if (inputSchema.idBlock.hasOwnProperty("tagNumber") === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
			return {
				verified: false,
				result: root
			};
		}
		//endregion
		//region isConstructed
		if (inputSchema.idBlock.hasOwnProperty("isConstructed") === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema" }
			};
		}
	
		if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
			return {
				verified: false,
				result: root
			};
		}
		//endregion
		//region isHexOnly
		if ("isHexOnly" in inputSchema.idBlock === false) // Since 'isHexOnly' is an inhirited property
			{
				return {
					verified: false,
					result: { error: "Wrong ASN.1 schema" }
				};
			}
	
		if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
			return {
				verified: false,
				result: root
			};
		}
		//endregion
		//region valueHex
		if (inputSchema.idBlock.isHexOnly === true) {
			if ("valueHex" in inputSchema.idBlock === false) // Since 'valueHex' is an inhirited property
				{
					return {
						verified: false,
						result: { error: "Wrong ASN.1 schema" }
					};
				}
	
			var schemaView = new Uint8Array(inputSchema.idBlock.valueHex);
			var asn1View = new Uint8Array(inputData.idBlock.valueHex);
	
			if (schemaView.length !== asn1View.length) {
				return {
					verified: false,
					result: root
				};
			}
	
			for (var i = 0; i < schemaView.length; i++) {
				if (schemaView[i] !== asn1View[1]) {
					return {
						verified: false,
						result: root
					};
				}
			}
		}
		//endregion
		//endregion
	
		//region Add named component of ASN.1 schema
		if (inputSchema.hasOwnProperty("name")) {
			inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
			if (inputSchema.name !== "") root[inputSchema.name] = inputData;
		}
		//endregion
	
		//region Getting next ASN.1 block for comparition
		if (inputSchema.idBlock.isConstructed === true) {
			var admission = 0;
			var _result2 = { verified: false };
	
			var maxLength = inputSchema.valueBlock.value.length;
	
			if (maxLength > 0) {
				if (inputSchema.valueBlock.value[0] instanceof Repeated) maxLength = inputData.valueBlock.value.length;
			}
	
			//region Special case when constructive value has no elements
			if (maxLength === 0) {
				return {
					verified: true,
					result: root
				};
			}
			//endregion
	
			//region Special case when "inputData" has no values and "inputSchema" has all optional values
			if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {
				var _optional = true;
	
				for (var _i8 = 0; _i8 < inputSchema.valueBlock.value.length; _i8++) {
					_optional = _optional && (inputSchema.valueBlock.value[_i8].optional || false);
				}if (_optional === true) {
					return {
						verified: true,
						result: root
					};
				}
	
				//region Delete early added name of block
				if (inputSchema.hasOwnProperty("name")) {
					inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
					if (inputSchema.name !== "") delete root[inputSchema.name];
				}
				//endregion
	
				root.error = "Inconsistent object length";
	
				return {
					verified: false,
					result: root
				};
			}
			//endregion
	
			for (var _i9 = 0; _i9 < maxLength; _i9++) {
				//region Special case when there is an "optional" element of ASN.1 schema at the end
				if (_i9 - admission >= inputData.valueBlock.value.length) {
					if (inputSchema.valueBlock.value[_i9].optional === false) {
						var _result3 = {
							verified: false,
							result: root
						};
	
						root.error = "Inconsistent length between ASN.1 data and schema";
	
						//region Delete early added name of block
						if (inputSchema.hasOwnProperty("name")) {
							inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
							if (inputSchema.name !== "") {
								delete root[inputSchema.name];
								_result3.name = inputSchema.name;
							}
						}
						//endregion
	
						return _result3;
					}
				}
				//endregion
				else {
						//region Special case for Repeated type of ASN.1 schema element
						if (inputSchema.valueBlock.value[0] instanceof Repeated) {
							_result2 = compareSchema(root, inputData.valueBlock.value[_i9], inputSchema.valueBlock.value[0].value);
							if (_result2.verified === false) {
								if (inputSchema.valueBlock.value[0].optional === true) admission++;else {
									//region Delete early added name of block
									if (inputSchema.hasOwnProperty("name")) {
										inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
										if (inputSchema.name !== "") delete root[inputSchema.name];
									}
									//endregion
	
									return _result2;
								}
							}
	
							if ("name" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {
								var arrayRoot = {};
	
								if ("local" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local === true) arrayRoot = inputData;else arrayRoot = root;
	
								if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined") arrayRoot[inputSchema.valueBlock.value[0].name] = [];
	
								arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[_i9]);
							}
						}
						//endregion
						else {
								_result2 = compareSchema(root, inputData.valueBlock.value[_i9 - admission], inputSchema.valueBlock.value[_i9]);
								if (_result2.verified === false) {
									if (inputSchema.valueBlock.value[_i9].optional === true) admission++;else {
										//region Delete early added name of block
										if (inputSchema.hasOwnProperty("name")) {
											inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
											if (inputSchema.name !== "") delete root[inputSchema.name];
										}
										//endregion
	
										return _result2;
									}
								}
							}
					}
			}
	
			if (_result2.verified === false) // The situation may take place if last element is "optional" and verification failed
				{
					var _result4 = {
						verified: false,
						result: root
					};
	
					//region Delete early added name of block
					if (inputSchema.hasOwnProperty("name")) {
						inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
						if (inputSchema.name !== "") {
							delete root[inputSchema.name];
							_result4.name = inputSchema.name;
						}
					}
					//endregion
	
					return _result4;
				}
	
			return {
				verified: true,
				result: root
			};
		}
		//endregion
		//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)
		if ("primitiveSchema" in inputSchema && "valueHex" in inputData.valueBlock) {
			//region Decoding of raw ASN.1 data
			var asn1 = fromBER(inputData.valueBlock.valueHex);
			if (asn1.offset === -1) {
				var _result5 = {
					verified: false,
					result: asn1.result
				};
	
				//region Delete early added name of block
				if (inputSchema.hasOwnProperty("name")) {
					inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, "");
					if (inputSchema.name !== "") {
						delete root[inputSchema.name];
						_result5.name = inputSchema.name;
					}
				}
				//endregion
	
				return _result5;
			}
			//endregion
	
			return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
		}
	
		return {
			verified: true,
			result: root
		};
		//endregion
	}
	//**************************************************************************************
	//noinspection JSUnusedGlobalSymbols
	/**
	 * ASN.1 schema verification for ArrayBuffer data
	 * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data
	 * @param {!Object} inputSchema Input ASN.1 schema to verify against to
	 * @return {{verified: boolean}|{verified:boolean, result: Object}}
	 */
	function verifySchema(inputBuffer, inputSchema) {
		//region Initial check
		if (inputSchema instanceof Object === false) {
			return {
				verified: false,
				result: { error: "Wrong ASN.1 schema type" }
			};
		}
		//endregion
	
		//region Decoding of raw ASN.1 data
		var asn1 = fromBER(inputBuffer);
		if (asn1.offset === -1) {
			return {
				verified: false,
				result: asn1.result
			};
		}
		//endregion
	
		//region Compare ASN.1 struct with input schema
		return compareSchema(asn1.result, asn1.result, inputSchema);
		//endregion
	}
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Major function converting JSON to ASN.1 objects
	//**************************************************************************************
	//noinspection JSUnusedGlobalSymbols
	/**
	 * Converting from JSON to ASN.1 objects
	 * @param {string|Object} json JSON string or object to convert to ASN.1 objects
	 */
	function fromJSON(json) {}
	// TODO Implement
	
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//# sourceMappingURL=asn1.js.map

/***/ }),
/* 375 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.getUTCDate = getUTCDate;
	exports.getParametersValue = getParametersValue;
	exports.bufferToHexCodes = bufferToHexCodes;
	exports.checkBufferParams = checkBufferParams;
	exports.utilFromBase = utilFromBase;
	exports.utilToBase = utilToBase;
	exports.utilConcatBuf = utilConcatBuf;
	exports.utilConcatView = utilConcatView;
	exports.utilDecodeTC = utilDecodeTC;
	exports.utilEncodeTC = utilEncodeTC;
	exports.isEqualBuffer = isEqualBuffer;
	exports.padNumber = padNumber;
	exports.toBase64 = toBase64;
	exports.fromBase64 = fromBase64;
	exports.arrayBufferToString = arrayBufferToString;
	exports.stringToArrayBuffer = stringToArrayBuffer;
	exports.nearestPowerOf2 = nearestPowerOf2;
	exports.generatorsDriver = generatorsDriver;
	//**************************************************************************************
	/**
	 * Making UTC date from local date
	 * @param {Date} date Date to convert from
	 * @returns {Date}
	 */
	function getUTCDate(date) {
		return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
	}
	//**************************************************************************************
	/**
	 * Get value for input parameters, or set a default value
	 * @param {Object} parameters
	 * @param {string} name
	 * @param defaultValue
	 */
	function getParametersValue(parameters, name, defaultValue) {
		if (parameters instanceof Object === false) return defaultValue;
	
		if (name in parameters) return parameters[name];
	
		return defaultValue;
	}
	//**************************************************************************************
	/**
	 * Converts "ArrayBuffer" into a hexdecimal string
	 * @param {ArrayBuffer} inputBuffer
	 * @param {number} [inputOffset=0]
	 * @param {number} [inputLength=inputBuffer.byteLength]
	 * @returns {string}
	 */
	function bufferToHexCodes(inputBuffer) {
		var inputOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
		var inputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : inputBuffer.byteLength;
	
		var result = "";
	
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;
	
		try {
			for (var _iterator = new Uint8Array(inputBuffer, inputOffset, inputLength)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var item = _step.value;
	
				var str = item.toString(16).toUpperCase();
				result = result + (str.length === 1 ? "0" : "") + str;
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	
		return result;
	}
	//**************************************************************************************
	/**
	 * Check input "ArrayBuffer" for common functions
	 * @param {LocalBaseBlock} baseBlock
	 * @param {ArrayBuffer} inputBuffer
	 * @param {number} inputOffset
	 * @param {number} inputLength
	 * @returns {boolean}
	 */
	function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
		if (inputBuffer instanceof ArrayBuffer === false) {
			baseBlock.error = "Wrong parameter: inputBuffer must be \"ArrayBuffer\"";
			return false;
		}
	
		if (inputBuffer.byteLength === 0) {
			baseBlock.error = "Wrong parameter: inputBuffer has zero length";
			return false;
		}
	
		if (inputOffset < 0) {
			baseBlock.error = "Wrong parameter: inputOffset less than zero";
			return false;
		}
	
		if (inputLength < 0) {
			baseBlock.error = "Wrong parameter: inputLength less than zero";
			return false;
		}
	
		if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
			baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
			return false;
		}
	
		return true;
	}
	//**************************************************************************************
	/**
	 * Convert number from 2^base to 2^10
	 * @param {Uint8Array} inputBuffer
	 * @param {number} inputBase
	 * @returns {number}
	 */
	function utilFromBase(inputBuffer, inputBase) {
		var result = 0;
	
		for (var i = inputBuffer.length - 1; i >= 0; i--) {
			result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);
		}return result;
	}
	//**************************************************************************************
	/**
	 * Convert number from 2^10 to 2^base
	 * @param {!number} value The number to convert
	 * @param {!number} base The base for 2^base
	 * @param {number} [reserved=0] Pre-defined number of bytes in output array (-1 = limited by function itself)
	 * @returns {ArrayBuffer}
	 */
	function utilToBase(value, base) {
		var reserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	
		var internalReserved = reserved || -1;
		var internalValue = value;
	
		var result = 0;
		var biggest = Math.pow(2, base);
	
		for (var i = 1; i < 8; i++) {
			if (value < biggest) {
				var retBuf = void 0;
	
				if (internalReserved < 0) {
					retBuf = new ArrayBuffer(i);
					result = i;
				} else {
					if (internalReserved < i) return new ArrayBuffer(0);
	
					retBuf = new ArrayBuffer(internalReserved);
	
					result = internalReserved;
				}
	
				var retView = new Uint8Array(retBuf);
	
				for (var j = i - 1; j >= 0; j--) {
					var basis = Math.pow(2, j * base);
	
					retView[result - j - 1] = Math.floor(internalValue / basis);
					internalValue -= retView[result - j - 1] * basis;
				}
	
				return retBuf;
			}
	
			biggest *= Math.pow(2, base);
		}
	
		return new ArrayBuffer(0);
	}
	//**************************************************************************************
	/**
	 * Concatenate two ArrayBuffers
	 * @param {...ArrayBuffer} buffers Set of ArrayBuffer
	 */
	function utilConcatBuf() {
		//region Initial variables
		var outputLength = 0;
		var prevLength = 0;
		//endregion
	
		//region Calculate output length
	
		for (var _len = arguments.length, buffers = Array(_len), _key = 0; _key < _len; _key++) {
			buffers[_key] = arguments[_key];
		}
	
		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;
	
		try {
			for (var _iterator2 = buffers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var buffer = _step2.value;
	
				outputLength += buffer.byteLength;
			} //endregion
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2.return) {
					_iterator2.return();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}
	
		var retBuf = new ArrayBuffer(outputLength);
		var retView = new Uint8Array(retBuf);
	
		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;
	
		try {
			for (var _iterator3 = buffers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var _buffer = _step3.value;
	
				retView.set(new Uint8Array(_buffer), prevLength);
				prevLength += _buffer.byteLength;
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}
	
		return retBuf;
	}
	//**************************************************************************************
	/**
	 * Concatenate two Uint8Array
	 * @param {...Uint8Array} views Set of Uint8Array
	 */
	function utilConcatView() {
		//region Initial variables
		var outputLength = 0;
		var prevLength = 0;
		//endregion
	
		//region Calculate output length
	
		for (var _len2 = arguments.length, views = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			views[_key2] = arguments[_key2];
		}
	
		var _iteratorNormalCompletion4 = true;
		var _didIteratorError4 = false;
		var _iteratorError4 = undefined;
	
		try {
			for (var _iterator4 = views[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
				var view = _step4.value;
	
				outputLength += view.length;
			} //endregion
		} catch (err) {
			_didIteratorError4 = true;
			_iteratorError4 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion4 && _iterator4.return) {
					_iterator4.return();
				}
			} finally {
				if (_didIteratorError4) {
					throw _iteratorError4;
				}
			}
		}
	
		var retBuf = new ArrayBuffer(outputLength);
		var retView = new Uint8Array(retBuf);
	
		var _iteratorNormalCompletion5 = true;
		var _didIteratorError5 = false;
		var _iteratorError5 = undefined;
	
		try {
			for (var _iterator5 = views[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
				var _view = _step5.value;
	
				retView.set(_view, prevLength);
				prevLength += _view.length;
			}
		} catch (err) {
			_didIteratorError5 = true;
			_iteratorError5 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion5 && _iterator5.return) {
					_iterator5.return();
				}
			} finally {
				if (_didIteratorError5) {
					throw _iteratorError5;
				}
			}
		}
	
		return retView;
	}
	//**************************************************************************************
	/**
	 * Decoding of "two complement" values
	 * The function must be called in scope of instance of "hexBlock" class ("valueHex" and "warnings" properties must be present)
	 * @returns {number}
	 */
	function utilDecodeTC() {
		var buf = new Uint8Array(this.valueHex);
	
		if (this.valueHex.byteLength >= 2) {
			//noinspection JSBitwiseOperatorUsage
			var condition1 = buf[0] === 0xFF && buf[1] & 0x80;
			var condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;
	
			if (condition1 || condition2) this.warnings.push("Needlessly long format");
		}
	
		//region Create big part of the integer
		var bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
		var bigIntView = new Uint8Array(bigIntBuffer);
		for (var i = 0; i < this.valueHex.byteLength; i++) {
			bigIntView[i] = 0;
		}bigIntView[0] = buf[0] & 0x80; // mask only the biggest bit
	
		var bigInt = utilFromBase(bigIntView, 8);
		//endregion
	
		//region Create small part of the integer
		var smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
		var smallIntView = new Uint8Array(smallIntBuffer);
		for (var j = 0; j < this.valueHex.byteLength; j++) {
			smallIntView[j] = buf[j];
		}smallIntView[0] &= 0x7F; // mask biggest bit
	
		var smallInt = utilFromBase(smallIntView, 8);
		//endregion
	
		return smallInt - bigInt;
	}
	//**************************************************************************************
	/**
	 * Encode integer value to "two complement" format
	 * @param {number} value Value to encode
	 * @returns {ArrayBuffer}
	 */
	function utilEncodeTC(value) {
		var modValue = value < 0 ? value * -1 : value;
		var bigInt = 128;
	
		for (var i = 1; i < 8; i++) {
			if (modValue <= bigInt) {
				if (value < 0) {
					var smallInt = bigInt - modValue;
	
					var _retBuf = utilToBase(smallInt, 8, i);
					var _retView = new Uint8Array(_retBuf);
	
					_retView[0] |= 0x80;
	
					return _retBuf;
				}
	
				var retBuf = utilToBase(modValue, 8, i);
				var retView = new Uint8Array(retBuf);
	
				//noinspection JSBitwiseOperatorUsage
				if (retView[0] & 0x80) {
					//noinspection JSCheckFunctionSignatures
					var tempBuf = retBuf.slice(0);
					var tempView = new Uint8Array(tempBuf);
	
					retBuf = new ArrayBuffer(retBuf.byteLength + 1);
					retView = new Uint8Array(retBuf);
	
					for (var k = 0; k < tempBuf.byteLength; k++) {
						retView[k + 1] = tempView[k];
					}retView[0] = 0x00;
				}
	
				return retBuf;
			}
	
			bigInt *= Math.pow(2, 8);
		}
	
		return new ArrayBuffer(0);
	}
	//**************************************************************************************
	/**
	 * Compare two array buffers
	 * @param {!ArrayBuffer} inputBuffer1
	 * @param {!ArrayBuffer} inputBuffer2
	 * @returns {boolean}
	 */
	function isEqualBuffer(inputBuffer1, inputBuffer2) {
		if (inputBuffer1.byteLength !== inputBuffer2.byteLength) return false;
	
		var view1 = new Uint8Array(inputBuffer1);
		var view2 = new Uint8Array(inputBuffer2);
	
		for (var i = 0; i < view1.length; i++) {
			if (view1[i] !== view2[i]) return false;
		}
	
		return true;
	}
	//**************************************************************************************
	/**
	 * Pad input number with leade "0" if needed
	 * @returns {string}
	 * @param {number} inputNumber
	 * @param {number} fullLength
	 */
	function padNumber(inputNumber, fullLength) {
		var str = inputNumber.toString(10);
		var dif = fullLength - str.length;
	
		var padding = new Array(dif);
		for (var i = 0; i < dif; i++) {
			padding[i] = "0";
		}var paddingString = padding.join("");
	
		return paddingString.concat(str);
	}
	//**************************************************************************************
	var base64Template = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	var base64UrlTemplate = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";
	//**************************************************************************************
	/**
	 * Encode string into BASE64 (or "base64url")
	 * @param {string} input
	 * @param {boolean} useUrlTemplate If "true" then output would be encoded using "base64url"
	 * @param {boolean} skipPadding Skip BASE-64 padding or not
	 * @param {boolean} skipLeadingZeros Skip leading zeros in input data or not
	 * @returns {string}
	 */
	function toBase64(input) {
		var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		var skipPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		var skipLeadingZeros = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
		var i = 0;
	
		var flag1 = 0;
		var flag2 = 0;
	
		var output = "";
	
		var template = useUrlTemplate ? base64UrlTemplate : base64Template;
	
		if (skipLeadingZeros) {
			var nonZeroPosition = 0;
	
			for (var _i = 0; _i < input.length; _i++) {
				if (input.charCodeAt(_i) !== 0) {
					nonZeroPosition = _i;
					break;
				}
			}
	
			input = input.slice(nonZeroPosition);
		}
	
		while (i < input.length) {
			var chr1 = input.charCodeAt(i++);
			if (i >= input.length) flag1 = 1;
			var chr2 = input.charCodeAt(i++);
			if (i >= input.length) flag2 = 1;
			var chr3 = input.charCodeAt(i++);
	
			var enc1 = chr1 >> 2;
			var enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;
			var enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;
			var enc4 = chr3 & 0x3F;
	
			if (flag1 === 1) enc3 = enc4 = 64;else {
				if (flag2 === 1) enc4 = 64;
			}
	
			if (skipPadding) {
				if (enc3 === 64) output += "" + template.charAt(enc1) + template.charAt(enc2);else {
					if (enc4 === 64) output += "" + template.charAt(enc1) + template.charAt(enc2) + template.charAt(enc3);else output += "" + template.charAt(enc1) + template.charAt(enc2) + template.charAt(enc3) + template.charAt(enc4);
				}
			} else output += "" + template.charAt(enc1) + template.charAt(enc2) + template.charAt(enc3) + template.charAt(enc4);
		}
	
		return output;
	}
	//**************************************************************************************
	/**
	 * Decode string from BASE64 (or "base64url")
	 * @param {string} input
	 * @param {boolean} [useUrlTemplate=false] If "true" then output would be encoded using "base64url"
	 * @param {boolean} [cutTailZeros=false] If "true" then cut tailing zeroz from function result
	 * @returns {string}
	 */
	function fromBase64(input) {
		var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		var cutTailZeros = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
		var template = useUrlTemplate ? base64UrlTemplate : base64Template;
	
		//region Aux functions
		function indexof(toSearch) {
			for (var _i2 = 0; _i2 < 64; _i2++) {
				if (template.charAt(_i2) === toSearch) return _i2;
			}
	
			return 64;
		}
	
		function test(incoming) {
			return incoming === 64 ? 0x00 : incoming;
		}
		//endregion
	
		var i = 0;
	
		var output = "";
	
		while (i < input.length) {
			var enc1 = indexof(input.charAt(i++));
			var enc2 = i >= input.length ? 0x00 : indexof(input.charAt(i++));
			var enc3 = i >= input.length ? 0x00 : indexof(input.charAt(i++));
			var enc4 = i >= input.length ? 0x00 : indexof(input.charAt(i++));
	
			var chr1 = test(enc1) << 2 | test(enc2) >> 4;
			var chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;
			var chr3 = (test(enc3) & 0x03) << 6 | test(enc4);
	
			output += String.fromCharCode(chr1);
	
			if (enc3 !== 64) output += String.fromCharCode(chr2);
	
			if (enc4 !== 64) output += String.fromCharCode(chr3);
		}
	
		if (cutTailZeros) {
			var outputLength = output.length;
			var nonZeroStart = -1;
	
			for (var _i3 = outputLength - 1; _i3 >= 0; _i3--) {
				if (output.charCodeAt(_i3) !== 0) {
					nonZeroStart = _i3;
					break;
				}
			}
	
			if (nonZeroStart !== -1) output = output.slice(0, nonZeroStart + 1);
		}
	
		return output;
	}
	//**************************************************************************************
	function arrayBufferToString(buffer) {
		var resultString = "";
		var view = new Uint8Array(buffer);
	
		var _iteratorNormalCompletion6 = true;
		var _didIteratorError6 = false;
		var _iteratorError6 = undefined;
	
		try {
			for (var _iterator6 = view[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
				var element = _step6.value;
	
				resultString = resultString + String.fromCharCode(element);
			}
		} catch (err) {
			_didIteratorError6 = true;
			_iteratorError6 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion6 && _iterator6.return) {
					_iterator6.return();
				}
			} finally {
				if (_didIteratorError6) {
					throw _iteratorError6;
				}
			}
		}
	
		return resultString;
	}
	//**************************************************************************************
	function stringToArrayBuffer(str) {
		var stringLength = str.length;
	
		var resultBuffer = new ArrayBuffer(stringLength);
		var resultView = new Uint8Array(resultBuffer);
	
		for (var i = 0; i < stringLength; i++) {
			resultView[i] = str.charCodeAt(i);
		}return resultBuffer;
	}
	//**************************************************************************************
	var log2 = Math.log(2);
	//**************************************************************************************
	/**
	 * Get nearest to input length power of 2
	 * @param {number} length Current length of existing array
	 * @returns {number}
	 */
	function nearestPowerOf2(length) {
		var base = Math.log(length) / log2;
	
		var floor = Math.floor(base);
		var round = Math.round(base);
	
		return floor === round ? floor : round;
	}
	//**************************************************************************************
	//region GeneratorDriver's related functions
	//**************************************************************************************
	var isGenerator = function isGenerator(generator) {
		if (typeof generator === "undefined") return false;
	
		return typeof generator.next === "function" && typeof generator.throw === "function";
	};
	//**************************************************************************************
	var isGeneratorFunction = function isGeneratorFunction(generator) {
		if (typeof generator === "undefined") return false;
	
		var constructor = generator.constructor;
	
		if (!constructor) return false;
	
		if (constructor.name === "GeneratorFunction" || constructor.displayName === "GeneratorFunction") return true;
	
		return isGenerator(generator);
	};
	//**************************************************************************************
	/**
	 * Simple "generator's driver" inspired by "https://github.com/tj/co".
	 * @param {Generator|GeneratorFunction} generatorInstance
	 * @returns {Promise}
	 */
	function generatorsDriver(generatorInstance) {
		//region Check that we do have instance of "Generator" as input
		if (!isGenerator(generatorInstance)) {
			if (isGeneratorFunction(generatorInstance)) generatorInstance = generatorInstance();else throw new Error("Only generator instance of generator function is a valid input");
		}
		//endregion
	
		return new Promise(function (resolve, reject) {
			/**
	   * Driver function called on "reject" status in Promises
	   * @param {*} error
	   * @returns {*}
	   */
			var onReject = function onReject(error) {
				var result = void 0;
	
				try {
					result = generatorInstance.throw(error);
				} catch (ex) {
					return reject(ex);
				}
	
				return callback(result);
			};
	
			/**
	   * Main driver function
	   * @param {*} [result]
	   * @returns {*}
	   */
			var callback = function callback(result) {
				/**
	    * @type Object
	    * @property {boolean} done
	    * @property {*} value
	    */
				var generatorResult = void 0;
	
				try {
					generatorResult = generatorInstance.next(result);
				} catch (ex) {
					return reject(ex);
				}
	
				switch (true) {
					case generatorResult.value instanceof Promise:
						return generatorResult.done ? resolve(generatorResult.value) : generatorResult.value.then(callback, onReject);
					case isGeneratorFunction(generatorResult.value):
					case isGenerator(generatorResult.value):
						return generatorResult.done ? generatorsDriver(generatorResult.value).then(function (driverResult) {
							resolve(driverResult);
						}, onReject) : generatorsDriver(generatorResult.value).then(callback, onReject);
					case typeof generatorResult.value === "function":
						generatorResult.value = generatorResult.value();
					default:
						return generatorResult.done ? resolve(generatorResult.value) : callback(generatorResult.value);
				}
			};
	
			callback();
		});
	}
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//# sourceMappingURL=utils.js.map

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	;(function () {
	
	  var object =
	     true ? exports :
	    typeof self != 'undefined' ? self : // #8: web workers
	    $.global; // #31: ExtendScript
	
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    var str = String(input);
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next str index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      str.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = str.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });
	
	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    var str = String(input).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=
	    if (str.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = str.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });
	
	}());


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TimeStampResp = exports.TimeStampReq = exports.Time = exports.TSTInfo = exports.TBSRequest = exports.SubjectDirectoryAttributes = exports.SingleResponse = exports.SignerInfo = exports.SignedData = exports.SignedAndUnsignedAttributes = exports.Signature = exports.SecretBag = exports.SafeContents = exports.SafeBag = exports.RevokedCertificate = exports.RevocationInfoChoices = undefined;
	exports.ResponseData = exports.ResponseBytes = exports.Request = exports.RelativeDistinguishedNames = exports.RecipientKeyIdentifier = exports.RecipientInfo = exports.RecipientIdentifier = exports.RecipientEncryptedKeys = exports.RecipientEncryptedKey = exports.RSASSAPSSParams = exports.RSAPublicKey = exports.RSAPrivateKey = exports.RSAESOAEPParams = exports.PublicKeyInfo = exports.PrivateKeyUsagePeriod = exports.PrivateKeyInfo = exports.PolicyQualifierInfo = exports.PolicyMappings = exports.PolicyMapping = exports.PolicyInformation = exports.PolicyConstraints = exports.PasswordRecipientinfo = exports.PKIStatusInfo = exports.PKCS8ShroudedKeyBag = exports.PFX = exports.PBKDF2Params = exports.PBES2Params = exports.OtherRevocationInfoFormat = exports.OtherRecipientInfo = exports.OtherPrimeInfo = exports.OtherKeyAttribute = exports.OtherCertificateFormat = exports.OriginatorPublicKey = exports.OriginatorInfo = exports.OriginatorIdentifierOrKey = exports.OCSPResponse = exports.OCSPRequest = exports.NameConstraints = exports.MessageImprint = exports.MacData = exports.KeyTransRecipientInfo = exports.KeyBag = exports.KeyAgreeRecipientInfo = exports.KeyAgreeRecipientIdentifier = exports.KEKRecipientInfo = exports.KEKIdentifier = exports.IssuingDistributionPoint = exports.IssuerAndSerialNumber = exports.InfoAccess = exports.GeneratorsDriver = exports.GeneralSubtree = exports.GeneralNames = exports.GeneralName = exports.Extensions = exports.Extension = exports.ExtKeyUsage = exports.EnvelopedData = exports.EncryptedData = exports.EncryptedContentInfo = exports.EncapsulatedContentInfo = exports.ECPublicKey = exports.ECPrivateKey = exports.ECCCMSSharedInfo = exports.DistributionPoint = exports.DigestInfo = exports.CryptoEngine = exports.ContentInfo = exports.CertificationRequest = exports.CertificateSet = exports.CertificateRevocationList = exports.CertificatePolicies = exports.CertificateChainValidationEngine = exports.Certificate = exports.CertID = exports.CertBag = exports.CRLDistributionPoints = exports.CRLBag = exports.BasicOCSPResponse = exports.BasicConstraints = exports.AuthorityKeyIdentifier = exports.AuthenticatedSafe = exports.AttributeTypeAndValue = exports.Attribute = exports.AltName = exports.AlgorithmIdentifier = exports.Accuracy = exports.AccessDescription = exports.kdf = exports.kdfWithCounter = exports.getHashAlgorithm = exports.getAlgorithmByOID = exports.createECDSASignatureFromCMS = exports.stringPrep = exports.createCMSECDSASignature = exports.getAlgorithmParameters = exports.getOIDByAlgorithm = exports.getRandomValues = exports.getCrypto = exports.getEngine = exports.setEngine = undefined;
	
	var _common = __webpack_require__(378);
	
	var _AccessDescription = __webpack_require__(390);
	
	var _AccessDescription2 = _interopRequireDefault(_AccessDescription);
	
	var _Accuracy = __webpack_require__(394);
	
	var _Accuracy2 = _interopRequireDefault(_Accuracy);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _AltName = __webpack_require__(395);
	
	var _AltName2 = _interopRequireDefault(_AltName);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _AttributeTypeAndValue = __webpack_require__(393);
	
	var _AttributeTypeAndValue2 = _interopRequireDefault(_AttributeTypeAndValue);
	
	var _AuthenticatedSafe = __webpack_require__(396);
	
	var _AuthenticatedSafe2 = _interopRequireDefault(_AuthenticatedSafe);
	
	var _AuthorityKeyIdentifier = __webpack_require__(423);
	
	var _AuthorityKeyIdentifier2 = _interopRequireDefault(_AuthorityKeyIdentifier);
	
	var _BasicConstraints = __webpack_require__(411);
	
	var _BasicConstraints2 = _interopRequireDefault(_BasicConstraints);
	
	var _BasicOCSPResponse = __webpack_require__(455);
	
	var _BasicOCSPResponse2 = _interopRequireDefault(_BasicOCSPResponse);
	
	var _CRLBag = __webpack_require__(428);
	
	var _CRLBag2 = _interopRequireDefault(_CRLBag);
	
	var _CRLDistributionPoints = __webpack_require__(416);
	
	var _CRLDistributionPoints2 = _interopRequireDefault(_CRLDistributionPoints);
	
	var _CertBag = __webpack_require__(405);
	
	var _CertBag2 = _interopRequireDefault(_CertBag);
	
	var _CertID = __webpack_require__(458);
	
	var _CertID2 = _interopRequireDefault(_CertID);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _CertificateChainValidationEngine = __webpack_require__(459);
	
	var _CertificateChainValidationEngine2 = _interopRequireDefault(_CertificateChainValidationEngine);
	
	var _CertificatePolicies = __webpack_require__(418);
	
	var _CertificatePolicies2 = _interopRequireDefault(_CertificatePolicies);
	
	var _CertificateRevocationList = __webpack_require__(429);
	
	var _CertificateRevocationList2 = _interopRequireDefault(_CertificateRevocationList);
	
	var _CertificateSet = __webpack_require__(434);
	
	var _CertificateSet2 = _interopRequireDefault(_CertificateSet);
	
	var _CertificationRequest = __webpack_require__(461);
	
	var _CertificationRequest2 = _interopRequireDefault(_CertificationRequest);
	
	var _ContentInfo = __webpack_require__(397);
	
	var _ContentInfo2 = _interopRequireDefault(_ContentInfo);
	
	var _CryptoEngine = __webpack_require__(381);
	
	var _CryptoEngine2 = _interopRequireDefault(_CryptoEngine);
	
	var _DigestInfo = __webpack_require__(462);
	
	var _DigestInfo2 = _interopRequireDefault(_DigestInfo);
	
	var _DistributionPoint = __webpack_require__(417);
	
	var _DistributionPoint2 = _interopRequireDefault(_DistributionPoint);
	
	var _ECCCMSSharedInfo = __webpack_require__(454);
	
	var _ECCCMSSharedInfo2 = _interopRequireDefault(_ECCCMSSharedInfo);
	
	var _ECPrivateKey = __webpack_require__(387);
	
	var _ECPrivateKey2 = _interopRequireDefault(_ECPrivateKey);
	
	var _ECPublicKey = __webpack_require__(383);
	
	var _ECPublicKey2 = _interopRequireDefault(_ECPublicKey);
	
	var _EncapsulatedContentInfo = __webpack_require__(463);
	
	var _EncapsulatedContentInfo2 = _interopRequireDefault(_EncapsulatedContentInfo);
	
	var _EncryptedContentInfo = __webpack_require__(402);
	
	var _EncryptedContentInfo2 = _interopRequireDefault(_EncryptedContentInfo);
	
	var _EncryptedData = __webpack_require__(401);
	
	var _EncryptedData2 = _interopRequireDefault(_EncryptedData);
	
	var _EnvelopedData = __webpack_require__(432);
	
	var _EnvelopedData2 = _interopRequireDefault(_EnvelopedData);
	
	var _ExtKeyUsage = __webpack_require__(425);
	
	var _ExtKeyUsage2 = _interopRequireDefault(_ExtKeyUsage);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	var _GeneralNames = __webpack_require__(413);
	
	var _GeneralNames2 = _interopRequireDefault(_GeneralNames);
	
	var _GeneralSubtree = __webpack_require__(415);
	
	var _GeneralSubtree2 = _interopRequireDefault(_GeneralSubtree);
	
	var _GeneratorsDriver = __webpack_require__(460);
	
	var _GeneratorsDriver2 = _interopRequireDefault(_GeneratorsDriver);
	
	var _InfoAccess = __webpack_require__(426);
	
	var _InfoAccess2 = _interopRequireDefault(_InfoAccess);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _IssuingDistributionPoint = __webpack_require__(412);
	
	var _IssuingDistributionPoint2 = _interopRequireDefault(_IssuingDistributionPoint);
	
	var _KEKIdentifier = __webpack_require__(450);
	
	var _KEKIdentifier2 = _interopRequireDefault(_KEKIdentifier);
	
	var _KEKRecipientInfo = __webpack_require__(449);
	
	var _KEKRecipientInfo2 = _interopRequireDefault(_KEKRecipientInfo);
	
	var _KeyAgreeRecipientIdentifier = __webpack_require__(446);
	
	var _KeyAgreeRecipientIdentifier2 = _interopRequireDefault(_KeyAgreeRecipientIdentifier);
	
	var _KeyAgreeRecipientInfo = __webpack_require__(441);
	
	var _KeyAgreeRecipientInfo2 = _interopRequireDefault(_KeyAgreeRecipientInfo);
	
	var _KeyBag = __webpack_require__(464);
	
	var _KeyBag2 = _interopRequireDefault(_KeyBag);
	
	var _KeyTransRecipientInfo = __webpack_require__(438);
	
	var _KeyTransRecipientInfo2 = _interopRequireDefault(_KeyTransRecipientInfo);
	
	var _MacData = __webpack_require__(465);
	
	var _MacData2 = _interopRequireDefault(_MacData);
	
	var _MessageImprint = __webpack_require__(466);
	
	var _MessageImprint2 = _interopRequireDefault(_MessageImprint);
	
	var _NameConstraints = __webpack_require__(414);
	
	var _NameConstraints2 = _interopRequireDefault(_NameConstraints);
	
	var _OCSPRequest = __webpack_require__(467);
	
	var _OCSPRequest2 = _interopRequireDefault(_OCSPRequest);
	
	var _OCSPResponse = __webpack_require__(471);
	
	var _OCSPResponse2 = _interopRequireDefault(_OCSPResponse);
	
	var _OriginatorIdentifierOrKey = __webpack_require__(442);
	
	var _OriginatorIdentifierOrKey2 = _interopRequireDefault(_OriginatorIdentifierOrKey);
	
	var _OriginatorInfo = __webpack_require__(433);
	
	var _OriginatorInfo2 = _interopRequireDefault(_OriginatorInfo);
	
	var _OriginatorPublicKey = __webpack_require__(443);
	
	var _OriginatorPublicKey2 = _interopRequireDefault(_OriginatorPublicKey);
	
	var _OtherCertificateFormat = __webpack_require__(473);
	
	var _OtherCertificateFormat2 = _interopRequireDefault(_OtherCertificateFormat);
	
	var _OtherKeyAttribute = __webpack_require__(448);
	
	var _OtherKeyAttribute2 = _interopRequireDefault(_OtherKeyAttribute);
	
	var _OtherPrimeInfo = __webpack_require__(389);
	
	var _OtherPrimeInfo2 = _interopRequireDefault(_OtherPrimeInfo);
	
	var _OtherRecipientInfo = __webpack_require__(452);
	
	var _OtherRecipientInfo2 = _interopRequireDefault(_OtherRecipientInfo);
	
	var _OtherRevocationInfoFormat = __webpack_require__(436);
	
	var _OtherRevocationInfoFormat2 = _interopRequireDefault(_OtherRevocationInfoFormat);
	
	var _PBES2Params = __webpack_require__(404);
	
	var _PBES2Params2 = _interopRequireDefault(_PBES2Params);
	
	var _PBKDF2Params = __webpack_require__(403);
	
	var _PBKDF2Params2 = _interopRequireDefault(_PBKDF2Params);
	
	var _PFX = __webpack_require__(474);
	
	var _PFX2 = _interopRequireDefault(_PFX);
	
	var _PKCS8ShroudedKeyBag = __webpack_require__(400);
	
	var _PKCS8ShroudedKeyBag2 = _interopRequireDefault(_PKCS8ShroudedKeyBag);
	
	var _PKIStatusInfo = __webpack_require__(479);
	
	var _PKIStatusInfo2 = _interopRequireDefault(_PKIStatusInfo);
	
	var _PasswordRecipientinfo = __webpack_require__(451);
	
	var _PasswordRecipientinfo2 = _interopRequireDefault(_PasswordRecipientinfo);
	
	var _PolicyConstraints = __webpack_require__(424);
	
	var _PolicyConstraints2 = _interopRequireDefault(_PolicyConstraints);
	
	var _PolicyInformation = __webpack_require__(419);
	
	var _PolicyInformation2 = _interopRequireDefault(_PolicyInformation);
	
	var _PolicyMapping = __webpack_require__(422);
	
	var _PolicyMapping2 = _interopRequireDefault(_PolicyMapping);
	
	var _PolicyMappings = __webpack_require__(421);
	
	var _PolicyMappings2 = _interopRequireDefault(_PolicyMappings);
	
	var _PolicyQualifierInfo = __webpack_require__(420);
	
	var _PolicyQualifierInfo2 = _interopRequireDefault(_PolicyQualifierInfo);
	
	var _PrivateKeyInfo = __webpack_require__(385);
	
	var _PrivateKeyInfo2 = _interopRequireDefault(_PrivateKeyInfo);
	
	var _PrivateKeyUsagePeriod = __webpack_require__(410);
	
	var _PrivateKeyUsagePeriod2 = _interopRequireDefault(_PrivateKeyUsagePeriod);
	
	var _PublicKeyInfo = __webpack_require__(382);
	
	var _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);
	
	var _RSAESOAEPParams = __webpack_require__(453);
	
	var _RSAESOAEPParams2 = _interopRequireDefault(_RSAESOAEPParams);
	
	var _RSAPrivateKey = __webpack_require__(388);
	
	var _RSAPrivateKey2 = _interopRequireDefault(_RSAPrivateKey);
	
	var _RSAPublicKey = __webpack_require__(384);
	
	var _RSAPublicKey2 = _interopRequireDefault(_RSAPublicKey);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	var _RecipientEncryptedKey = __webpack_require__(445);
	
	var _RecipientEncryptedKey2 = _interopRequireDefault(_RecipientEncryptedKey);
	
	var _RecipientEncryptedKeys = __webpack_require__(444);
	
	var _RecipientEncryptedKeys2 = _interopRequireDefault(_RecipientEncryptedKeys);
	
	var _RecipientIdentifier = __webpack_require__(439);
	
	var _RecipientIdentifier2 = _interopRequireDefault(_RecipientIdentifier);
	
	var _RecipientInfo = __webpack_require__(437);
	
	var _RecipientInfo2 = _interopRequireDefault(_RecipientInfo);
	
	var _RecipientKeyIdentifier = __webpack_require__(447);
	
	var _RecipientKeyIdentifier2 = _interopRequireDefault(_RecipientKeyIdentifier);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _Request = __webpack_require__(469);
	
	var _Request2 = _interopRequireDefault(_Request);
	
	var _ResponseBytes = __webpack_require__(472);
	
	var _ResponseBytes2 = _interopRequireDefault(_ResponseBytes);
	
	var _ResponseData = __webpack_require__(456);
	
	var _ResponseData2 = _interopRequireDefault(_ResponseData);
	
	var _RevocationInfoChoices = __webpack_require__(435);
	
	var _RevocationInfoChoices2 = _interopRequireDefault(_RevocationInfoChoices);
	
	var _RevokedCertificate = __webpack_require__(430);
	
	var _RevokedCertificate2 = _interopRequireDefault(_RevokedCertificate);
	
	var _SafeBag = __webpack_require__(399);
	
	var _SafeBag2 = _interopRequireDefault(_SafeBag);
	
	var _SafeContents = __webpack_require__(398);
	
	var _SafeContents2 = _interopRequireDefault(_SafeContents);
	
	var _SecretBag = __webpack_require__(431);
	
	var _SecretBag2 = _interopRequireDefault(_SecretBag);
	
	var _Signature = __webpack_require__(470);
	
	var _Signature2 = _interopRequireDefault(_Signature);
	
	var _SignedAndUnsignedAttributes = __webpack_require__(477);
	
	var _SignedAndUnsignedAttributes2 = _interopRequireDefault(_SignedAndUnsignedAttributes);
	
	var _SignedData = __webpack_require__(475);
	
	var _SignedData2 = _interopRequireDefault(_SignedData);
	
	var _SignerInfo = __webpack_require__(476);
	
	var _SignerInfo2 = _interopRequireDefault(_SignerInfo);
	
	var _SingleResponse = __webpack_require__(457);
	
	var _SingleResponse2 = _interopRequireDefault(_SingleResponse);
	
	var _SubjectDirectoryAttributes = __webpack_require__(409);
	
	var _SubjectDirectoryAttributes2 = _interopRequireDefault(_SubjectDirectoryAttributes);
	
	var _TBSRequest = __webpack_require__(468);
	
	var _TBSRequest2 = _interopRequireDefault(_TBSRequest);
	
	var _TSTInfo = __webpack_require__(478);
	
	var _TSTInfo2 = _interopRequireDefault(_TSTInfo);
	
	var _Time = __webpack_require__(407);
	
	var _Time2 = _interopRequireDefault(_Time);
	
	var _TimeStampReq = __webpack_require__(480);
	
	var _TimeStampReq2 = _interopRequireDefault(_TimeStampReq);
	
	var _TimeStampResp = __webpack_require__(481);
	
	var _TimeStampResp2 = _interopRequireDefault(_TimeStampResp);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.setEngine = _common.setEngine;
	exports.getEngine = _common.getEngine;
	exports.getCrypto = _common.getCrypto;
	exports.getRandomValues = _common.getRandomValues;
	exports.getOIDByAlgorithm = _common.getOIDByAlgorithm;
	exports.getAlgorithmParameters = _common.getAlgorithmParameters;
	exports.createCMSECDSASignature = _common.createCMSECDSASignature;
	exports.stringPrep = _common.stringPrep;
	exports.createECDSASignatureFromCMS = _common.createECDSASignatureFromCMS;
	exports.getAlgorithmByOID = _common.getAlgorithmByOID;
	exports.getHashAlgorithm = _common.getHashAlgorithm;
	exports.kdfWithCounter = _common.kdfWithCounter;
	exports.kdf = _common.kdf;
	exports.AccessDescription = _AccessDescription2.default;
	exports.Accuracy = _Accuracy2.default;
	exports.AlgorithmIdentifier = _AlgorithmIdentifier2.default;
	exports.AltName = _AltName2.default;
	exports.Attribute = _Attribute2.default;
	exports.AttributeTypeAndValue = _AttributeTypeAndValue2.default;
	exports.AuthenticatedSafe = _AuthenticatedSafe2.default;
	exports.AuthorityKeyIdentifier = _AuthorityKeyIdentifier2.default;
	exports.BasicConstraints = _BasicConstraints2.default;
	exports.BasicOCSPResponse = _BasicOCSPResponse2.default;
	exports.CRLBag = _CRLBag2.default;
	exports.CRLDistributionPoints = _CRLDistributionPoints2.default;
	exports.CertBag = _CertBag2.default;
	exports.CertID = _CertID2.default;
	exports.Certificate = _Certificate2.default;
	exports.CertificateChainValidationEngine = _CertificateChainValidationEngine2.default;
	exports.CertificatePolicies = _CertificatePolicies2.default;
	exports.CertificateRevocationList = _CertificateRevocationList2.default;
	exports.CertificateSet = _CertificateSet2.default;
	exports.CertificationRequest = _CertificationRequest2.default;
	exports.ContentInfo = _ContentInfo2.default;
	exports.CryptoEngine = _CryptoEngine2.default;
	exports.DigestInfo = _DigestInfo2.default;
	exports.DistributionPoint = _DistributionPoint2.default;
	exports.ECCCMSSharedInfo = _ECCCMSSharedInfo2.default;
	exports.ECPrivateKey = _ECPrivateKey2.default;
	exports.ECPublicKey = _ECPublicKey2.default;
	exports.EncapsulatedContentInfo = _EncapsulatedContentInfo2.default;
	exports.EncryptedContentInfo = _EncryptedContentInfo2.default;
	exports.EncryptedData = _EncryptedData2.default;
	exports.EnvelopedData = _EnvelopedData2.default;
	exports.ExtKeyUsage = _ExtKeyUsage2.default;
	exports.Extension = _Extension2.default;
	exports.Extensions = _Extensions2.default;
	exports.GeneralName = _GeneralName2.default;
	exports.GeneralNames = _GeneralNames2.default;
	exports.GeneralSubtree = _GeneralSubtree2.default;
	exports.GeneratorsDriver = _GeneratorsDriver2.default;
	exports.InfoAccess = _InfoAccess2.default;
	exports.IssuerAndSerialNumber = _IssuerAndSerialNumber2.default;
	exports.IssuingDistributionPoint = _IssuingDistributionPoint2.default;
	exports.KEKIdentifier = _KEKIdentifier2.default;
	exports.KEKRecipientInfo = _KEKRecipientInfo2.default;
	exports.KeyAgreeRecipientIdentifier = _KeyAgreeRecipientIdentifier2.default;
	exports.KeyAgreeRecipientInfo = _KeyAgreeRecipientInfo2.default;
	exports.KeyBag = _KeyBag2.default;
	exports.KeyTransRecipientInfo = _KeyTransRecipientInfo2.default;
	exports.MacData = _MacData2.default;
	exports.MessageImprint = _MessageImprint2.default;
	exports.NameConstraints = _NameConstraints2.default;
	exports.OCSPRequest = _OCSPRequest2.default;
	exports.OCSPResponse = _OCSPResponse2.default;
	exports.OriginatorIdentifierOrKey = _OriginatorIdentifierOrKey2.default;
	exports.OriginatorInfo = _OriginatorInfo2.default;
	exports.OriginatorPublicKey = _OriginatorPublicKey2.default;
	exports.OtherCertificateFormat = _OtherCertificateFormat2.default;
	exports.OtherKeyAttribute = _OtherKeyAttribute2.default;
	exports.OtherPrimeInfo = _OtherPrimeInfo2.default;
	exports.OtherRecipientInfo = _OtherRecipientInfo2.default;
	exports.OtherRevocationInfoFormat = _OtherRevocationInfoFormat2.default;
	exports.PBES2Params = _PBES2Params2.default;
	exports.PBKDF2Params = _PBKDF2Params2.default;
	exports.PFX = _PFX2.default;
	exports.PKCS8ShroudedKeyBag = _PKCS8ShroudedKeyBag2.default;
	exports.PKIStatusInfo = _PKIStatusInfo2.default;
	exports.PasswordRecipientinfo = _PasswordRecipientinfo2.default;
	exports.PolicyConstraints = _PolicyConstraints2.default;
	exports.PolicyInformation = _PolicyInformation2.default;
	exports.PolicyMapping = _PolicyMapping2.default;
	exports.PolicyMappings = _PolicyMappings2.default;
	exports.PolicyQualifierInfo = _PolicyQualifierInfo2.default;
	exports.PrivateKeyInfo = _PrivateKeyInfo2.default;
	exports.PrivateKeyUsagePeriod = _PrivateKeyUsagePeriod2.default;
	exports.PublicKeyInfo = _PublicKeyInfo2.default;
	exports.RSAESOAEPParams = _RSAESOAEPParams2.default;
	exports.RSAPrivateKey = _RSAPrivateKey2.default;
	exports.RSAPublicKey = _RSAPublicKey2.default;
	exports.RSASSAPSSParams = _RSASSAPSSParams2.default;
	exports.RecipientEncryptedKey = _RecipientEncryptedKey2.default;
	exports.RecipientEncryptedKeys = _RecipientEncryptedKeys2.default;
	exports.RecipientIdentifier = _RecipientIdentifier2.default;
	exports.RecipientInfo = _RecipientInfo2.default;
	exports.RecipientKeyIdentifier = _RecipientKeyIdentifier2.default;
	exports.RelativeDistinguishedNames = _RelativeDistinguishedNames2.default;
	exports.Request = _Request2.default;
	exports.ResponseBytes = _ResponseBytes2.default;
	exports.ResponseData = _ResponseData2.default;
	exports.RevocationInfoChoices = _RevocationInfoChoices2.default;
	exports.RevokedCertificate = _RevokedCertificate2.default;
	exports.SafeBag = _SafeBag2.default;
	exports.SafeContents = _SafeContents2.default;
	exports.SecretBag = _SecretBag2.default;
	exports.Signature = _Signature2.default;
	exports.SignedAndUnsignedAttributes = _SignedAndUnsignedAttributes2.default;
	exports.SignedData = _SignedData2.default;
	exports.SignerInfo = _SignerInfo2.default;
	exports.SingleResponse = _SingleResponse2.default;
	exports.SubjectDirectoryAttributes = _SubjectDirectoryAttributes2.default;
	exports.TBSRequest = _TBSRequest2.default;
	exports.TSTInfo = _TSTInfo2.default;
	exports.Time = _Time2.default;
	exports.TimeStampReq = _TimeStampReq2.default;
	exports.TimeStampResp = _TimeStampResp2.default;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.setEngine = setEngine;
	exports.getEngine = getEngine;
	exports.getCrypto = getCrypto;
	exports.getRandomValues = getRandomValues;
	exports.getOIDByAlgorithm = getOIDByAlgorithm;
	exports.getAlgorithmParameters = getAlgorithmParameters;
	exports.createCMSECDSASignature = createCMSECDSASignature;
	exports.stringPrep = stringPrep;
	exports.createECDSASignatureFromCMS = createECDSASignatureFromCMS;
	exports.getAlgorithmByOID = getAlgorithmByOID;
	exports.getHashAlgorithm = getHashAlgorithm;
	exports.kdfWithCounter = kdfWithCounter;
	exports.kdf = kdf;
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	var _CryptoEngine = __webpack_require__(381);
	
	var _CryptoEngine2 = _interopRequireDefault(_CryptoEngine);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	//**************************************************************************************
	//region Crypto engine related function
	//**************************************************************************************
	var engine = {
		name: "none",
		crypto: null,
		subtle: null
	};
	//**************************************************************************************
	function setEngine(name, crypto, subtle) {
		engine = {
			name: name,
			crypto: crypto,
			subtle: subtle
		};
	}
	//**************************************************************************************
	function getEngine() {
		return engine;
	}
	//**************************************************************************************
	(function initCryptoEngine() {
		if (typeof self !== "undefined") {
			if ("crypto" in self) {
				var engineName = "webcrypto";
	
				/**
	    * Standard crypto object
	    * @type {Object}
	    * @property {Object} [webkitSubtle] Subtle object from Apple
	    */
				var cryptoObject = self.crypto;
				var subtleObject = null;
	
				// Apple Safari support
				if ("webkitSubtle" in self.crypto) {
					try {
						subtleObject = self.crypto.webkitSubtle;
					} catch (ex) {
						subtleObject = self.crypto.subtle;
					}
	
					engineName = "safari";
				}
	
				if ("subtle" in self.crypto) subtleObject = self.crypto.subtle;
	
				engine = {
					name: engineName,
					crypto: cryptoObject,
					subtle: new _CryptoEngine2.default({ name: engineName, crypto: subtleObject })
				};
			}
		}
	})();
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//region Declaration of common functions
	//**************************************************************************************
	/**
	 * Get crypto subtle from current "crypto engine" or "undefined"
	 * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}
	 */
	function getCrypto() {
		if (engine.subtle !== null) return engine.subtle;
	
		return undefined;
	}
	//**************************************************************************************
	/**
	 * Initialize input Uint8Array by random values (with help from current "crypto engine")
	 * @param {!Uint8Array} view
	 * @returns {*}
	 */
	function getRandomValues(view) {
		if (engine.crypto !== null) return engine.crypto.getRandomValues(view);
	
		throw new Error("No support for Web Cryptography API");
	}
	//**************************************************************************************
	/**
	 * Get OID for each specific WebCrypto algorithm
	 * @param {Object} algorithm WebCrypto algorithm
	 * @returns {string}
	 */
	function getOIDByAlgorithm(algorithm) {
		var result = "";
	
		switch (algorithm.name.toUpperCase()) {
			case "RSASSA-PKCS1-V1_5":
				switch (algorithm.hash.name.toUpperCase()) {
					case "SHA-1":
						result = "1.2.840.113549.1.1.5";
						break;
					case "SHA-256":
						result = "1.2.840.113549.1.1.11";
						break;
					case "SHA-384":
						result = "1.2.840.113549.1.1.12";
						break;
					case "SHA-512":
						result = "1.2.840.113549.1.1.13";
						break;
					default:
				}
				break;
			case "RSA-PSS":
				result = "1.2.840.113549.1.1.10";
				break;
			case "RSA-OAEP":
				result = "1.2.840.113549.1.1.7";
				break;
			case "ECDSA":
				switch (algorithm.hash.name.toUpperCase()) {
					case "SHA-1":
						result = "1.2.840.10045.4.1";
						break;
					case "SHA-256":
						result = "1.2.840.10045.4.3.2";
						break;
					case "SHA-384":
						result = "1.2.840.10045.4.3.3";
						break;
					case "SHA-512":
						result = "1.2.840.10045.4.3.4";
						break;
					default:
				}
				break;
			case "ECDH":
				switch (algorithm.kdf.toUpperCase()) {// Non-standard addition - hash algorithm of KDF function
					case "SHA-1":
						result = "1.3.133.16.840.63.0.2"; // dhSinglePass-stdDH-sha1kdf-scheme
						break;
					case "SHA-256":
						result = "1.3.132.1.11.1"; // dhSinglePass-stdDH-sha256kdf-scheme
						break;
					case "SHA-384":
						result = "1.3.132.1.11.2"; // dhSinglePass-stdDH-sha384kdf-scheme
						break;
					case "SHA-512":
						result = "1.3.132.1.11.3"; // dhSinglePass-stdDH-sha512kdf-scheme
						break;
					default:
				}
				break;
			case "AES-CTR":
				break;
			case "AES-CBC":
				switch (algorithm.length) {
					case 128:
						result = "2.16.840.1.101.3.4.1.2";
						break;
					case 192:
						result = "2.16.840.1.101.3.4.1.22";
						break;
					case 256:
						result = "2.16.840.1.101.3.4.1.42";
						break;
					default:
				}
				break;
			case "AES-CMAC":
				break;
			case "AES-GCM":
				switch (algorithm.length) {
					case 128:
						result = "2.16.840.1.101.3.4.1.6";
						break;
					case 192:
						result = "2.16.840.1.101.3.4.1.26";
						break;
					case 256:
						result = "2.16.840.1.101.3.4.1.46";
						break;
					default:
				}
				break;
			case "AES-CFB":
				switch (algorithm.length) {
					case 128:
						result = "2.16.840.1.101.3.4.1.4";
						break;
					case 192:
						result = "2.16.840.1.101.3.4.1.24";
						break;
					case 256:
						result = "2.16.840.1.101.3.4.1.44";
						break;
					default:
				}
				break;
			case "AES-KW":
				switch (algorithm.length) {
					case 128:
						result = "2.16.840.1.101.3.4.1.5";
						break;
					case 192:
						result = "2.16.840.1.101.3.4.1.25";
						break;
					case 256:
						result = "2.16.840.1.101.3.4.1.45";
						break;
					default:
				}
				break;
			case "HMAC":
				switch (algorithm.hash.name.toUpperCase()) {
					case "SHA-1":
						result = "1.2.840.113549.2.7";
						break;
					case "SHA-256":
						result = "1.2.840.113549.2.9";
						break;
					case "SHA-384":
						result = "1.2.840.113549.2.10";
						break;
					case "SHA-512":
						result = "1.2.840.113549.2.11";
						break;
					default:
				}
				break;
			case "DH":
				result = "1.2.840.113549.1.9.16.3.5";
				break;
			case "SHA-1":
				result = "1.3.14.3.2.26";
				break;
			case "SHA-256":
				result = "2.16.840.1.101.3.4.2.1";
				break;
			case "SHA-384":
				result = "2.16.840.1.101.3.4.2.2";
				break;
			case "SHA-512":
				result = "2.16.840.1.101.3.4.2.3";
				break;
			case "CONCAT":
				break;
			case "HKDF":
				break;
			case "PBKDF2":
				result = "1.2.840.113549.1.5.12";
				break;
			//region Special case - OIDs for ECC curves
			case "P-256":
				result = "1.2.840.10045.3.1.7";
				break;
			case "P-384":
				result = "1.3.132.0.34";
				break;
			case "P-521":
				result = "1.3.132.0.35";
				break;
			//endregion
			default:
		}
	
		return result;
	}
	//**************************************************************************************
	/**
	 * Get default algorithm parameters for each kind of operation
	 * @param {string} algorithmName Algorithm name to get common parameters for
	 * @param {string} operation Kind of operation: "sign", "encrypt", "generatekey", "importkey", "exportkey", "verify"
	 * @returns {*}
	 */
	function getAlgorithmParameters(algorithmName, operation) {
		var result = {
			algorithm: {},
			usages: []
		};
	
		switch (algorithmName.toUpperCase()) {
			case "RSASSA-PKCS1-V1_5":
				switch (operation.toLowerCase()) {
					case "generatekey":
						result = {
							algorithm: {
								name: "RSASSA-PKCS1-v1_5",
								modulusLength: 2048,
								publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["sign", "verify"]
						};
						break;
					case "verify":
					case "sign":
					case "importkey":
						result = {
							algorithm: {
								name: "RSASSA-PKCS1-v1_5",
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["verify"] // For importKey("pkcs8") usage must be "sign" only
						};
						break;
					case "exportkey":
					default:
						return {
							algorithm: {
								name: "RSASSA-PKCS1-v1_5"
							},
							usages: []
						};
				}
				break;
			case "RSA-PSS":
				switch (operation.toLowerCase()) {
					case "sign":
					case "verify":
						result = {
							algorithm: {
								name: "RSA-PSS",
								hash: {
									name: "SHA-1"
								},
								saltLength: 20
							},
							usages: ["sign", "verify"]
						};
						break;
					case "generatekey":
						result = {
							algorithm: {
								name: "RSA-PSS",
								modulusLength: 2048,
								publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
								hash: {
									name: "SHA-1"
								}
							},
							usages: ["sign", "verify"]
						};
						break;
					case "importkey":
						result = {
							algorithm: {
								name: "RSA-PSS",
								hash: {
									name: "SHA-1"
								}
							},
							usages: ["verify"] // For importKey("pkcs8") usage must be "sign" only
						};
						break;
					case "exportkey":
					default:
						return {
							algorithm: {
								name: "RSA-PSS"
							},
							usages: []
						};
				}
				break;
			case "RSA-OAEP":
				switch (operation.toLowerCase()) {
					case "encrypt":
					case "decrypt":
						result = {
							algorithm: {
								name: "RSA-OAEP"
							},
							usages: ["encrypt", "decrypt"]
						};
						break;
					case "generatekey":
						result = {
							algorithm: {
								name: "RSA-OAEP",
								modulusLength: 2048,
								publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					case "importkey":
						result = {
							algorithm: {
								name: "RSA-OAEP",
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["encrypt"] // encrypt for "spki" and decrypt for "pkcs8"
						};
						break;
					case "exportkey":
					default:
						return {
							algorithm: {
								name: "RSA-OAEP"
							},
							usages: []
						};
				}
				break;
			case "ECDSA":
				switch (operation.toLowerCase()) {
					case "generatekey":
						result = {
							algorithm: {
								name: "ECDSA",
								namedCurve: "P-256"
							},
							usages: ["sign", "verify"]
						};
						break;
					case "importkey":
						result = {
							algorithm: {
								name: "ECDSA",
								namedCurve: "P-256"
							},
							usages: ["verify"] // "sign" for "pkcs8"
						};
						break;
					case "verify":
					case "sign":
						result = {
							algorithm: {
								name: "ECDSA",
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["sign"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "ECDSA"
							},
							usages: []
						};
				}
				break;
			case "ECDH":
				switch (operation.toLowerCase()) {
					case "exportkey":
					case "importkey":
					case "generatekey":
						result = {
							algorithm: {
								name: "ECDH",
								namedCurve: "P-256"
							},
							usages: ["deriveKey", "deriveBits"]
						};
						break;
					case "derivekey":
					case "derivebits":
						result = {
							algorithm: {
								name: "ECDH",
								namedCurve: "P-256",
								public: [] // Must be a "publicKey"
							},
							usages: ["encrypt", "decrypt"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "ECDH"
							},
							usages: []
						};
				}
				break;
			case "AES-CTR":
				switch (operation.toLowerCase()) {
					case "importkey":
					case "exportkey":
					case "generatekey":
						result = {
							algorithm: {
								name: "AES-CTR",
								length: 256
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					case "decrypt":
					case "encrypt":
						result = {
							algorithm: {
								name: "AES-CTR",
								counter: new Uint8Array(16),
								length: 10
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "AES-CTR"
							},
							usages: []
						};
				}
				break;
			case "AES-CBC":
				switch (operation.toLowerCase()) {
					case "importkey":
					case "exportkey":
					case "generatekey":
						result = {
							algorithm: {
								name: "AES-CBC",
								length: 256
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					case "decrypt":
					case "encrypt":
						result = {
							algorithm: {
								name: "AES-CBC",
								iv: getRandomValues(new Uint8Array(16)) // For "decrypt" the value should be replaced with value got on "encrypt" step
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "AES-CBC"
							},
							usages: []
						};
				}
				break;
			case "AES-GCM":
				switch (operation.toLowerCase()) {
					case "importkey":
					case "exportkey":
					case "generatekey":
						result = {
							algorithm: {
								name: "AES-GCM",
								length: 256
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					case "decrypt":
					case "encrypt":
						result = {
							algorithm: {
								name: "AES-GCM",
								iv: getRandomValues(new Uint8Array(16)) // For "decrypt" the value should be replaced with value got on "encrypt" step
							},
							usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "AES-GCM"
							},
							usages: []
						};
				}
				break;
			case "AES-KW":
				switch (operation.toLowerCase()) {
					case "importkey":
					case "exportkey":
					case "generatekey":
					case "wrapkey":
					case "unwrapkey":
						result = {
							algorithm: {
								name: "AES-KW",
								length: 256
							},
							usages: ["wrapKey", "unwrapKey"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "AES-KW"
							},
							usages: []
						};
				}
				break;
			case "HMAC":
				switch (operation.toLowerCase()) {
					case "sign":
					case "verify":
						result = {
							algorithm: {
								name: "HMAC"
							},
							usages: ["sign", "verify"]
						};
						break;
					case "importkey":
					case "exportkey":
					case "generatekey":
						result = {
							algorithm: {
								name: "HMAC",
								length: 32,
								hash: {
									name: "SHA-256"
								}
							},
							usages: ["sign", "verify"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "HMAC"
							},
							usages: []
						};
				}
				break;
			case "HKDF":
				switch (operation.toLowerCase()) {
					case "derivekey":
						result = {
							algorithm: {
								name: "HKDF",
								hash: "SHA-256",
								salt: new Uint8Array([]),
								info: new Uint8Array([])
							},
							usages: ["encrypt", "decrypt"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "HKDF"
							},
							usages: []
						};
				}
				break;
			case "PBKDF2":
				switch (operation.toLowerCase()) {
					case "derivekey":
						result = {
							algorithm: {
								name: "PBKDF2",
								hash: { name: "SHA-256" },
								salt: new Uint8Array([]),
								iterations: 1000
							},
							usages: ["encrypt", "decrypt"]
						};
						break;
					default:
						return {
							algorithm: {
								name: "PBKDF2"
							},
							usages: []
						};
				}
				break;
			default:
		}
	
		return result;
	}
	//**************************************************************************************
	/**
	 * Create CMS ECDSA signature from WebCrypto ECDSA signature
	 * @param {ArrayBuffer} signatureBuffer WebCrypto result of "sign" function
	 * @returns {ArrayBuffer}
	 */
	function createCMSECDSASignature(signatureBuffer) {
		// #region Initial check for correct length
		if (signatureBuffer.byteLength % 2 !== 0) return new ArrayBuffer(0);
		// #endregion
	
		// #region Initial variables
		var length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer
	
		var rBuffer = new ArrayBuffer(length);
		var rView = new Uint8Array(rBuffer);
		rView.set(new Uint8Array(signatureBuffer, 0, length));
	
		var rInteger = new asn1js.Integer({ valueHex: rBuffer });
	
		var sBuffer = new ArrayBuffer(length);
		var sView = new Uint8Array(sBuffer);
		sView.set(new Uint8Array(signatureBuffer, length, length));
	
		var sInteger = new asn1js.Integer({ valueHex: sBuffer });
		// #endregion
	
		return new asn1js.Sequence({
			value: [rInteger.convertToDER(), sInteger.convertToDER()]
		}).toBER(false);
	}
	//**************************************************************************************
	/**
	 * String preparation function. In a future here will be realization of algorithm from RFC4518
	 * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string
	 * @returns {string} Formated string
	 */
	function stringPrep(inputString) {
		var result = inputString.replace(/^\s+|\s+$/g, ""); // Trim input string
		result = result.replace(/\s+/g, " "); // Change all sequence of SPACE down to SPACE char
		result = result.toLowerCase();
	
		return result;
	}
	//**************************************************************************************
	/**
	 * Create a single ArrayBuffer from CMS ECDSA signature
	 * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature
	 * @returns {ArrayBuffer}
	 */
	function createECDSASignatureFromCMS(cmsSignature) {
		// #region Check input variables
		if (cmsSignature instanceof asn1js.Sequence === false) return new ArrayBuffer(0);
	
		if (cmsSignature.valueBlock.value.length !== 2) return new ArrayBuffer(0);
	
		if (cmsSignature.valueBlock.value[0] instanceof asn1js.Integer === false) return new ArrayBuffer(0);
	
		if (cmsSignature.valueBlock.value[1] instanceof asn1js.Integer === false) return new ArrayBuffer(0);
		// #endregion 
	
		var rValue = cmsSignature.valueBlock.value[0].convertFromDER();
		var sValue = cmsSignature.valueBlock.value[1].convertFromDER();
	
		return (0, _pvutils.utilConcatBuf)(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);
	}
	//**************************************************************************************
	/**
	 * Get WebCrypto algorithm by wel-known OID
	 * @param {string} oid Wel-known OID to search for
	 * @returns {Object}
	 */
	function getAlgorithmByOID(oid) {
		switch (oid) {
			case "1.2.840.113549.1.1.1":
			case "1.2.840.113549.1.1.5":
				return {
					name: "RSASSA-PKCS1-v1_5",
					hash: {
						name: "SHA-1"
					}
				};
			case "1.2.840.113549.1.1.11":
				return {
					name: "RSASSA-PKCS1-v1_5",
					hash: {
						name: "SHA-256"
					}
				};
			case "1.2.840.113549.1.1.12":
				return {
					name: "RSASSA-PKCS1-v1_5",
					hash: {
						name: "SHA-384"
					}
				};
			case "1.2.840.113549.1.1.13":
				return {
					name: "RSASSA-PKCS1-v1_5",
					hash: {
						name: "SHA-512"
					}
				};
			case "1.2.840.113549.1.1.10":
				return {
					name: "RSA-PSS"
				};
			case "1.2.840.113549.1.1.7":
				return {
					name: "RSA-OAEP"
				};
			case "1.2.840.10045.2.1":
			case "1.2.840.10045.4.1":
				return {
					name: "ECDSA",
					hash: {
						name: "SHA-1"
					}
				};
			case "1.2.840.10045.4.3.2":
				return {
					name: "ECDSA",
					hash: {
						name: "SHA-256"
					}
				};
			case "1.2.840.10045.4.3.3":
				return {
					name: "ECDSA",
					hash: {
						name: "SHA-384"
					}
				};
			case "1.2.840.10045.4.3.4":
				return {
					name: "ECDSA",
					hash: {
						name: "SHA-512"
					}
				};
			case "1.3.133.16.840.63.0.2":
				return {
					name: "ECDH",
					kdf: "SHA-1"
				};
			case "1.3.132.1.11.1":
				return {
					name: "ECDH",
					kdf: "SHA-256"
				};
			case "1.3.132.1.11.2":
				return {
					name: "ECDH",
					kdf: "SHA-384"
				};
			case "1.3.132.1.11.3":
				return {
					name: "ECDH",
					kdf: "SHA-512"
				};
			case "2.16.840.1.101.3.4.1.2":
				return {
					name: "AES-CBC",
					length: 128
				};
			case "2.16.840.1.101.3.4.1.22":
				return {
					name: "AES-CBC",
					length: 192
				};
			case "2.16.840.1.101.3.4.1.42":
				return {
					name: "AES-CBC",
					length: 256
				};
			case "2.16.840.1.101.3.4.1.6":
				return {
					name: "AES-GCM",
					length: 128
				};
			case "2.16.840.1.101.3.4.1.26":
				return {
					name: "AES-GCM",
					length: 192
				};
			case "2.16.840.1.101.3.4.1.46":
				return {
					name: "AES-GCM",
					length: 256
				};
			case "2.16.840.1.101.3.4.1.4":
				return {
					name: "AES-CFB",
					length: 128
				};
			case "2.16.840.1.101.3.4.1.24":
				return {
					name: "AES-CFB",
					length: 192
				};
			case "2.16.840.1.101.3.4.1.44":
				return {
					name: "AES-CFB",
					length: 256
				};
			case "2.16.840.1.101.3.4.1.5":
				return {
					name: "AES-KW",
					length: 128
				};
			case "2.16.840.1.101.3.4.1.25":
				return {
					name: "AES-KW",
					length: 192
				};
			case "2.16.840.1.101.3.4.1.45":
				return {
					name: "AES-KW",
					length: 256
				};
			case "1.2.840.113549.2.7":
				return {
					name: "HMAC",
					hash: {
						name: "SHA-1"
					}
				};
			case "1.2.840.113549.2.9":
				return {
					name: "HMAC",
					hash: {
						name: "SHA-256"
					}
				};
			case "1.2.840.113549.2.10":
				return {
					name: "HMAC",
					hash: {
						name: "SHA-384"
					}
				};
			case "1.2.840.113549.2.11":
				return {
					name: "HMAC",
					hash: {
						name: "SHA-512"
					}
				};
			case "1.2.840.113549.1.9.16.3.5":
				return {
					name: "DH"
				};
			case "1.3.14.3.2.26":
				return {
					name: "SHA-1"
				};
			case "2.16.840.1.101.3.4.2.1":
				return {
					name: "SHA-256"
				};
			case "2.16.840.1.101.3.4.2.2":
				return {
					name: "SHA-384"
				};
			case "2.16.840.1.101.3.4.2.3":
				return {
					name: "SHA-512"
				};
			case "1.2.840.113549.1.5.12":
				return {
					name: "PBKDF2"
				};
			//region Special case - OIDs for ECC curves
			case "1.2.840.10045.3.1.7":
				return {
					name: "P-256"
				};
			case "1.3.132.0.34":
				return {
					name: "P-384"
				};
			case "1.3.132.0.35":
				return {
					name: "P-521"
				};
			//endregion
			default:
		}
	
		return {};
	}
	//**************************************************************************************
	/**
	 * Getting hash algorithm by signature algorithm
	 * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm
	 * @returns {string}
	 */
	function getHashAlgorithm(signatureAlgorithm) {
		var result = "";
	
		switch (signatureAlgorithm.algorithmId) {
			case "1.2.840.10045.4.1": // ecdsa-with-SHA1
			case "1.2.840.113549.1.1.5":
				result = "SHA-1";
				break;
			case "1.2.840.10045.4.3.2": // ecdsa-with-SHA256
			case "1.2.840.113549.1.1.11":
				result = "SHA-256";
				break;
			case "1.2.840.10045.4.3.3": // ecdsa-with-SHA384
			case "1.2.840.113549.1.1.12":
				result = "SHA-384";
				break;
			case "1.2.840.10045.4.3.4": // ecdsa-with-SHA512
			case "1.2.840.113549.1.1.13":
				result = "SHA-512";
				break;
			case "1.2.840.113549.1.1.10":
				// RSA-PSS
				{
					try {
						var params = new _RSASSAPSSParams2.default({ schema: signatureAlgorithm.algorithmParams });
						if ("hashAlgorithm" in params) {
							var algorithm = getAlgorithmByOID(params.hashAlgorithm.algorithmId);
							if ("name" in algorithm === false) return "";
	
							result = algorithm.name;
						} else result = "SHA-1";
					} catch (ex) {}
				}
				break;
			default:
		}
	
		return result;
	}
	//**************************************************************************************
	/**
	 * ANS X9.63 Key Derivation Function having a "Counter" as a parameter
	 * @param {string} hashFunction Used hash function
	 * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from
	 * @param {number} Counter
	 * @param {ArrayBuffer} SharedInfo Usually DER encoded "ECC_CMS_SharedInfo" structure
	 */
	function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo) {
		//region Check of input parameters
		switch (hashFunction.toUpperCase()) {
			case "SHA-1":
			case "SHA-256":
			case "SHA-384":
			case "SHA-512":
				break;
			default:
				return Promise.reject("Unknown hash function: " + hashFunction);
		}
	
		if (Zbuffer instanceof ArrayBuffer === false) return Promise.reject("Please set \"Zbuffer\" as \"ArrayBuffer\"");
	
		if (Zbuffer.byteLength === 0) return Promise.reject("\"Zbuffer\" has zero length, error");
	
		if (SharedInfo instanceof ArrayBuffer === false) return Promise.reject("Please set \"SharedInfo\" as \"ArrayBuffer\"");
	
		if (Counter > 255) return Promise.reject("Please set \"Counter\" variable to value less or equal to 255");
		//endregion
	
		//region Initial variables
		var counterBuffer = new ArrayBuffer(4);
		var counterView = new Uint8Array(counterBuffer);
		counterView[0] = 0x00;
		counterView[1] = 0x00;
		counterView[2] = 0x00;
		counterView[3] = Counter;
	
		var combinedBuffer = new ArrayBuffer(0);
		//endregion
	
		//region Get a "crypto" extension
		var crypto = getCrypto();
		if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
		//endregion
	
		//region Create a combined ArrayBuffer for digesting
		combinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, Zbuffer);
		combinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, counterBuffer);
		combinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, SharedInfo);
		//endregion
	
		//region Return digest of combined ArrayBuffer and information about current counter
		return crypto.digest({
			name: hashFunction
		}, combinedBuffer).then(function (result) {
			return {
				counter: Counter,
				result: result
			};
		});
		//endregion
	}
	//**************************************************************************************
	/**
	 * ANS X9.63 Key Derivation Function
	 * @param {string} hashFunction Used hash function
	 * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from
	 * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function
	 * @param {ArrayBuffer} SharedInfo Usually DER encoded "ECC_CMS_SharedInfo" structure
	 */
	function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo) {
		//region Initial variables
		var hashLength = 0;
		var maxCounter = 1;
	
		var kdfArray = [];
		//endregion
	
		//region Check of input parameters
		switch (hashFunction.toUpperCase()) {
			case "SHA-1":
				hashLength = 160; // In bits
				break;
			case "SHA-256":
				hashLength = 256; // In bits
				break;
			case "SHA-384":
				hashLength = 384; // In bits
				break;
			case "SHA-512":
				hashLength = 512; // In bits
				break;
			default:
				return Promise.reject("Unknown hash function: " + hashFunction);
		}
	
		if (Zbuffer instanceof ArrayBuffer === false) return Promise.reject("Please set \"Zbuffer\" as \"ArrayBuffer\"");
	
		if (Zbuffer.byteLength === 0) return Promise.reject("\"Zbuffer\" has zero length, error");
	
		if (SharedInfo instanceof ArrayBuffer === false) return Promise.reject("Please set \"SharedInfo\" as \"ArrayBuffer\"");
		//endregion
	
		//region Calculated maximum value of "Counter" variable
		var quotient = keydatalen / hashLength;
	
		if (Math.floor(quotient) > 0) {
			maxCounter = Math.floor(quotient);
	
			if (quotient - maxCounter > 0) maxCounter++;
		}
		//endregion
	
		//region Create an array of "kdfWithCounter"
		for (var i = 1; i <= maxCounter; i++) {
			kdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));
		} //endregion
	
		//region Return combined digest with specified length
		return Promise.all(kdfArray).then(function (incomingResult) {
			//region Initial variables
			var combinedBuffer = new ArrayBuffer(0);
			var currentCounter = 1;
			var found = true;
			//endregion
	
			//region Combine all buffer together
			while (found) {
				found = false;
	
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = incomingResult[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var result = _step.value;
	
						if (result.counter === currentCounter) {
							combinedBuffer = (0, _pvutils.utilConcatBuf)(combinedBuffer, result.result);
							found = true;
							break;
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				currentCounter++;
			}
			//endregion
	
			//region Create output buffer with specified length
			keydatalen >>= 3; // Divide by 8 since "keydatalen" is in bits
	
			if (combinedBuffer.byteLength > keydatalen) {
				var newBuffer = new ArrayBuffer(keydatalen);
				var newView = new Uint8Array(newBuffer);
				var combinedView = new Uint8Array(combinedBuffer);
	
				for (var _i = 0; _i < keydatalen; _i++) {
					newView[_i] = combinedView[_i];
				}return newBuffer;
			}
	
			return combinedBuffer; // Since the situation when "combinedBuffer.byteLength < keydatalen" here we have only "combinedBuffer.byteLength === keydatalen"
			//endregion
		});
		//endregion
	}
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	//# sourceMappingURL=common.js.map

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var AlgorithmIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for AlgorithmIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)
	  */
		function AlgorithmIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AlgorithmIdentifier);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description ObjectIdentifier for algorithm (string representation)
	   */
			this.algorithmId = (0, _pvutils.getParametersValue)(parameters, "algorithmId", AlgorithmIdentifier.defaultValues("algorithmId"));
	
			if ("algorithmParams" in parameters)
				/**
	    * @type {Object}
	    * @description Any algorithm parameters
	    */
				this.algorithmParams = (0, _pvutils.getParametersValue)(parameters, "algorithmParams", AlgorithmIdentifier.defaultValues("algorithmParams"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AlgorithmIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				/**
	    * @type {{verified: boolean}|{verified: boolean, result: {algorithm: Object, params: Object}}}
	    */
				var asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({
					names: {
						algorithmIdentifier: "algorithm",
						algorithmParams: "params"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for AlgorithmIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				this.algorithmId = asn1.result.algorithm.valueBlock.toString();
				if ("params" in asn1.result) this.algorithmParams = asn1.result.params;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));
				if ("algorithmParams" in this && this.algorithmParams instanceof asn1js.Any === false) outputArray.push(this.algorithmParams);
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					algorithmId: this.algorithmId
				};
	
				if ("algorithmParams" in this && this.algorithmParams instanceof asn1js.Any === false) object.algorithmParams = this.algorithmParams.toJSON();
	
				return object;
			}
			//**********************************************************************************
			/**
	   * Check that two "AlgorithmIdentifiers" are equal
	   * @param {AlgorithmIdentifier} algorithmIdentifier
	   * @returns {boolean}
	   */
	
		}, {
			key: "isEqual",
			value: function isEqual(algorithmIdentifier) {
				//region Check input type
				if (algorithmIdentifier instanceof AlgorithmIdentifier === false) return false;
				//endregion
	
				//region Check "algorithm_id"
				if (this.algorithmId !== algorithmIdentifier.algorithmId) return false;
				//endregion
	
				//region Check "algorithm_params"
				if ("algorithmParams" in this) {
					if ("algorithmParams" in algorithmIdentifier) return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);
	
					return false;
				}
	
				if ("algorithmParams" in algorithmIdentifier) return false;
				//endregion
	
				return true;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "algorithmId":
						return "";
					case "algorithmParams":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for AlgorithmIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "algorithmId":
						return memberValue === "";
					case "algorithmParams":
						return memberValue instanceof asn1js.Any;
					default:
						throw new Error("Invalid member name for AlgorithmIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//AlgorithmIdentifier  ::=  Sequence  {
				//    algorithm               OBJECT IDENTIFIER,
				//    parameters              ANY DEFINED BY algorithm OPTIONAL  }
	
				/**
	    * @type {Object}
	    * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm
	    * @property {string} algorithmParams Any algorithm parameters
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					optional: names.optional || false,
					value: [new asn1js.ObjectIdentifier({ name: names.algorithmIdentifier || "" }), new asn1js.Any({ name: names.algorithmParams || "", optional: true })]
				});
			}
		}]);
	
		return AlgorithmIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = AlgorithmIdentifier;
	//# sourceMappingURL=AlgorithmIdentifier.js.map

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC4055
	 */
	var RSASSAPSSParams = function () {
		//**********************************************************************************
		/**
	  * Constructor for RSASSAPSSParams class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RSASSAPSSParams() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RSASSAPSSParams);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description Algorithms of hashing (DEFAULT sha1)
	   */
			this.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, "hashAlgorithm", RSASSAPSSParams.defaultValues("hashAlgorithm"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description Algorithm of "mask generaion function (MGF)" (DEFAULT mgf1SHA1)
	   */
			this.maskGenAlgorithm = (0, _pvutils.getParametersValue)(parameters, "maskGenAlgorithm", RSASSAPSSParams.defaultValues("maskGenAlgorithm"));
			/**
	   * @type {number}
	   * @description Salt length (DEFAULT 20)
	   */
			this.saltLength = (0, _pvutils.getParametersValue)(parameters, "saltLength", RSASSAPSSParams.defaultValues("saltLength"));
			/**
	   * @type {number}
	   * @description (DEFAULT 1)
	   */
			this.trailerField = (0, _pvutils.getParametersValue)(parameters, "trailerField", RSASSAPSSParams.defaultValues("trailerField"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RSASSAPSSParams, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({
					names: {
						hashAlgorithm: {
							names: {
								blockName: "hashAlgorithm"
							}
						},
						maskGenAlgorithm: {
							names: {
								blockName: "maskGenAlgorithm"
							}
						},
						saltLength: "saltLength",
						trailerField: "trailerField"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RSASSA_PSS_params");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("hashAlgorithm" in asn1.result) this.hashAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.hashAlgorithm });
	
				if ("maskGenAlgorithm" in asn1.result) this.maskGenAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.maskGenAlgorithm });
	
				if ("saltLength" in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;
	
				if ("trailerField" in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues("hashAlgorithm"))) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.hashAlgorithm.toSchema()]
					}));
				}
	
				if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues("maskGenAlgorithm"))) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [this.maskGenAlgorithm.toSchema()]
					}));
				}
	
				if (this.saltLength !== RSASSAPSSParams.defaultValues("saltLength")) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: [new asn1js.Integer({ value: this.saltLength })]
					}));
				}
	
				if (this.trailerField !== RSASSAPSSParams.defaultValues("trailerField")) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						value: [new asn1js.Integer({ value: this.trailerField })]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues("hashAlgorithm"))) object.hashAlgorithm = this.hashAlgorithm.toJSON();
	
				if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues("maskGenAlgorithm"))) object.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
	
				if (this.saltLength !== RSASSAPSSParams.defaultValues("saltLength")) object.saltLength = this.saltLength;
	
				if (this.trailerField !== RSASSAPSSParams.defaultValues("trailerField")) object.trailerField = this.trailerField;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "hashAlgorithm":
						return new _AlgorithmIdentifier2.default({
							algorithmId: "1.3.14.3.2.26", // SHA-1
							algorithmParams: new asn1js.Null()
						});
					case "maskGenAlgorithm":
						return new _AlgorithmIdentifier2.default({
							algorithmId: "1.2.840.113549.1.1.8", // MGF1
							algorithmParams: new _AlgorithmIdentifier2.default({
								algorithmId: "1.3.14.3.2.26", // SHA-1
								algorithmParams: new asn1js.Null()
							}).toSchema()
						});
					case "saltLength":
						return 20;
					case "trailerField":
						return 1;
					default:
						throw new Error("Invalid member name for RSASSAPSSParams class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RSASSA-PSS-params  ::=  Sequence  {
				//    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,
				//    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,
				//    saltLength         [2] Integer DEFAULT 20,
				//    trailerField       [3] Integer DEFAULT 1  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [hashAlgorithm]
	    * @property {string} [maskGenAlgorithm]
	    * @property {string} [saltLength]
	    * @property {string} [trailerField]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						optional: true,
						value: [_AlgorithmIdentifier2.default.schema(names.hashAlgorithm || {})]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						optional: true,
						value: [_AlgorithmIdentifier2.default.schema(names.maskGenAlgorithm || {})]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						optional: true,
						value: [new asn1js.Integer({ name: names.saltLength || "" })]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						optional: true,
						value: [new asn1js.Integer({ name: names.trailerField || "" })]
					})]
				});
			}
		}]);
	
		return RSASSAPSSParams;
	}();
	//**************************************************************************************
	
	
	exports.default = RSASSAPSSParams;
	//# sourceMappingURL=RSASSAPSSParams.js.map

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _PublicKeyInfo = __webpack_require__(382);
	
	var _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);
	
	var _PrivateKeyInfo = __webpack_require__(385);
	
	var _PrivateKeyInfo2 = _interopRequireDefault(_PrivateKeyInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	var CryptoEngine = function () {
		//**********************************************************************************
		/**
	  * Constructor for CryptoEngine class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CryptoEngine() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CryptoEngine);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description Usually here we are expecting "window.crypto.subtle" or an equivalent from custom "crypto engine"
	   */
			this.crypto = (0, _pvutils.getParametersValue)(parameters, "crypto", {});
	
			/**
	   * @type {string}
	   * @description Name of the "crypto engine"
	   */
			this.name = (0, _pvutils.getParametersValue)(parameters, "name", "");
			//endregion
		}
		//**********************************************************************************
		/**
	  * Import WebCrypto keys from different formats
	  * @param {string} format
	  * @param {ArrayBuffer|Object} keyData
	  * @param {Object} algorithm
	  * @param {boolean} extractable
	  * @param {Array} keyUsages
	  * @returns {Promise}
	  */
	
	
		_createClass(CryptoEngine, [{
			key: "importKey",
			value: function importKey(format, keyData, algorithm, extractable, keyUsages) {
				var _this = this;
	
				//region Initial variables
				var jwk = {};
				//endregion
	
				//region Change "keyData" type if needed
				if (keyData instanceof Uint8Array) keyData = keyData.buffer;
				//endregion
	
				switch (format.toLowerCase()) {
					case "raw":
						return this.crypto.importKey("raw", keyData, algorithm, extractable, keyUsages);
					case "spki":
						{
							var asn1 = asn1js.fromBER(keyData);
							if (asn1.offset === -1) return Promise.reject("Incorrect keyData");
	
							var publicKeyInfo = new _PublicKeyInfo2.default();
							try {
								publicKeyInfo.fromSchema(asn1.result);
							} catch (ex) {
								return Promise.reject("Incorrect keyData");
							}
	
							switch (algorithm.name.toUpperCase()) {
								case "RSA-PSS":
									{
										//region Get information about used hash function
										switch (algorithm.hash.name.toUpperCase()) {
											case "SHA-1":
												jwk.alg = "PS1";
												break;
											case "SHA-256":
												jwk.alg = "PS256";
												break;
											case "SHA-384":
												jwk.alg = "PS384";
												break;
											case "SHA-512":
												jwk.alg = "PS512";
												break;
											default:
												return Promise.reject("Incorrect hash algorithm: " + algorithm.hash.name.toUpperCase());
										}
										//endregion
									}
								case "RSASSA-PKCS1-V1_5":
									{
										keyUsages = ["verify"]; // Override existing keyUsages value since the key is a public key
	
										jwk.kty = "RSA";
										jwk.ext = extractable;
										jwk.key_ops = keyUsages;
	
										if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.113549.1.1.1") return Promise.reject("Incorrect public key algorithm: " + publicKeyInfo.algorithm.algorithmId);
	
										//region Get information about used hash function
										if ("alg" in jwk === false) {
											switch (algorithm.hash.name.toUpperCase()) {
												case "SHA-1":
													jwk.alg = "RS1";
													break;
												case "SHA-256":
													jwk.alg = "RS256";
													break;
												case "SHA-384":
													jwk.alg = "RS384";
													break;
												case "SHA-512":
													jwk.alg = "RS512";
													break;
												default:
													return Promise.reject("Incorrect public key algorithm: " + publicKeyInfo.algorithm.algorithmId);
											}
										}
										//endregion
	
										//region Create RSA Public Key elements
										var publicKeyJSON = publicKeyInfo.toJSON();
	
										var _iteratorNormalCompletion = true;
										var _didIteratorError = false;
										var _iteratorError = undefined;
	
										try {
											for (var _iterator = Object.keys(publicKeyJSON)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
												var key = _step.value;
	
												jwk[key] = publicKeyJSON[key];
											} //endregion
										} catch (err) {
											_didIteratorError = true;
											_iteratorError = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion && _iterator.return) {
													_iterator.return();
												}
											} finally {
												if (_didIteratorError) {
													throw _iteratorError;
												}
											}
										}
									}
									break;
								case "ECDSA":
									keyUsages = ["verify"]; // Override existing keyUsages value since the key is a public key
								case "ECDH":
									{
										//region Initial variables
										jwk = {
											kty: "EC",
											ext: extractable,
											key_ops: keyUsages
										};
										//endregion
	
										//region Get information about algorithm
										if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.10045.2.1") return Promise.reject("Incorrect public key algorithm: " + publicKeyInfo.algorithm.algorithmId);
										//endregion
	
										//region Create ECDSA Public Key elements
										var _publicKeyJSON = publicKeyInfo.toJSON();
	
										var _iteratorNormalCompletion2 = true;
										var _didIteratorError2 = false;
										var _iteratorError2 = undefined;
	
										try {
											for (var _iterator2 = Object.keys(_publicKeyJSON)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
												var _key = _step2.value;
	
												jwk[_key] = _publicKeyJSON[_key];
											} //endregion
										} catch (err) {
											_didIteratorError2 = true;
											_iteratorError2 = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion2 && _iterator2.return) {
													_iterator2.return();
												}
											} finally {
												if (_didIteratorError2) {
													throw _iteratorError2;
												}
											}
										}
									}
									break;
								case "RSA-OAEP":
									{
										jwk.kty = "RSA";
										jwk.ext = extractable;
										jwk.key_ops = keyUsages;
	
										if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";else {
											switch (algorithm.hash.name.toUpperCase()) {
												case "SHA-1":
													jwk.alg = "RSA-OAEP-1";
													break;
												case "SHA-256":
													jwk.alg = "RSA-OAEP-256";
													break;
												case "SHA-384":
													jwk.alg = "RSA-OAEP-384";
													break;
												case "SHA-512":
													jwk.alg = "RSA-OAEP-512";
													break;
												default:
													return Promise.reject("Incorrect public key algorithm: " + publicKeyInfo.algorithm.algorithmId);
											}
										}
	
										//region Create ECDSA Public Key elements
										var _publicKeyJSON2 = publicKeyInfo.toJSON();
	
										var _iteratorNormalCompletion3 = true;
										var _didIteratorError3 = false;
										var _iteratorError3 = undefined;
	
										try {
											for (var _iterator3 = Object.keys(_publicKeyJSON2)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
												var _key2 = _step3.value;
	
												jwk[_key2] = _publicKeyJSON2[_key2];
											} //endregion
										} catch (err) {
											_didIteratorError3 = true;
											_iteratorError3 = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion3 && _iterator3.return) {
													_iterator3.return();
												}
											} finally {
												if (_didIteratorError3) {
													throw _iteratorError3;
												}
											}
										}
									}
									break;
								default:
									return Promise.reject("Incorrect algorithm name: " + algorithm.name.toUpperCase());
							}
						}
						break;
					case "pkcs8":
						{
							var privateKeyInfo = new _PrivateKeyInfo2.default();
	
							//region Parse "PrivateKeyInfo" object
							var _asn = asn1js.fromBER(keyData);
							if (_asn.offset === -1) return Promise.reject("Incorrect keyData");
	
							try {
								privateKeyInfo.fromSchema(_asn.result);
							} catch (ex) {
								return Promise.reject("Incorrect keyData");
							}
							//endregion
	
							switch (algorithm.name.toUpperCase()) {
								case "RSA-PSS":
									{
										//region Get information about used hash function
										switch (algorithm.hash.name.toUpperCase()) {
											case "SHA-1":
												jwk.alg = "PS1";
												break;
											case "SHA-256":
												jwk.alg = "PS256";
												break;
											case "SHA-384":
												jwk.alg = "PS384";
												break;
											case "SHA-512":
												jwk.alg = "PS512";
												break;
											default:
												return Promise.reject("Incorrect hash algorithm: " + algorithm.hash.name.toUpperCase());
										}
										//endregion
									}
								case "RSASSA-PKCS1-V1_5":
									{
										keyUsages = ["sign"]; // Override existing keyUsages value since the key is a private key
	
										jwk.kty = "RSA";
										jwk.ext = extractable;
										jwk.key_ops = keyUsages;
	
										//region Get information about used hash function
										if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.113549.1.1.1") return Promise.reject("Incorrect private key algorithm: " + privateKeyInfo.privateKeyAlgorithm.algorithmId);
										//endregion
	
										//region Get information about used hash function
										if ("alg" in jwk === false) {
											switch (algorithm.hash.name.toUpperCase()) {
												case "SHA-1":
													jwk.alg = "RS1";
													break;
												case "SHA-256":
													jwk.alg = "RS256";
													break;
												case "SHA-384":
													jwk.alg = "RS384";
													break;
												case "SHA-512":
													jwk.alg = "RS512";
													break;
												default:
													return Promise.reject("Incorrect hash algorithm: " + algorithm.hash.name.toUpperCase());
											}
										}
										//endregion
	
										//region Create RSA Private Key elements
										var privateKeyJSON = privateKeyInfo.toJSON();
	
										var _iteratorNormalCompletion4 = true;
										var _didIteratorError4 = false;
										var _iteratorError4 = undefined;
	
										try {
											for (var _iterator4 = Object.keys(privateKeyJSON)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
												var _key3 = _step4.value;
	
												jwk[_key3] = privateKeyJSON[_key3];
											} //endregion
										} catch (err) {
											_didIteratorError4 = true;
											_iteratorError4 = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion4 && _iterator4.return) {
													_iterator4.return();
												}
											} finally {
												if (_didIteratorError4) {
													throw _iteratorError4;
												}
											}
										}
									}
									break;
								case "ECDSA":
									keyUsages = ["sign"]; // Override existing keyUsages value since the key is a private key
								case "ECDH":
									{
										//region Initial variables
										jwk = {
											kty: "EC",
											ext: extractable,
											key_ops: keyUsages
										};
										//endregion
	
										//region Get information about used hash function
										if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.10045.2.1") return Promise.reject("Incorrect algorithm: " + privateKeyInfo.privateKeyAlgorithm.algorithmId);
										//endregion
	
										//region Create ECDSA Private Key elements
										var _privateKeyJSON = privateKeyInfo.toJSON();
	
										var _iteratorNormalCompletion5 = true;
										var _didIteratorError5 = false;
										var _iteratorError5 = undefined;
	
										try {
											for (var _iterator5 = Object.keys(_privateKeyJSON)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
												var _key4 = _step5.value;
	
												jwk[_key4] = _privateKeyJSON[_key4];
											} //endregion
										} catch (err) {
											_didIteratorError5 = true;
											_iteratorError5 = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion5 && _iterator5.return) {
													_iterator5.return();
												}
											} finally {
												if (_didIteratorError5) {
													throw _iteratorError5;
												}
											}
										}
									}
									break;
								case "RSA-OAEP":
									{
										jwk.kty = "RSA";
										jwk.ext = extractable;
										jwk.key_ops = keyUsages;
	
										//region Get information about used hash function
										if (this.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";else {
											switch (algorithm.hash.name.toUpperCase()) {
												case "SHA-1":
													jwk.alg = "RSA-OAEP-1";
													break;
												case "SHA-256":
													jwk.alg = "RSA-OAEP-256";
													break;
												case "SHA-384":
													jwk.alg = "RSA-OAEP-384";
													break;
												case "SHA-512":
													jwk.alg = "RSA-OAEP-512";
													break;
												default:
													return Promise.reject("Incorrect hash algorithm: " + algorithm.hash.name.toUpperCase());
											}
										}
										//endregion
	
										//region Create RSA Private Key elements
										var _privateKeyJSON2 = privateKeyInfo.toJSON();
	
										var _iteratorNormalCompletion6 = true;
										var _didIteratorError6 = false;
										var _iteratorError6 = undefined;
	
										try {
											for (var _iterator6 = Object.keys(_privateKeyJSON2)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
												var _key5 = _step6.value;
	
												jwk[_key5] = _privateKeyJSON2[_key5];
											} //endregion
										} catch (err) {
											_didIteratorError6 = true;
											_iteratorError6 = err;
										} finally {
											try {
												if (!_iteratorNormalCompletion6 && _iterator6.return) {
													_iterator6.return();
												}
											} finally {
												if (_didIteratorError6) {
													throw _iteratorError6;
												}
											}
										}
									}
									break;
								default:
									return Promise.reject("Incorrect algorithm name: " + algorithm.name.toUpperCase());
							}
						}
						break;
					case "jwk":
						jwk = keyData;
						break;
					default:
						return Promise.reject("Incorrect format: " + format);
				}
	
				//region Special case for Safari browser (since its acting not as WebCrypto standard describes)
				if (this.name.toLowerCase() === "safari") {
					// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)
					return Promise.resolve().then(function () {
						return _this.crypto.importKey("jwk", (0, _pvutils.stringToArrayBuffer)(JSON.stringify(jwk)), algorithm, extractable, keyUsages);
					}).then(function (result) {
						return result;
					}, function (error) {
						return _this.crypto.importKey("jwk", jwk, algorithm, extractable, keyUsages);
					});
				}
				//endregion
	
				return this.crypto.importKey("jwk", jwk, algorithm, extractable, keyUsages);
			}
			//**********************************************************************************
			/**
	   * Export WebCrypto keys to different formats
	   * @param {string} format
	   * @param {Object} key
	   * @returns {Promise}
	   */
	
		}, {
			key: "exportKey",
			value: function exportKey(format, key) {
				var sequence = this.crypto.exportKey("jwk", key);
	
				//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation
				if (this.name.toLowerCase() === "safari") {
					sequence = sequence.then(function (result) {
						// Some additional checks for Safari Technology Preview
						if (result instanceof ArrayBuffer) return JSON.parse((0, _pvutils.arrayBufferToString)(result));
	
						return result;
					});
				}
				//endregion
	
				switch (format.toLowerCase()) {
					case "raw":
						return this.crypto.exportKey("raw", key);
					case "spki":
						sequence = sequence.then(function (result) {
							var publicKeyInfo = new _PublicKeyInfo2.default();
	
							try {
								publicKeyInfo.fromJSON(result);
							} catch (ex) {
								return Promise.reject("Incorrect key data");
							}
	
							return publicKeyInfo.toSchema().toBER(false);
						});
						break;
					case "pkcs8":
						sequence = sequence.then(function (result) {
							var privateKeyInfo = new _PrivateKeyInfo2.default();
	
							try {
								privateKeyInfo.fromJSON(result);
							} catch (ex) {
								return Promise.reject("Incorrect key data");
							}
	
							return privateKeyInfo.toSchema().toBER(false);
						});
						break;
					case "jwk":
						break;
					default:
						return Promise.reject("Incorrect format: " + format);
				}
	
				return sequence;
			}
			//**********************************************************************************
			/**
	   * Convert WebCrypto keys between different export formats
	   * @param {string} inputFormat
	   * @param {string} outputFormat
	   * @param {ArrayBuffer|Object} keyData
	   * @param {Object} algorithm
	   * @param {boolean} extractable
	   * @param {Array} keyUsages
	   * @returns {Promise}
	   */
	
		}, {
			key: "convert",
			value: function convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {
				var _this2 = this;
	
				switch (inputFormat.toLowerCase()) {
					case "raw":
						switch (outputFormat.toLowerCase()) {
							case "raw":
								return Promise.resolve(keyData);
							case "spki":
								return Promise.resolve().then(function () {
									return _this2.importKey("raw", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("spki", result);
								});
							case "pkcs8":
								return Promise.resolve().then(function () {
									return _this2.importKey("raw", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("pkcs8", result);
								});
							case "jwk":
								return Promise.resolve().then(function () {
									return _this2.importKey("raw", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("jwk", result);
								});
							default:
								return Promise.reject("Incorrect outputFormat: " + outputFormat);
						}
					case "spki":
						switch (outputFormat.toLowerCase()) {
							case "raw":
								return Promise.resolve().then(function () {
									return _this2.importKey("spki", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("raw", result);
								});
							case "spki":
								return Promise.resolve(keyData);
							case "pkcs8":
								return Promise.reject("Impossible to convert between SPKI/PKCS8");
							case "jwk":
								return Promise.resolve().then(function () {
									return _this2.importKey("spki", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("jwk", result);
								});
							default:
								return Promise.reject("Incorrect outputFormat: " + outputFormat);
						}
					case "pkcs8":
						switch (outputFormat.toLowerCase()) {
							case "raw":
								return Promise.resolve().then(function () {
									return _this2.importKey("pkcs8", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("raw", result);
								});
							case "spki":
								return Promise.reject("Impossible to convert between SPKI/PKCS8");
							case "pkcs8":
								return Promise.resolve(keyData);
							case "jwk":
								return Promise.resolve().then(function () {
									return _this2.importKey("pkcs8", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("jwk", result);
								});
							default:
								return Promise.reject("Incorrect outputFormat: " + outputFormat);
						}
					case "jwk":
						switch (outputFormat.toLowerCase()) {
							case "raw":
								return Promise.resolve().then(function () {
									return _this2.importKey("jwk", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("raw", result);
								});
							case "spki":
								return Promise.resolve().then(function () {
									return _this2.importKey("jwk", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("spki", result);
								});
							case "pkcs8":
								return Promise.resolve().then(function () {
									return _this2.importKey("jwk", keyData, algorithm, extractable, keyUsages);
								}).then(function (result) {
									return _this2.exportKey("pkcs8", result);
								});
							case "jwk":
								return Promise.resolve(keyData);
							default:
								return Promise.reject("Incorrect outputFormat: " + outputFormat);
						}
					default:
						return Promise.reject("Incorrect inputFormat: " + inputFormat);
				}
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "encrypt"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "encrypt",
			value: function encrypt() {
				var _crypto;
	
				return (_crypto = this.crypto).encrypt.apply(_crypto, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "decrypt"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "decrypt",
			value: function decrypt() {
				var _crypto2;
	
				return (_crypto2 = this.crypto).decrypt.apply(_crypto2, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "sign"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "sign",
			value: function sign() {
				var _crypto3;
	
				return (_crypto3 = this.crypto).sign.apply(_crypto3, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "verify"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _crypto4;
	
				return (_crypto4 = this.crypto).verify.apply(_crypto4, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "digest"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "digest",
			value: function digest() {
				var _crypto5;
	
				return (_crypto5 = this.crypto).digest.apply(_crypto5, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "generateKey"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "generateKey",
			value: function generateKey() {
				var _crypto6;
	
				return (_crypto6 = this.crypto).generateKey.apply(_crypto6, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "deriveKey"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "deriveKey",
			value: function deriveKey() {
				var _crypto7;
	
				return (_crypto7 = this.crypto).deriveKey.apply(_crypto7, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "deriveBits"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "deriveBits",
			value: function deriveBits() {
				var _crypto8;
	
				return (_crypto8 = this.crypto).deriveBits.apply(_crypto8, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "wrapKey"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "wrapKey",
			value: function wrapKey() {
				var _crypto9;
	
				return (_crypto9 = this.crypto).wrapKey.apply(_crypto9, arguments);
			}
			//**********************************************************************************
			/**
	   * Wrapper for standard function "unwrapKey"
	   * @param args
	   * @returns {Promise}
	   */
	
		}, {
			key: "unwrapKey",
			value: function unwrapKey() {
				var _crypto10;
	
				return (_crypto10 = this.crypto).unwrapKey.apply(_crypto10, arguments);
			}
			//**********************************************************************************
	
		}]);
	
		return CryptoEngine;
	}();
	//**************************************************************************************
	
	
	exports.default = CryptoEngine;
	//# sourceMappingURL=CryptoEngine.js.map

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _ECPublicKey = __webpack_require__(383);
	
	var _ECPublicKey2 = _interopRequireDefault(_ECPublicKey);
	
	var _RSAPublicKey = __webpack_require__(384);
	
	var _RSAPublicKey2 = _interopRequireDefault(_RSAPublicKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PublicKeyInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for PublicKeyInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PublicKeyInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PublicKeyInfo);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description Algorithm identifier
	   */
			this.algorithm = (0, _pvutils.getParametersValue)(parameters, "algorithm", PublicKeyInfo.defaultValues("algorithm"));
			/**
	   * @type {BitString}
	   * @description Subject public key value
	   */
			this.subjectPublicKey = (0, _pvutils.getParametersValue)(parameters, "subjectPublicKey", PublicKeyInfo.defaultValues("subjectPublicKey"));
	
			if ("parsedKey" in parameters)
				/**
	    * @type {ECPublicKey|RSAPublicKey}
	    * @description Parsed public key value
	    */
				this.parsedKey = (0, _pvutils.getParametersValue)(parameters, "parsedKey", PublicKeyInfo.defaultValues("parsedKey"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PublicKeyInfo, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({
					names: {
						algorithm: {
							names: {
								blockName: "algorithm"
							}
						},
						subjectPublicKey: "subjectPublicKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PUBLIC_KEY_INFO");
				//endregion
	
				//region Get internal properties from parsed schema
				this.algorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.algorithm });
				this.subjectPublicKey = asn1.result.subjectPublicKey;
	
				switch (this.algorithm.algorithmId) {
					case "1.2.840.10045.2.1":
						// ECDSA
						if ("algorithmParams" in this.algorithm) {
							if (this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {
								this.parsedKey = new _ECPublicKey2.default({
									namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),
									schema: this.subjectPublicKey.valueBlock.valueHex
								});
							}
						}
						break;
					case "1.2.840.113549.1.1.1":
						// RSA
						{
							var publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);
							if (publicKeyASN1.offset !== -1) this.parsedKey = new _RSAPublicKey2.default({ schema: publicKeyASN1.result });
						}
						break;
					default:
				}
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.algorithm.toSchema(), this.subjectPublicKey]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				//region Return common value in case we do not have enough info fo making JWK
				if ("parsedKey" in this === false) {
					return {
						algorithm: this.algorithm.toJSON(),
						subjectPublicKey: this.subjectPublicKey.toJSON()
					};
				}
				//endregion
	
				//region Making JWK
				var jwk = {};
	
				switch (this.algorithm.algorithmId) {
					case "1.2.840.10045.2.1":
						// ECDSA
						jwk.kty = "EC";
						break;
					case "1.2.840.113549.1.1.1":
						// RSA
						jwk.kty = "RSA";
						break;
					default:
				}
	
				var publicKeyJWK = this.parsedKey.toJSON();
	
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = Object.keys(publicKeyJWK)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var key = _step.value;
	
						jwk[key] = publicKeyJWK[key];
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return jwk;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				if ("kty" in json) {
					switch (json.kty.toUpperCase()) {
						case "EC":
							this.parsedKey = new _ECPublicKey2.default({ json: json });
	
							this.algorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.10045.2.1",
								algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })
							});
							break;
						case "RSA":
							this.parsedKey = new _RSAPublicKey2.default({ json: json });
	
							this.algorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.1",
								algorithmParams: new asn1js.Null()
							});
							break;
						default:
							throw new Error("Invalid value for \"kty\" parameter: " + json.kty);
					}
	
					this.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });
				}
			}
	
			//**********************************************************************************
	
		}, {
			key: "importKey",
			value: function importKey(publicKey) {
				//region Initial variables
				var sequence = Promise.resolve();
				var _this = this;
				//endregion
	
				//region Initial check
				if (typeof publicKey === "undefined") return Promise.reject("Need to provide publicKey input parameter");
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Export public key
				sequence = sequence.then(function () {
					return crypto.exportKey("spki", publicKey);
				});
				//endregion
	
				//region Initialize internal variables by parsing exported value
				sequence = sequence.then(function (exportedKey) {
					var asn1 = asn1js.fromBER(exportedKey);
					try {
						_this.fromSchema(asn1.result);
					} catch (exception) {
						return Promise.reject("Error during initializing object from schema");
					}
	
					return undefined;
				}, function (error) {
					return Promise.reject("Error during exporting public key: " + error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "algorithm":
						return new _AlgorithmIdentifier2.default();
					case "subjectPublicKey":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for PublicKeyInfo class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SubjectPublicKeyInfo  ::=  Sequence  {
				//    algorithm            AlgorithmIdentifier,
				//    subjectPublicKey     BIT STRING  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [algorithm]
	    * @property {string} [subjectPublicKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.algorithm || {}), new asn1js.BitString({ name: names.subjectPublicKey || "" })]
				});
			}
		}]);
	
		return PublicKeyInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = PublicKeyInfo;
	//# sourceMappingURL=PublicKeyInfo.js.map

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5480
	 */
	var ECPublicKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for ECCPublicKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ECPublicKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ECPublicKey);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description type
	   */
			this.x = (0, _pvutils.getParametersValue)(parameters, "x", ECPublicKey.defaultValues("x"));
			/**
	   * @type {ArrayBuffer}
	   * @description values
	   */
			this.y = (0, _pvutils.getParametersValue)(parameters, "y", ECPublicKey.defaultValues("y"));
			/**
	   * @type {string}
	   * @description namedCurve
	   */
			this.namedCurve = (0, _pvutils.getParametersValue)(parameters, "namedCurve", ECPublicKey.defaultValues("namedCurve"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ECPublicKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert ArrayBuffer into current class
	   * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				if (schema instanceof ArrayBuffer === false) throw new Error("Object's schema was not verified against input data for ECPublicKey");
	
				var view = new Uint8Array(schema);
				if (view[0] !== 0x04) throw new Error("Object's schema was not verified against input data for ECPublicKey");
				//endregion
	
				//region Get internal properties from parsed schema
				var coordinateLength = void 0;
	
				switch (this.namedCurve) {
					case "1.2.840.10045.3.1.7":
						// P-256
						coordinateLength = 32;
						break;
					case "1.3.132.0.34":
						// P-384
						coordinateLength = 48;
						break;
					case "1.3.132.0.35":
						// P-521
						coordinateLength = 66;
						break;
					default:
						throw new Error("Incorrect curve OID: " + this.namedCurve);
				}
	
				if (schema.byteLength !== coordinateLength * 2 + 1) throw new Error("Object's schema was not verified against input data for ECPublicKey");
	
				this.x = schema.slice(1, coordinateLength + 1);
				this.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				return new asn1js.RawData({ data: (0, _pvutils.utilConcatBuf)(new Uint8Array([0x04]).buffer, this.x, this.y)
				});
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var crvName = "";
	
				switch (this.namedCurve) {
					case "1.2.840.10045.3.1.7":
						// P-256
						crvName = "P-256";
						break;
					case "1.3.132.0.34":
						// P-384
						crvName = "P-384";
						break;
					case "1.3.132.0.35":
						// P-521
						crvName = "P-521";
						break;
					default:
				}
	
				return {
					crv: crvName,
					x: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.x), true, true, true),
					y: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.y), true, true, true)
				};
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				var coodinateLength = 0;
	
				if ("crv" in json) {
					switch (json.crv.toUpperCase()) {
						case "P-256":
							this.namedCurve = "1.2.840.10045.3.1.7";
							coodinateLength = 32;
							break;
						case "P-384":
							this.namedCurve = "1.3.132.0.34";
							coodinateLength = 48;
							break;
						case "P-521":
							this.namedCurve = "1.3.132.0.35";
							coodinateLength = 66;
							break;
						default:
					}
				} else throw new Error("Absent mandatory parameter \"crv\"");
	
				if ("x" in json) this.x = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.x, true)).slice(0, coodinateLength);else throw new Error("Absent mandatory parameter \"x\"");
	
				if ("y" in json) this.y = (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.y, true)).slice(0, coodinateLength);else throw new Error("Absent mandatory parameter \"y\"");
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "x":
					case "y":
						return new ArrayBuffer(0);
					case "namedCurve":
						return "";
					default:
						throw new Error("Invalid member name for ECCPublicKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "x":
					case "y":
						return (0, _pvutils.isEqualBuffer)(memberValue, ECPublicKey.defaultValues(memberName));
					case "namedCurve":
						return memberValue === "";
					default:
						throw new Error("Invalid member name for ECCPublicKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				return new asn1js.RawData();
			}
		}]);
	
		return ECPublicKey;
	}();
	//**************************************************************************************
	
	
	exports.default = ECPublicKey;
	//# sourceMappingURL=ECPublicKey.js.map

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3447
	 */
	var RSAPublicKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for RSAPublicKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {Integer} [modulus]
	  * @property {Integer} [publicExponent]
	  */
		function RSAPublicKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RSAPublicKey);
	
			//region Internal properties of the object
			/**
	   * @type {Integer}
	   * @description Modulus part of RSA public key
	   */
			this.modulus = (0, _pvutils.getParametersValue)(parameters, "modulus", RSAPublicKey.defaultValues("modulus"));
			/**
	   * @type {Integer}
	   * @description Public exponent of RSA public key
	   */
			this.publicExponent = (0, _pvutils.getParametersValue)(parameters, "publicExponent", RSAPublicKey.defaultValues("publicExponent"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RSAPublicKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({
					names: {
						modulus: "modulus",
						publicExponent: "publicExponent"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RSAPublicKey");
				//endregion
	
				//region Get internal properties from parsed schema
				this.modulus = asn1.result.modulus.convertFromDER(256);
				this.publicExponent = asn1.result.publicExponent;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.modulus.convertToDER(), this.publicExponent]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					n: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.modulus.valueBlock.valueHex), true, true, true),
					e: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.publicExponent.valueBlock.valueHex), true, true, true)
				};
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				if ("n" in json) this.modulus = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.n, true)).slice(0, 256) });else throw new Error("Absent mandatory parameter \"n\"");
	
				if ("e" in json) this.publicExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.e, true)).slice(0, 3) });else throw new Error("Absent mandatory parameter \"e\"");
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "modulus":
						return new asn1js.Integer();
					case "publicExponent":
						return new asn1js.Integer();
					default:
						throw new Error("Invalid member name for RSAPublicKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RSAPublicKey ::= Sequence {
				//    modulus           Integer,  -- n
				//    publicExponent    Integer   -- e
				//}
	
				/**
	    * @type {Object}
	    * @property {string} utcTimeName Name for "utcTimeName" choice
	    * @property {string} generalTimeName Name for "generalTimeName" choice
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.modulus || "" }), new asn1js.Integer({ name: names.publicExponent || "" })]
				});
			}
		}]);
	
		return RSAPublicKey;
	}();
	//**************************************************************************************
	
	
	exports.default = RSAPublicKey;
	//# sourceMappingURL=RSAPublicKey.js.map

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _ECPrivateKey = __webpack_require__(387);
	
	var _ECPrivateKey2 = _interopRequireDefault(_ECPrivateKey);
	
	var _RSAPrivateKey = __webpack_require__(388);
	
	var _RSAPrivateKey2 = _interopRequireDefault(_RSAPrivateKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5208
	 */
	var PrivateKeyInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for PrivateKeyInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PrivateKeyInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PrivateKeyInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", PrivateKeyInfo.defaultValues("version"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description privateKeyAlgorithm
	   */
			this.privateKeyAlgorithm = (0, _pvutils.getParametersValue)(parameters, "privateKeyAlgorithm", PrivateKeyInfo.defaultValues("privateKeyAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description privateKey
	   */
			this.privateKey = (0, _pvutils.getParametersValue)(parameters, "privateKey", PrivateKeyInfo.defaultValues("privateKey"));
	
			if ("attributes" in parameters)
				/**
	    * @type {Array.<Attribute>}
	    * @description attributes
	    */
				this.attributes = (0, _pvutils.getParametersValue)(parameters, "attributes", PrivateKeyInfo.defaultValues("attributes"));
	
			if ("parsedKey" in parameters)
				/**
	    * @type {ECPrivateKey|RSAPrivateKey}
	    * @description Parsed public key value
	    */
				this.parsedKey = (0, _pvutils.getParametersValue)(parameters, "parsedKey", PrivateKeyInfo.defaultValues("parsedKey"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PrivateKeyInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({
					names: {
						version: "version",
						privateKeyAlgorithm: {
							names: {
								blockName: "privateKeyAlgorithm"
							}
						},
						privateKey: "privateKey",
						attributes: "attributes"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PKCS8");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.privateKeyAlgorithm });
				this.privateKey = asn1.result.privateKey;
	
				if ("attributes" in asn1.result) this.attributes = Array.from(asn1.result.attributes, function (element) {
					return new _Attribute2.default({ schema: element });
				});
	
				switch (this.privateKeyAlgorithm.algorithmId) {
					case "1.2.840.113549.1.1.1":
						// RSA
						{
							var privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);
							if (privateKeyASN1.offset !== -1) this.parsedKey = new _RSAPrivateKey2.default({ schema: privateKeyASN1.result });
						}
						break;
					case "1.2.840.10045.2.1":
						// ECDSA
						if ("algorithmParams" in this.privateKeyAlgorithm) {
							if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {
								var _privateKeyASN = asn1js.fromBER(this.privateKey.valueBlock.valueHex);
								if (_privateKeyASN.offset !== -1) {
									this.parsedKey = new _ECPrivateKey2.default({
										namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),
										schema: _privateKeyASN.result
									});
								}
							}
						}
						break;
					default:
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [new asn1js.Integer({ value: this.version }), this.privateKeyAlgorithm.toSchema(), this.privateKey];
	
				if ("attributes" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: Array.from(this.attributes, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				//region Return common value in case we do not have enough info fo making JWK
				if ("parsedKey" in this === false) {
					var object = {
						version: this.version,
						privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),
						privateKey: this.privateKey.toJSON()
					};
	
					if ("attributes" in this) object.attributes = Array.from(this.attributes, function (element) {
						return element.toJSON();
					});
	
					return object;
				}
				//endregion
	
				//region Making JWK
				var jwk = {};
	
				switch (this.privateKeyAlgorithm.algorithmId) {
					case "1.2.840.10045.2.1":
						// ECDSA
						jwk.kty = "EC";
						break;
					case "1.2.840.113549.1.1.1":
						// RSA
						jwk.kty = "RSA";
						break;
					default:
				}
	
				var publicKeyJWK = this.parsedKey.toJSON();
	
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = Object.keys(publicKeyJWK)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var key = _step.value;
	
						jwk[key] = publicKeyJWK[key];
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return jwk;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				if ("kty" in json) {
					switch (json.kty.toUpperCase()) {
						case "EC":
							this.parsedKey = new _ECPrivateKey2.default({ json: json });
	
							this.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.10045.2.1",
								algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })
							});
							break;
						case "RSA":
							this.parsedKey = new _RSAPrivateKey2.default({ json: json });
	
							this.privateKeyAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.1",
								algorithmParams: new asn1js.Null()
							});
							break;
						default:
							throw new Error("Invalid value for \"kty\" parameter: " + json.kty);
					}
	
					this.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });
				}
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "privateKeyAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "privateKey":
						return new asn1js.OctetString();
					case "attributes":
						return [];
					default:
						throw new Error("Invalid member name for PrivateKeyInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PrivateKeyInfo ::= SEQUENCE {
				//    version Version,
				//    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
				//    privateKey PrivateKey,
				//    attributes [0] Attributes OPTIONAL }
				//
				//Version ::= INTEGER {v1(0)} (v1,...)
				//
				//PrivateKey ::= OCTET STRING
				//
				//Attributes ::= SET OF Attribute
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [privateKeyAlgorithm]
	    * @property {string} [privateKey]
	    * @property {string} [attributes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), _AlgorithmIdentifier2.default.schema(names.privateKeyAlgorithm || {}), new asn1js.OctetString({ name: names.privateKey || "" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Repeated({
							name: names.attributes || "",
							value: _Attribute2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return PrivateKeyInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = PrivateKeyInfo;
	//# sourceMappingURL=PrivateKeyInfo.js.map

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC2986
	 */
	var Attribute = function () {
		//**********************************************************************************
		/**
	  * Constructor for Attribute class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Attribute() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Attribute);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description type
	   */
			this.type = (0, _pvutils.getParametersValue)(parameters, "type", Attribute.defaultValues("type"));
			/**
	   * @type {Array}
	   * @description values
	   */
			this.values = (0, _pvutils.getParametersValue)(parameters, "values", Attribute.defaultValues("values"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Attribute, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Attribute.schema({
					names: {
						type: "type",
						values: "values"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ATTRIBUTE");
				//endregion
	
				//region Get internal properties from parsed schema
				this.type = asn1.result.type.valueBlock.toString();
				this.values = asn1.result.values;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.type }), new asn1js.Set({
						value: this.values
					})]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					type: this.type,
					values: Array.from(this.values, function (element) {
						return element.toJSON();
					})
				};
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "type":
						return "";
					case "values":
						return [];
					default:
						throw new Error("Invalid member name for Attribute class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "type":
						return memberValue === "";
					case "values":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for Attribute class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
				//    type   ATTRIBUTE.&id({IOSet}),
				//    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.type || "" }), new asn1js.Set({
						name: names.setName || "",
						value: [new asn1js.Repeated({
							name: names.values || "",
							value: new asn1js.Any()
						})]
					})]
				});
			}
		}]);
	
		return Attribute;
	}();
	//**************************************************************************************
	
	
	exports.default = Attribute;
	//# sourceMappingURL=Attribute.js.map

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _ECPublicKey = __webpack_require__(383);
	
	var _ECPublicKey2 = _interopRequireDefault(_ECPublicKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5915
	 */
	var ECPrivateKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for ECCPrivateKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ECPrivateKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ECPrivateKey);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", ECPrivateKey.defaultValues("version"));
			/**
	   * @type {OctetString}
	   * @description privateKey
	   */
			this.privateKey = (0, _pvutils.getParametersValue)(parameters, "privateKey", ECPrivateKey.defaultValues("privateKey"));
	
			if ("namedCurve" in parameters)
				/**
	    * @type {string}
	    * @description namedCurve
	    */
				this.namedCurve = (0, _pvutils.getParametersValue)(parameters, "namedCurve", ECPrivateKey.defaultValues("namedCurve"));
	
			if ("publicKey" in parameters)
				/**
	    * @type {ECPublicKey}
	    * @description publicKey
	    */
				this.publicKey = (0, _pvutils.getParametersValue)(parameters, "publicKey", ECPrivateKey.defaultValues("publicKey"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ECPrivateKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({
					names: {
						version: "version",
						privateKey: "privateKey",
						namedCurve: "namedCurve",
						publicKey: "publicKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ECPrivateKey");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.privateKey = asn1.result.privateKey;
	
				if ("namedCurve" in asn1.result) this.namedCurve = asn1.result.namedCurve.valueBlock.toString();
	
				if ("publicKey" in asn1.result) {
					var publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };
					if ("namedCurve" in this) publicKeyData.namedCurve = this.namedCurve;
	
					this.publicKey = new _ECPublicKey2.default(publicKeyData);
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var outputArray = [new asn1js.Integer({ value: this.version }), this.privateKey];
	
				if ("namedCurve" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.ObjectIdentifier({ value: this.namedCurve })]
					}));
				}
	
				if ("publicKey" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })]
					}));
				}
	
				return new asn1js.Sequence({
					value: outputArray
				});
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				if ("namedCurve" in this === false || ECPrivateKey.compareWithDefault("namedCurve", this.namedCurve)) throw new Error("Not enough information for making JSON: absent \"namedCurve\" value");
	
				var crvName = "";
	
				switch (this.namedCurve) {
					case "1.2.840.10045.3.1.7":
						// P-256
						crvName = "P-256";
						break;
					case "1.3.132.0.34":
						// P-384
						crvName = "P-384";
						break;
					case "1.3.132.0.35":
						// P-521
						crvName = "P-521";
						break;
					default:
				}
	
				var privateKeyJSON = {
					crv: crvName,
					d: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.privateKey.valueBlock.valueHex), true, true, true)
				};
	
				if ("publicKey" in this) {
					var publicKeyJSON = this.publicKey.toJSON();
	
					privateKeyJSON.x = publicKeyJSON.x;
					privateKeyJSON.y = publicKeyJSON.y;
				}
	
				return privateKeyJSON;
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				var coodinateLength = 0;
	
				if ("crv" in json) {
					switch (json.crv.toUpperCase()) {
						case "P-256":
							this.namedCurve = "1.2.840.10045.3.1.7";
							coodinateLength = 32;
							break;
						case "P-384":
							this.namedCurve = "1.3.132.0.34";
							coodinateLength = 48;
							break;
						case "P-521":
							this.namedCurve = "1.3.132.0.35";
							coodinateLength = 66;
							break;
						default:
					}
				} else throw new Error("Absent mandatory parameter \"crv\"");
	
				if ("d" in json) this.privateKey = new asn1js.OctetString({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true)).slice(0, coodinateLength) });else throw new Error("Absent mandatory parameter \"d\"");
	
				if ("x" in json && "y" in json) this.publicKey = new _ECPublicKey2.default({ json: json });
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 1;
					case "privateKey":
						return new asn1js.OctetString();
					case "namedCurve":
						return "";
					case "publicKey":
						return new _ECPublicKey2.default();
					default:
						throw new Error("Invalid member name for ECCPrivateKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === ECPrivateKey.defaultValues(memberName);
					case "privateKey":
						return memberValue.isEqual(ECPrivateKey.defaultValues(memberName));
					case "namedCurve":
						return memberValue === "";
					case "publicKey":
						return _ECPublicKey2.default.compareWithDefault("namedCurve", memberValue.namedCurve) && _ECPublicKey2.default.compareWithDefault("x", memberValue.x) && _ECPublicKey2.default.compareWithDefault("y", memberValue.y);
					default:
						throw new Error("Invalid member name for ECCPrivateKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// ECPrivateKey ::= SEQUENCE {
				// version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
				// privateKey     OCTET STRING,
				// parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
				// publicKey  [1] BIT STRING OPTIONAL
				// }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [privateKey]
	    * @property {string} [namedCurve]
	    * @property {string} [publicKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), new asn1js.OctetString({ name: names.privateKey || "" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.ObjectIdentifier({ name: names.namedCurve || "" })]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.BitString({ name: names.publicKey || "" })]
					})]
				});
			}
		}]);
	
		return ECPrivateKey;
	}();
	//**************************************************************************************
	
	
	exports.default = ECPrivateKey;
	//# sourceMappingURL=ECPrivateKey.js.map

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _OtherPrimeInfo = __webpack_require__(389);
	
	var _OtherPrimeInfo2 = _interopRequireDefault(_OtherPrimeInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3447
	 */
	var RSAPrivateKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for RSAPrivateKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RSAPrivateKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RSAPrivateKey);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", RSAPrivateKey.defaultValues("version"));
			/**
	   * @type {Integer}
	   * @description modulus
	   */
			this.modulus = (0, _pvutils.getParametersValue)(parameters, "modulus", RSAPrivateKey.defaultValues("modulus"));
			/**
	   * @type {Integer}
	   * @description publicExponent
	   */
			this.publicExponent = (0, _pvutils.getParametersValue)(parameters, "publicExponent", RSAPrivateKey.defaultValues("publicExponent"));
			/**
	   * @type {Integer}
	   * @description privateExponent
	   */
			this.privateExponent = (0, _pvutils.getParametersValue)(parameters, "privateExponent", RSAPrivateKey.defaultValues("privateExponent"));
			/**
	   * @type {Integer}
	   * @description prime1
	   */
			this.prime1 = (0, _pvutils.getParametersValue)(parameters, "prime1", RSAPrivateKey.defaultValues("prime1"));
			/**
	   * @type {Integer}
	   * @description prime2
	   */
			this.prime2 = (0, _pvutils.getParametersValue)(parameters, "prime2", RSAPrivateKey.defaultValues("prime2"));
			/**
	   * @type {Integer}
	   * @description exponent1
	   */
			this.exponent1 = (0, _pvutils.getParametersValue)(parameters, "exponent1", RSAPrivateKey.defaultValues("exponent1"));
			/**
	   * @type {Integer}
	   * @description exponent2
	   */
			this.exponent2 = (0, _pvutils.getParametersValue)(parameters, "exponent2", RSAPrivateKey.defaultValues("exponent2"));
			/**
	   * @type {Integer}
	   * @description coefficient
	   */
			this.coefficient = (0, _pvutils.getParametersValue)(parameters, "coefficient", RSAPrivateKey.defaultValues("coefficient"));
	
			if ("otherPrimeInfos" in parameters)
				/**
	    * @type {Array.<OtherPrimeInfo>}
	    * @description otherPrimeInfos
	    */
				this.otherPrimeInfos = (0, _pvutils.getParametersValue)(parameters, "otherPrimeInfos", RSAPrivateKey.defaultValues("otherPrimeInfos"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RSAPrivateKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({
					names: {
						version: "version",
						modulus: "modulus",
						publicExponent: "publicExponent",
						privateExponent: "privateExponent",
						prime1: "prime1",
						prime2: "prime2",
						exponent1: "exponent1",
						exponent2: "exponent2",
						coefficient: "coefficient",
						otherPrimeInfo: {
							names: {
								blockName: "otherPrimeInfos"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RSAPrivateKey");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.modulus = asn1.result.modulus.convertFromDER(256);
				this.publicExponent = asn1.result.publicExponent;
				this.privateExponent = asn1.result.privateExponent.convertFromDER(256);
				this.prime1 = asn1.result.prime1.convertFromDER(128);
				this.prime2 = asn1.result.prime2.convertFromDER(128);
				this.exponent1 = asn1.result.exponent1.convertFromDER(128);
				this.exponent2 = asn1.result.exponent2.convertFromDER(128);
				this.coefficient = asn1.result.coefficient.convertFromDER(128);
	
				if ("otherPrimeInfos" in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, function (element) {
					return new _OtherPrimeInfo2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
				outputArray.push(this.modulus.convertToDER());
				outputArray.push(this.publicExponent);
				outputArray.push(this.privateExponent.convertToDER());
				outputArray.push(this.prime1.convertToDER());
				outputArray.push(this.prime2.convertToDER());
				outputArray.push(this.exponent1.convertToDER());
				outputArray.push(this.exponent2.convertToDER());
				outputArray.push(this.coefficient.convertToDER());
	
				if ("otherPrimeInfos" in this) {
					outputArray.push(new asn1js.Sequence({
						value: Array.from(this.otherPrimeInfos, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var jwk = {
					n: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.modulus.valueBlock.valueHex), true, true, true),
					e: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.publicExponent.valueBlock.valueHex), true, true, true),
					d: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.privateExponent.valueBlock.valueHex), true, true, true),
					p: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime1.valueBlock.valueHex), true, true, true),
					q: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime2.valueBlock.valueHex), true, true, true),
					dp: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent1.valueBlock.valueHex), true, true, true),
					dq: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent2.valueBlock.valueHex), true, true, true),
					qi: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.coefficient.valueBlock.valueHex), true, true, true)
				};
	
				if ("otherPrimeInfos" in this) jwk.oth = Array.from(this.otherPrimeInfos, function (element) {
					return element.toJSON();
				});
	
				return jwk;
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				if ("n" in json) this.modulus = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.n, true, true)) });else throw new Error("Absent mandatory parameter \"n\"");
	
				if ("e" in json) this.publicExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.e, true, true)) });else throw new Error("Absent mandatory parameter \"e\"");
	
				if ("d" in json) this.privateExponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true, true)) });else throw new Error("Absent mandatory parameter \"d\"");
	
				if ("p" in json) this.prime1 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.p, true, true)) });else throw new Error("Absent mandatory parameter \"p\"");
	
				if ("q" in json) this.prime2 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.q, true, true)) });else throw new Error("Absent mandatory parameter \"q\"");
	
				if ("dp" in json) this.exponent1 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.dp, true, true)) });else throw new Error("Absent mandatory parameter \"dp\"");
	
				if ("dq" in json) this.exponent2 = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.dq, true, true)) });else throw new Error("Absent mandatory parameter \"dq\"");
	
				if ("qi" in json) this.coefficient = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.qi, true, true)) });else throw new Error("Absent mandatory parameter \"qi\"");
	
				if ("oth" in json) this.otherPrimeInfos = Array.from(json.oth, function (element) {
					return new _OtherPrimeInfo2.default({ json: element });
				});
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "modulus":
						return new asn1js.Integer();
					case "publicExponent":
						return new asn1js.Integer();
					case "privateExponent":
						return new asn1js.Integer();
					case "prime1":
						return new asn1js.Integer();
					case "prime2":
						return new asn1js.Integer();
					case "exponent1":
						return new asn1js.Integer();
					case "exponent2":
						return new asn1js.Integer();
					case "coefficient":
						return new asn1js.Integer();
					case "otherPrimeInfos":
						return [];
					default:
						throw new Error("Invalid member name for RSAPrivateKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RSAPrivateKey ::= Sequence {
				//    version           Version,
				//    modulus           Integer,  -- n
				//    publicExponent    Integer,  -- e
				//    privateExponent   Integer,  -- d
				//    prime1            Integer,  -- p
				//    prime2            Integer,  -- q
				//    exponent1         Integer,  -- d mod (p-1)
				//    exponent2         Integer,  -- d mod (q-1)
				//    coefficient       Integer,  -- (inverse of q) mod p
				//    otherPrimeInfos   OtherPrimeInfos OPTIONAL
				//}
				//
				//OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [modulus]
	    * @property {string} [publicExponent]
	    * @property {string} [privateExponent]
	    * @property {string} [prime1]
	    * @property {string} [prime2]
	    * @property {string} [exponent1]
	    * @property {string} [exponent2]
	    * @property {string} [coefficient]
	    * @property {string} [otherPrimeInfosName]
	    * @property {Object} [otherPrimeInfo]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), new asn1js.Integer({ name: names.modulus || "" }), new asn1js.Integer({ name: names.publicExponent || "" }), new asn1js.Integer({ name: names.privateExponent || "" }), new asn1js.Integer({ name: names.prime1 || "" }), new asn1js.Integer({ name: names.prime2 || "" }), new asn1js.Integer({ name: names.exponent1 || "" }), new asn1js.Integer({ name: names.exponent2 || "" }), new asn1js.Integer({ name: names.coefficient || "" }), new asn1js.Sequence({
						optional: true,
						value: [new asn1js.Repeated({
							name: names.otherPrimeInfosName || "",
							value: _OtherPrimeInfo2.default.schema(names.otherPrimeInfo || {})
						})]
					})]
				});
			}
		}]);
	
		return RSAPrivateKey;
	}();
	//**************************************************************************************
	
	
	exports.default = RSAPrivateKey;
	//# sourceMappingURL=RSAPrivateKey.js.map

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3447
	 */
	var OtherPrimeInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for OtherPrimeInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OtherPrimeInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OtherPrimeInfo);
	
			//region Internal properties of the object
			/**
	   * @type {Integer}
	   * @description prime
	   */
			this.prime = (0, _pvutils.getParametersValue)(parameters, "prime", OtherPrimeInfo.defaultValues("prime"));
			/**
	   * @type {Integer}
	   * @description exponent
	   */
			this.exponent = (0, _pvutils.getParametersValue)(parameters, "exponent", OtherPrimeInfo.defaultValues("exponent"));
			/**
	   * @type {Integer}
	   * @description coefficient
	   */
			this.coefficient = (0, _pvutils.getParametersValue)(parameters, "coefficient", OtherPrimeInfo.defaultValues("coefficient"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
			//region If input argument array contains "json" for this object
			if ("json" in parameters) this.fromJSON(parameters.json);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OtherPrimeInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({
					names: {
						prime: "prime",
						exponent: "exponent",
						coefficient: "coefficient"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OtherPrimeInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.prime = asn1.result.prime.convertFromDER();
				this.exponent = asn1.result.exponent.convertFromDER();
				this.coefficient = asn1.result.coefficient.convertFromDER();
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.prime.convertToDER(), this.exponent.convertToDER(), this.coefficient.convertToDER()]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					r: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.prime.valueBlock.valueHex), true, true),
					d: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.exponent.valueBlock.valueHex), true, true),
					t: (0, _pvutils.toBase64)((0, _pvutils.arrayBufferToString)(this.coefficient.valueBlock.valueHex), true, true)
				};
			}
			//**********************************************************************************
			/**
	   * Convert JSON value into current object
	   * @param {Object} json
	   */
	
		}, {
			key: "fromJSON",
			value: function fromJSON(json) {
				if ("r" in json) this.prime = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.r, true)) });else throw new Error("Absent mandatory parameter \"r\"");
	
				if ("d" in json) this.exponent = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.d, true)) });else throw new Error("Absent mandatory parameter \"d\"");
	
				if ("t" in json) this.coefficient = new asn1js.Integer({ valueHex: (0, _pvutils.stringToArrayBuffer)((0, _pvutils.fromBase64)(json.t, true)) });else throw new Error("Absent mandatory parameter \"t\"");
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "prime":
						return new asn1js.Integer();
					case "exponent":
						return new asn1js.Integer();
					case "coefficient":
						return new asn1js.Integer();
					default:
						throw new Error("Invalid member name for OtherPrimeInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OtherPrimeInfo ::= Sequence {
				//    prime             Integer,  -- ri
				//    exponent          Integer,  -- di
				//    coefficient       Integer   -- ti
				//}
	
				/**
	    * @type {Object}
	    * @property {string} prime
	    * @property {string} exponent
	    * @property {string} coefficient
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.prime || "" }), new asn1js.Integer({ name: names.exponent || "" }), new asn1js.Integer({ name: names.coefficient || "" })]
				});
			}
		}]);
	
		return OtherPrimeInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = OtherPrimeInfo;
	//# sourceMappingURL=OtherPrimeInfo.js.map

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var AccessDescription = function () {
		//**********************************************************************************
		/**
	  * Constructor for AccessDescription class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function AccessDescription() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AccessDescription);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description accessMethod
	   */
			this.accessMethod = (0, _pvutils.getParametersValue)(parameters, "accessMethod", AccessDescription.defaultValues("accessMethod"));
			/**
	   * @type {GeneralName}
	   * @description accessLocation
	   */
			this.accessLocation = (0, _pvutils.getParametersValue)(parameters, "accessLocation", AccessDescription.defaultValues("accessLocation"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AccessDescription, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({
					names: {
						accessMethod: "accessMethod",
						accessLocation: {
							names: {
								blockName: "accessLocation"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for AccessDescription");
				//endregion
	
				//region Get internal properties from parsed schema
				this.accessMethod = asn1.result.accessMethod.valueBlock.toString();
				this.accessLocation = new _GeneralName2.default({ schema: asn1.result.accessLocation });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.accessMethod }), this.accessLocation.toSchema()]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					accessMethod: this.accessMethod,
					accessLocation: this.accessLocation.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "accessMethod":
						return "";
					case "accessLocation":
						return new _GeneralName2.default();
					default:
						throw new Error("Invalid member name for AccessDescription class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//AccessDescription  ::=  SEQUENCE {
				//    accessMethod          OBJECT IDENTIFIER,
				//    accessLocation        GeneralName  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [accessMethod]
	    * @property {string} [accessLocation]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.accessMethod || "" }), _GeneralName2.default.schema(names.accessLocation || {})]
				});
			}
		}]);
	
		return AccessDescription;
	}();
	//**************************************************************************************
	
	
	exports.default = AccessDescription;
	//# sourceMappingURL=AccessDescription.js.map

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	//region Additional asn1js schema elements existing inside GENERAL_NAME schema
	//**************************************************************************************
	/**
	 * Schema for "builtInStandardAttributes" of "ORAddress"
	 * @param {Object} parameters
	 * @property {Object} [names]
	 * @param {boolean} optional
	 * @returns {Sequence}
	 */
	function builtInStandardAttributes() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
		//builtInStandardAttributes ::= Sequence {
		//    country-name                  CountryName OPTIONAL,
		//    administration-domain-name    AdministrationDomainName OPTIONAL,
		//    network-address           [0] IMPLICIT NetworkAddress OPTIONAL,
		//    terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,
		//    private-domain-name       [2] PrivateDomainName OPTIONAL,
		//    organization-name         [3] IMPLICIT OrganizationName OPTIONAL,
		//    numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,
		//    personal-name             [5] IMPLICIT PersonalName OPTIONAL,
		//    organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }
	
		/**
	  * @type {Object}
	  * @property {string} [country_name]
	  * @property {string} [administration_domain_name]
	  * @property {string} [network_address]
	  * @property {string} [terminal_identifier]
	  * @property {string} [private_domain_name]
	  * @property {string} [organization_name]
	  * @property {string} [numeric_user_identifier]
	  * @property {string} [personal_name]
	  * @property {string} [organizational_unit_names]
	  */
		var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
		return new asn1js.Sequence({
			optional: optional,
			value: [new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 2, // APPLICATION-SPECIFIC
					tagNumber: 1 // [1]
				},
				name: names.country_name || "",
				value: [new asn1js.Choice({
					value: [new asn1js.NumericString(), new asn1js.PrintableString()]
				})]
			}), new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 2, // APPLICATION-SPECIFIC
					tagNumber: 2 // [2]
				},
				name: names.administration_domain_name || "",
				value: [new asn1js.Choice({
					value: [new asn1js.NumericString(), new asn1js.PrintableString()]
				})]
			}), new asn1js.Primitive({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 0 // [0]
				},
				name: names.network_address || "",
				isHexOnly: true
			}), new asn1js.Primitive({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 1 // [1]
				},
				name: names.terminal_identifier || "",
				isHexOnly: true
			}), new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 2 // [2]
				},
				name: names.private_domain_name || "",
				value: [new asn1js.Choice({
					value: [new asn1js.NumericString(), new asn1js.PrintableString()]
				})]
			}), new asn1js.Primitive({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 3 // [3]
				},
				name: names.organization_name || "",
				isHexOnly: true
			}), new asn1js.Primitive({
				optional: true,
				name: names.numeric_user_identifier || "",
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 4 // [4]
				},
				isHexOnly: true
			}), new asn1js.Constructed({
				optional: true,
				name: names.personal_name || "",
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 5 // [5]
				},
				value: [new asn1js.Primitive({
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 0 // [0]
					},
					isHexOnly: true
				}), new asn1js.Primitive({
					optional: true,
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 1 // [1]
					},
					isHexOnly: true
				}), new asn1js.Primitive({
					optional: true,
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 2 // [2]
					},
					isHexOnly: true
				}), new asn1js.Primitive({
					optional: true,
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 3 // [3]
					},
					isHexOnly: true
				})]
			}), new asn1js.Constructed({
				optional: true,
				name: names.organizational_unit_names || "",
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 6 // [6]
				},
				value: [new asn1js.Repeated({
					value: new asn1js.PrintableString()
				})]
			})]
		});
	}
	//**************************************************************************************
	/**
	 * Schema for "builtInDomainDefinedAttributes" of "ORAddress"
	 * @param {boolean} optional
	 * @returns {Sequence}
	 */
	function builtInDomainDefinedAttributes() {
		var optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
		return new asn1js.Sequence({
			optional: optional,
			value: [new asn1js.PrintableString(), new asn1js.PrintableString()]
		});
	}
	//**************************************************************************************
	/**
	 * Schema for "builtInDomainDefinedAttributes" of "ORAddress"
	 * @param {boolean} optional
	 * @returns {Set}
	 */
	function extensionAttributes() {
		var optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
		return new asn1js.Set({
			optional: optional,
			value: [new asn1js.Primitive({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 0 // [0]
				},
				isHexOnly: true
			}), new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 1 // [1]
				},
				value: [new asn1js.Any()]
			})]
		});
	}
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	
	var GeneralName = function () {
		//**********************************************************************************
		/**
	  * Constructor for GeneralName class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {number} [type] value type - from a tagged value (0 for "otherName", 1 for "rfc822Name" etc.)
	  * @property {Object} [value] asn1js object having GENERAL_NAME value (type depends on "type" value)
	  */
		function GeneralName() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GeneralName);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description value type - from a tagged value (0 for "otherName", 1 for "rfc822Name" etc.)
	   */
			this.type = (0, _pvutils.getParametersValue)(parameters, "type", GeneralName.defaultValues("type"));
			/**
	   * @type {Object}
	   * @description asn1js object having GENERAL_NAME value (type depends on "type" value)
	   */
			this.value = (0, _pvutils.getParametersValue)(parameters, "value", GeneralName.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(GeneralName, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, GeneralName.schema({
					names: {
						blockName: "blockName",
						otherName: "otherName",
						rfc822Name: "rfc822Name",
						dNSName: "dNSName",
						x400Address: "x400Address",
						directoryName: {
							names: {
								blockName: "directoryName"
							}
						},
						ediPartyName: "ediPartyName",
						uniformResourceIdentifier: "uniformResourceIdentifier",
						iPAddress: "iPAddress",
						registeredID: "registeredID"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for GENERAL_NAME");
				//endregion
	
				//region Get internal properties from parsed schema
				this.type = asn1.result.blockName.idBlock.tagNumber;
	
				switch (this.type) {
					case 0:
						// otherName
						this.value = asn1.result.blockName;
						break;
					case 1: // rfc822Name + dNSName + uniformResourceIdentifier
					case 2:
					case 6:
						{
							var value = asn1.result.blockName;
	
							value.idBlock.tagClass = 1; // UNIVERSAL
							value.idBlock.tagNumber = 22; // IA5STRING
	
							var valueBER = value.toBER(false);
	
							this.value = asn1js.fromBER(valueBER).result.valueBlock.value;
						}
						break;
					case 3:
						// x400Address
						this.value = asn1.result.blockName;
						break;
					case 4:
						// directoryName
						this.value = new _RelativeDistinguishedNames2.default({ schema: asn1.result.directoryName });
						break;
					case 5:
						// ediPartyName
						this.value = asn1.result.ediPartyName;
						break;
					case 7:
						// iPAddress
						this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });
						break;
					case 8:
						// registeredID
						{
							var _value = asn1.result.blockName;
	
							_value.idBlock.tagClass = 1; // UNIVERSAL
							_value.idBlock.tagNumber = 6; // ObjectIdentifier
	
							var _valueBER = _value.toBER(false);
	
							this.value = asn1js.fromBER(_valueBER).result.valueBlock.toString(); // Getting a string representation of the ObjectIdentifier
						}
						break;
					default:
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				switch (this.type) {
					case 0:
					case 3:
					case 5:
						return new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: this.type
							},
							value: [this.value]
						});
					case 1:
					case 2:
					case 6:
						{
							var value = new asn1js.IA5String({ value: this.value });
	
							value.idBlock.tagClass = 3;
							value.idBlock.tagNumber = this.type;
	
							return value;
						}
					case 4:
						return new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 4
							},
							value: [this.value.toSchema()]
						});
					case 7:
						{
							var _value2 = this.value;
	
							_value2.idBlock.tagClass = 3;
							_value2.idBlock.tagNumber = this.type;
	
							return _value2;
						}
					case 8:
						{
							var _value3 = new asn1js.ObjectIdentifier({ value: this.value });
	
							_value3.idBlock.tagClass = 3;
							_value3.idBlock.tagNumber = this.type;
	
							return _value3;
						}
					default:
						return GeneralName.schema();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					type: this.type
				};
	
				if (typeof this.value === "string") _object.value = this.value;else _object.value = this.value.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "type":
						return 9;
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for GeneralName class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "type":
						return memberValue === GeneralName.defaultValues(memberName);
					case "value":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for GeneralName class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//GeneralName ::= Choice {
				//    otherName                       [0]     OtherName,
				//    rfc822Name                      [1]     IA5String,
				//    dNSName                         [2]     IA5String,
				//    x400Address                     [3]     ORAddress,
				//    directoryName                   [4]     value,
				//    ediPartyName                    [5]     EDIPartyName,
				//    uniformResourceIdentifier       [6]     IA5String,
				//    iPAddress                       [7]     OCTET STRING,
				//    registeredID                    [8]     OBJECT IDENTIFIER }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {Object} [directoryName]
	    * @property {Object} [builtInStandardAttributes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					value: [new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						name: names.blockName || "",
						value: [new asn1js.ObjectIdentifier(), new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [new asn1js.Any()]
						})]
					}), new asn1js.Primitive({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					}), new asn1js.Primitive({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						}
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						name: names.blockName || "",
						value: [builtInStandardAttributes(names.builtInStandardAttributes || {}, false), builtInDomainDefinedAttributes(true), extensionAttributes(true)]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 4 // [4]
						},
						name: names.blockName || "",
						value: [_RelativeDistinguishedNames2.default.schema(names.directoryName || {})]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 5 // [5]
						},
						name: names.blockName || "",
						value: [new asn1js.Constructed({
							optional: true,
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [new asn1js.Choice({
								value: [new asn1js.TeletexString(), new asn1js.PrintableString(), new asn1js.UniversalString(), new asn1js.Utf8String(), new asn1js.BmpString()]
							})]
						}), new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 1 // [1]
							},
							value: [new asn1js.Choice({
								value: [new asn1js.TeletexString(), new asn1js.PrintableString(), new asn1js.UniversalString(), new asn1js.Utf8String(), new asn1js.BmpString()]
							})]
						})]
					}), new asn1js.Primitive({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 6 // [6]
						}
					}), new asn1js.Primitive({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 7 // [7]
						}
					}), new asn1js.Primitive({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 8 // [8]
						}
					})]
				});
			}
		}]);
	
		return GeneralName;
	}();
	//**************************************************************************************
	
	
	exports.default = GeneralName;
	//# sourceMappingURL=GeneralName.js.map

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AttributeTypeAndValue = __webpack_require__(393);
	
	var _AttributeTypeAndValue2 = _interopRequireDefault(_AttributeTypeAndValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var RelativeDistinguishedNames = function () {
		//**********************************************************************************
		/**
	  * Constructor for RelativeDistinguishedNames class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of "type and value" objects
	  * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema
	  */
		function RelativeDistinguishedNames() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RelativeDistinguishedNames);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<AttributeTypeAndValue>}
	   * @description Array of "type and value" objects
	   */
			this.typesAndValues = (0, _pvutils.getParametersValue)(parameters, "typesAndValues", RelativeDistinguishedNames.defaultValues("typesAndValues"));
			/**
	   * @type {ArrayBuffer}
	   * @description Value of the RDN before decoding from schema
	   */
			this.valueBeforeDecode = (0, _pvutils.getParametersValue)(parameters, "valueBeforeDecode", RelativeDistinguishedNames.defaultValues("valueBeforeDecode"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RelativeDistinguishedNames, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				/**
	    * @type {{verified: boolean}|{verified: boolean, result: {RDN: Object, typesAndValues: Array.<Object>}}}
	    */
				var asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({
					names: {
						blockName: "RDN",
						repeatedSet: "typesAndValues"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RDN");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("typesAndValues" in asn1.result) // Could be a case when there is no "types and values"
					this.typesAndValues = Array.from(asn1.result.typesAndValues, function (element) {
						return new _AttributeTypeAndValue2.default({ schema: element });
					});
	
				this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Decode stored TBS value
				if (this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create "from scratch"
					{
						return new asn1js.Sequence({
							value: [new asn1js.Set({
								value: Array.from(this.typesAndValues, function (element) {
									return element.toSchema();
								})
							})]
						});
					}
	
				var asn1 = asn1js.fromBER(this.valueBeforeDecode);
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return asn1.result;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					typesAndValues: Array.from(this.typesAndValues, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
			/**
	   * Compare two RDN values, or RDN with ArrayBuffer value
	   * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current
	   * @returns {boolean}
	   */
	
		}, {
			key: "isEqual",
			value: function isEqual(compareTo) {
				if (compareTo instanceof RelativeDistinguishedNames) {
					if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;
	
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;
	
					try {
						for (var _iterator = this.typesAndValues.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var _step$value = _slicedToArray(_step.value, 2),
							    index = _step$value[0],
							    typeAndValue = _step$value[1];
	
							if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}
	
					return true;
				}
	
				if (compareTo instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.valueBeforeDecode, compareTo);
	
				return false;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "typesAndValues":
						return [];
					case "valueBeforeDecode":
						return new ArrayBuffer(0);
					default:
						throw new Error("Invalid member name for RelativeDistinguishedNames class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "typesAndValues":
						return memberValue.length === 0;
					case "valueBeforeDecode":
						return memberValue.byteLength === 0;
					default:
						throw new Error("Invalid member name for RelativeDistinguishedNames class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RDNSequence ::= Sequence OF RelativeDistinguishedName
				//
				//RelativeDistinguishedName ::=
				//SET SIZE (1..MAX) OF AttributeTypeAndValue
	
				/**
	    * @type {Object}
	    * @property {string} [blockName] Name for entire block
	    * @property {string} [repeatedSequence] Name for "repeatedSequence" block
	    * @property {string} [repeatedSet] Name for "repeatedSet" block
	    * @property {string} [typeAndValue] Name for "typeAndValue" block
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.repeatedSequence || "",
						value: new asn1js.Set({
							value: [new asn1js.Repeated({
								name: names.repeatedSet || "",
								value: _AttributeTypeAndValue2.default.schema(names.typeAndValue || {})
							})]
						})
					})]
				});
			}
		}]);
	
		return RelativeDistinguishedNames;
	}();
	//**************************************************************************************
	
	
	exports.default = RelativeDistinguishedNames;
	//# sourceMappingURL=RelativeDistinguishedNames.js.map

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var AttributeTypeAndValue = function () {
		//**********************************************************************************
		/**
	  * Constructor for AttributeTypeAndValue class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function AttributeTypeAndValue() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AttributeTypeAndValue);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description type
	   */
			this.type = (0, _pvutils.getParametersValue)(parameters, "type", AttributeTypeAndValue.defaultValues("type"));
			/**
	   * @type {Object}
	   * @description Value of the AttributeTypeAndValue class
	   */
			this.value = (0, _pvutils.getParametersValue)(parameters, "value", AttributeTypeAndValue.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AttributeTypeAndValue, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				/**
	    * @type {{verified: boolean}|{verified: boolean, result: {type: Object, typeValue: Object}}}
	    */
				var asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({
					names: {
						type: "type",
						value: "typeValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ATTR_TYPE_AND_VALUE");
				//endregion
	
				//region Get internal properties from parsed schema
				this.type = asn1.result.type.valueBlock.toString();
				this.value = asn1.result.typeValue;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.type }), this.value]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					type: this.type
				};
	
				if (Object.keys(this.value).length !== 0) _object.value = this.value.toJSON();else _object.value = this.value;
	
				return _object;
			}
			//**********************************************************************************
			/**
	   * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value
	   * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current
	   * @returns {boolean}
	   */
	
		}, {
			key: "isEqual",
			value: function isEqual(compareTo) {
				if (compareTo instanceof AttributeTypeAndValue) {
					if (this.type !== compareTo.type) return false;
	
					if (this.value instanceof asn1js.Utf8String && compareTo.value instanceof asn1js.Utf8String || this.value instanceof asn1js.BmpString && compareTo.value instanceof asn1js.BmpString || this.value instanceof asn1js.UniversalString && compareTo.value instanceof asn1js.UniversalString || this.value instanceof asn1js.NumericString && compareTo.value instanceof asn1js.NumericString || this.value instanceof asn1js.PrintableString && compareTo.value instanceof asn1js.PrintableString || this.value instanceof asn1js.TeletexString && compareTo.value instanceof asn1js.TeletexString || this.value instanceof asn1js.VideotexString && compareTo.value instanceof asn1js.VideotexString || this.value instanceof asn1js.IA5String && compareTo.value instanceof asn1js.IA5String || this.value instanceof asn1js.GraphicString && compareTo.value instanceof asn1js.GraphicString || this.value instanceof asn1js.VisibleString && compareTo.value instanceof asn1js.VisibleString || this.value instanceof asn1js.GeneralString && compareTo.value instanceof asn1js.GeneralString || this.value instanceof asn1js.CharacterString && compareTo.value instanceof asn1js.CharacterString) {
						var value1 = (0, _common.stringPrep)(this.value.valueBlock.value);
						var value2 = (0, _common.stringPrep)(compareTo.value.valueBlock.value);
	
						if (value1.localeCompare(value2) !== 0) return false;
					} else // Comparing as two ArrayBuffers
						{
							if ((0, _pvutils.isEqualBuffer)(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false) return false;
						}
	
					return true;
				}
	
				if (compareTo instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.value.valueBeforeDecode, compareTo);
	
				return false;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "type":
						return "";
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for AttributeTypeAndValue class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//AttributeTypeAndValue ::= Sequence {
				//    type     AttributeType,
				//    value    AttributeValue }
				//
				//AttributeType ::= OBJECT IDENTIFIER
				//
				//AttributeValue ::= ANY -- DEFINED BY AttributeType
	
				/**
	    * @type {Object}
	    * @property {string} [blockName] Name for entire block
	    * @property {string} [type] Name for "type" element
	    * @property {string} [value] Name for "value" element
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.type || "" }), new asn1js.Any({ name: names.value || "" })]
				});
			}
		}]);
	
		return AttributeTypeAndValue;
	}();
	//**************************************************************************************
	
	
	exports.default = AttributeTypeAndValue;
	//# sourceMappingURL=AttributeTypeAndValue.js.map

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var Accuracy = function () {
		//**********************************************************************************
		/**
	  * Constructor for Accuracy class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Accuracy() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Accuracy);
	
			//region Internal properties of the object
			if ("seconds" in parameters)
				/**
	    * @type {number}
	    * @description seconds
	    */
				this.seconds = (0, _pvutils.getParametersValue)(parameters, "seconds", Accuracy.defaultValues("seconds"));
	
			if ("millis" in parameters)
				/**
	    * @type {number}
	    * @description millis
	    */
				this.millis = (0, _pvutils.getParametersValue)(parameters, "millis", Accuracy.defaultValues("millis"));
	
			if ("micros" in parameters)
				/**
	    * @type {number}
	    * @description micros
	    */
				this.micros = (0, _pvutils.getParametersValue)(parameters, "micros", Accuracy.defaultValues("micros"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Accuracy, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({
					names: {
						seconds: "seconds",
						millis: "millis",
						micros: "micros"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for tsp.Accuracy");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("seconds" in asn1.result) this.seconds = asn1.result.seconds.valueBlock.valueDec;
	
				if ("millis" in asn1.result) {
					var intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });
					this.millis = intMillis.valueBlock.valueDec;
				}
	
				if ("micros" in asn1.result) {
					var intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });
					this.micros = intMicros.valueBlock.valueDec;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array of output sequence
				var outputArray = [];
	
				if ("seconds" in this) outputArray.push(new asn1js.Integer({ value: this.seconds }));
	
				if ("millis" in this) {
					var intMillis = new asn1js.Integer({ value: this.millis });
	
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						valueHex: intMillis.valueBlock.valueHex
					}));
				}
	
				if ("micros" in this) {
					var intMicros = new asn1js.Integer({ value: this.micros });
	
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						valueHex: intMicros.valueBlock.valueHex
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {};
	
				if ("seconds" in this) _object.seconds = this.seconds;
	
				if ("millis" in this) _object.millis = this.millis;
	
				if ("micros" in this) _object.micros = this.micros;
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "seconds":
					case "millis":
					case "micros":
						return 0;
					default:
						throw new Error("Invalid member name for Accuracy class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "seconds":
					case "millis":
					case "micros":
						return memberValue === Accuracy.defaultValues(memberName);
					default:
						throw new Error("Invalid member name for Accuracy class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//Accuracy ::= SEQUENCE {
				//    seconds        INTEGER              OPTIONAL,
				//    millis     [0] INTEGER  (1..999)    OPTIONAL,
				//    micros     [1] INTEGER  (1..999)    OPTIONAL  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [seconds]
	    * @property {string} [millis]
	    * @property {string} [micros]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					optional: true,
					value: [new asn1js.Integer({
						optional: true,
						name: names.seconds || ""
					}), new asn1js.Primitive({
						name: names.millis || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						}
					}), new asn1js.Primitive({
						name: names.micros || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					})]
				});
			}
		}]);
	
		return Accuracy;
	}();
	//**************************************************************************************
	
	
	exports.default = Accuracy;
	//# sourceMappingURL=Accuracy.js.map

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var AltName = function () {
		//**********************************************************************************
		/**
	  * Constructor for AltName class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function AltName() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AltName);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<GeneralName>}
	   * @description type
	   */
			this.altNames = (0, _pvutils.getParametersValue)(parameters, "altNames", AltName.defaultValues("altNames"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AltName, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, AltName.schema({
					names: {
						altNames: "altNames"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for AltName");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("altNames" in asn1.result) this.altNames = Array.from(asn1.result.altNames, function (element) {
					return new _GeneralName2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.altNames, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					altNames: Array.from(this.altNames, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "altNames":
						return [];
					default:
						throw new Error("Invalid member name for AltName class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// SubjectAltName OID ::= 2.5.29.17
				// IssuerAltName OID ::= 2.5.29.18
				//
				// AltName ::= GeneralNames
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [altNames]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.altNames || "",
						value: _GeneralName2.default.schema()
					})]
				});
			}
		}]);
	
		return AltName;
	}();
	//**************************************************************************************
	
	
	exports.default = AltName;
	//# sourceMappingURL=AltName.js.map

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _ContentInfo = __webpack_require__(397);
	
	var _ContentInfo2 = _interopRequireDefault(_ContentInfo);
	
	var _SafeContents = __webpack_require__(398);
	
	var _SafeContents2 = _interopRequireDefault(_SafeContents);
	
	var _EnvelopedData = __webpack_require__(432);
	
	var _EnvelopedData2 = _interopRequireDefault(_EnvelopedData);
	
	var _EncryptedData = __webpack_require__(401);
	
	var _EncryptedData2 = _interopRequireDefault(_EncryptedData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var AuthenticatedSafe = function () {
		//**********************************************************************************
		/**
	  * Constructor for AuthenticatedSafe class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function AuthenticatedSafe() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AuthenticatedSafe);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<ContentInfo>}
	   * @description safeContents
	   */
			this.safeContents = (0, _pvutils.getParametersValue)(parameters, "safeContents", AuthenticatedSafe.defaultValues("safeContents"));
	
			if ("parsedValue" in parameters)
				/**
	    * @type {*}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", AuthenticatedSafe.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AuthenticatedSafe, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({
					names: {
						contentInfos: "contentInfos"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for AuthenticatedSafe");
				//endregion
	
				//region Get internal properties from parsed schema
				this.safeContents = Array.from(asn1.result.contentInfos, function (element) {
					return new _ContentInfo2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.safeContents, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					safeContents: Array.from(this.safeContents, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}, {
			key: "parseInternalValues",
			value: function parseInternalValues(parameters) {
				var _this = this;
	
				//region Check input data from "parameters" 
				if (parameters instanceof Object === false) return Promise.reject("The \"parameters\" must has \"Object\" type");
	
				if ("safeContents" in parameters === false) return Promise.reject("Absent mandatory parameter \"safeContents\"");
	
				if (parameters.safeContents instanceof Array === false) return Promise.reject("The \"parameters.safeContents\" must has \"Array\" type");
	
				if (parameters.safeContents.length !== this.safeContents.length) return Promise.reject("Length of \"parameters.safeContents\" must be equal to \"this.safeContents.length\"");
				//endregion 
	
				//region Initial variables 
				var sequence = Promise.resolve();
				//endregion
	
				//region Create value for "this.parsedValue.authenticatedSafe" 
				this.parsedValue = {
					safeContents: []
				};
	
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = this.safeContents.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var _step$value = _slicedToArray(_step.value, 2),
						    index = _step$value[0],
						    content = _step$value[1];
	
						switch (content.contentType) {
							//region data 
							case "1.2.840.113549.1.7.1":
								{
									//region Check that we do have OCTETSTRING as "content"
									if (content.content instanceof asn1js.OctetString === false) return Promise.reject("Wrong type of \"this.safeContents[j].content\"");
									//endregion
	
									//region Parse internal ASN.1 data
									var asn1 = asn1js.fromBER(content.content.valueBlock.valueHex);
									if (asn1.offset === -1) return Promise.reject("Error during parsing of ASN.1 data inside \"content.content\"");
									//endregion
	
									//region Finilly initialize initial values of "SafeContents" type
									this.parsedValue.safeContents.push({
										privacyMode: 0, // No privacy, clear data
										value: new _SafeContents2.default({ schema: asn1.result })
									});
									//endregion
								}
								break;
							//endregion 
							//region envelopedData 
							case "1.2.840.113549.1.7.3":
								{
									var _ret = function () {
										//region Initial variables
										var cmsEnveloped = new _EnvelopedData2.default({ schema: content.content });
										//endregion
	
										//region Check mandatory parameters
										if ("recipientCertificate" in parameters.safeContents[index] === false) return {
												v: Promise.reject("Absent mandatory parameter \"recipientCertificate\" in \"parameters.safeContents[j]\"")
											};
	
										var recipientCertificate = parameters.safeContents[index].recipientCertificate;
	
										if ("recipientKey" in parameters.safeContents[index] === false) return {
												v: Promise.reject("Absent mandatory parameter \"recipientKey\" in \"parameters.safeContents[j]\"")
											};
	
										var recipientKey = parameters.safeContents[index].recipientKey;
										//endregion
	
										//region Decrypt CMS EnvelopedData using first recipient information
										sequence = sequence.then(function () {
											return cmsEnveloped.decrypt(0, {
												recipientCertificate: recipientCertificate,
												recipientPrivateKey: recipientKey
											});
										});
	
										sequence = sequence.then(function (result) {
											var asn1 = asn1js.fromBER(result);
											if (asn1.offset === -1) return Promise.reject("Error during parsing of decrypted data");
	
											_this.parsedValue.safeContents.push({
												privacyMode: 2, // Public-key privacy mode
												value: new _SafeContents2.default({ schema: asn1.result })
											});
	
											return Promise.resolve();
										});
										//endregion
									}();
	
									if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
								}
								break;
							//endregion   
							//region encryptedData 
							case "1.2.840.113549.1.7.6":
								{
									var _ret2 = function () {
										//region Initial variables
										var cmsEncrypted = new _EncryptedData2.default({ schema: content.content });
										//endregion
	
										//region Check mandatory parameters
										if ("password" in parameters.safeContents[index] === false) return {
												v: Promise.reject("Absent mandatory parameter \"password\" in \"parameters.safeContents[j]\"")
											};
	
										var password = parameters.safeContents[index].password;
										//endregion
	
										//region Decrypt CMS EncryptedData using password
										sequence = sequence.then(function () {
											return cmsEncrypted.decrypt({
												password: password
											});
										}, function (error) {
											return Promise.reject(error);
										});
										//endregion
	
										//region Initialize internal data
										sequence = sequence.then(function (result) {
											var asn1 = asn1js.fromBER(result);
											if (asn1.offset === -1) return Promise.reject("Error during parsing of decrypted data");
	
											_this.parsedValue.safeContents.push({
												privacyMode: 1, // Password-based privacy mode
												value: new _SafeContents2.default({ schema: asn1.result })
											});
	
											return Promise.resolve();
										}, function (error) {
											return Promise.reject(error);
										});
										//endregion
									}();
	
									if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
								}
								break;
							//endregion   
							//region default 
							default:
								throw new Error("Unknown \"contentType\" for AuthenticatedSafe: \" " + content.contentType);
							//endregion 
						}
					}
					//endregion 
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return sequence;
			}
			//**********************************************************************************
	
		}, {
			key: "makeInternalValues",
			value: function makeInternalValues(parameters) {
				var _this2 = this;
	
				//region Check data in "parsedValue" 
				if ("parsedValue" in this === false) return Promise.reject("Please run \"parseValues\" first or add \"parsedValue\" manually");
	
				if (this.parsedValue instanceof Object === false) return Promise.reject("The \"this.parsedValue\" must has \"Object\" type");
	
				if (this.parsedValue.safeContents instanceof Array === false) return Promise.reject("The \"this.parsedValue.safeContents\" must has \"Array\" type");
				//endregion 
	
				//region Check input data from "parameters" 
				if (parameters instanceof Object === false) return Promise.reject("The \"parameters\" must has \"Object\" type");
	
				if ("safeContents" in parameters === false) return Promise.reject("Absent mandatory parameter \"safeContents\"");
	
				if (parameters.safeContents instanceof Array === false) return Promise.reject("The \"parameters.safeContents\" must has \"Array\" type");
	
				if (parameters.safeContents.length !== this.parsedValue.safeContents.length) return Promise.reject("Length of \"parameters.safeContents\" must be equal to \"this.parsedValue.safeContents\"");
				//endregion 
	
				//region Initial variables 
				var sequence = Promise.resolve();
				//endregion
	
				//region Create internal values from already parsed values 
				this.safeContents = [];
	
				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;
	
				try {
					for (var _iterator2 = this.parsedValue.safeContents.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var _step2$value = _slicedToArray(_step2.value, 2),
						    index = _step2$value[0],
						    content = _step2$value[1];
	
						//region Check current "content" value
						if ("privacyMode" in content === false) return Promise.reject("The \"privacyMode\" is a mandatory parameter for \"content\"");
	
						if ("value" in content === false) return Promise.reject("The \"value\" is a mandatory parameter for \"content\"");
	
						if (content.value instanceof _SafeContents2.default === false) return Promise.reject("The \"content.value\" must has \"SafeContents\" type");
						//endregion 
	
						switch (content.privacyMode) {
							//region No privacy 
							case 0:
								{
									(function () {
										var contentBuffer = content.value.toSchema().toBER(false);
	
										sequence = sequence.then(function () {
											_this2.safeContents.push(new _ContentInfo2.default({
												contentType: "1.2.840.113549.1.7.1",
												content: new asn1js.OctetString({ valueHex: contentBuffer })
											}));
										});
									})();
								}
								break;
							//endregion 
							//region Privacy with password
							case 1:
								{
									(function () {
										//region Initial variables
										var cmsEncrypted = new _EncryptedData2.default();
	
										var currentParameters = parameters.safeContents[index];
										currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);
										//endregion
	
										//region Encrypt CMS EncryptedData using password
										sequence = sequence.then(function () {
											return cmsEncrypted.encrypt(currentParameters);
										}, function (error) {
											return Promise.reject(error);
										});
										//endregion
	
										//region Store result content in CMS_CONTENT_INFO type
										sequence = sequence.then(function () {
											_this2.safeContents.push(new _ContentInfo2.default({
												contentType: "1.2.840.113549.1.7.6",
												content: cmsEncrypted.toSchema()
											}));
										}, function (error) {
											return Promise.reject(error);
										});
										//endregion
									})();
								}
								break;
							//endregion 
							//region Privacy with public key
							case 2:
								{
									var _ret5 = function () {
										//region Initial variables
										var cmsEnveloped = new _EnvelopedData2.default();
										var contentToEncrypt = content.value.toSchema().toBER(false);
										//endregion
	
										//region Check mandatory parameters
										if ("encryptingCertificate" in parameters.safeContents[index] === false) return {
												v: Promise.reject("Absent mandatory parameter \"encryptingCertificate\" in \"parameters.safeContents[i]\"")
											};
	
										if ("encryptionAlgorithm" in parameters.safeContents[index] === false) return {
												v: Promise.reject("Absent mandatory parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\"")
											};
	
										switch (true) {
											case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === "aes-cbc":
											case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === "aes-gcm":
												break;
											default:
												return {
													v: Promise.reject("Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": " + parameters.safeContents[index].encryptionAlgorithm)
												};
										}
	
										switch (true) {
											case parameters.safeContents[index].encryptionAlgorithm.length === 128:
											case parameters.safeContents[index].encryptionAlgorithm.length === 192:
											case parameters.safeContents[index].encryptionAlgorithm.length === 256:
												break;
											default:
												return {
													v: Promise.reject("Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": " + parameters.safeContents[index].encryptionAlgorithm.length)
												};
										}
										//endregion
	
										//region Making correct "encryptionAlgorithm" variable
										var encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;
										//endregion
	
										//region Append recipient for enveloped data
										cmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);
										//endregion
	
										//region Making encryption
										sequence = sequence.then(function () {
											return cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt);
										});
	
										sequence = sequence.then(function () {
											_this2.safeContents.push(new _ContentInfo2.default({
												contentType: "1.2.840.113549.1.7.3",
												content: cmsEnveloped.toSchema()
											}));
										});
										//endregion
									}();
	
									if ((typeof _ret5 === "undefined" ? "undefined" : _typeof(_ret5)) === "object") return _ret5.v;
								}
								break;
							//endregion 
							//region default 
							default:
								return Promise.reject("Incorrect value for \"content.privacyMode\": " + content.privacyMode);
							//endregion 
						}
					}
					//endregion 
	
					//region Return result of the function 
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2.return) {
							_iterator2.return();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}
	
				return sequence.then(function () {
					return _this2;
				}, function (error) {
					return Promise.reject("Error during parsing: " + error);
				});
				//endregion   
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "safeContents":
						return [];
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for AuthenticatedSafe class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "safeContents":
						return memberValue.length === 0;
					case "parsedValue":
						return memberValue instanceof Object && Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for AuthenticatedSafe class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//AuthenticatedSafe ::= SEQUENCE OF ContentInfo
				//-- Data if unencrypted
				//-- EncryptedData if password-encrypted
				//-- EnvelopedData if public key-encrypted
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [contentInfos]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.contentInfos || "",
						value: _ContentInfo2.default.schema()
					})]
				});
			}
		}]);
	
		return AuthenticatedSafe;
	}();
	//**************************************************************************************
	
	
	exports.default = AuthenticatedSafe;
	//# sourceMappingURL=AuthenticatedSafe.js.map

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var ContentInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for ContentInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ContentInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ContentInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description contentType
	   */
			this.contentType = (0, _pvutils.getParametersValue)(parameters, "contentType", ContentInfo.defaultValues("contentType"));
			/**
	   * @type {Any}
	   * @description content
	   */
			this.content = (0, _pvutils.getParametersValue)(parameters, "content", ContentInfo.defaultValues("content"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ContentInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ContentInfo.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_CONTENT_INFO");
				//endregion
	
				//region Get internal properties from parsed schema
				this.contentType = asn1.result.contentType.valueBlock.toString();
				this.content = asn1.result.content;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.contentType }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.content] // EXPLICIT ANY value
					})]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					contentType: this.contentType
				};
	
				if (!(this.content instanceof asn1js.Any)) object.content = this.content.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "contentType":
						return "";
					case "content":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for ContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "contentType":
						return memberValue === "";
					case "content":
						return memberValue instanceof asn1js.Any;
					default:
						throw new Error("Invalid member name for ContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//ContentInfo ::= SEQUENCE {
				//    contentType ContentType,
				//    content [0] EXPLICIT ANY DEFINED BY contentType }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [contentType]
	    * @property {string} [content]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				if ("optional" in names === false) names.optional = false;
	
				return new asn1js.Sequence({
					name: names.blockName || "ContentInfo",
					optional: names.optional,
					value: [new asn1js.ObjectIdentifier({ name: names.contentType || "contentType" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.content || "content" })] // EXPLICIT ANY value
					})]
				});
			}
		}]);
	
		return ContentInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = ContentInfo;
	//# sourceMappingURL=ContentInfo.js.map

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _SafeBag = __webpack_require__(399);
	
	var _SafeBag2 = _interopRequireDefault(_SafeBag);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var SafeContents = function () {
		//**********************************************************************************
		/**
	  * Constructor for SafeContents class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SafeContents() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SafeContents);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<SafeBag>}
	   * @description safeBags
	   */
			this.safeBags = (0, _pvutils.getParametersValue)(parameters, "safeBags", SafeContents.defaultValues("safeBags"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SafeContents, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SafeContents.schema({
					names: {
						safeBags: "safeBags"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SafeContents");
				//endregion
	
				//region Get internal properties from parsed schema
				this.safeBags = Array.from(asn1.result.safeBags, function (element) {
					return new _SafeBag2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.safeBags, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					safeBags: Array.from(this.safeBags, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "safeBags":
						return [];
					default:
						throw new Error("Invalid member name for SafeContents class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "safeBags":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for SafeContents class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SafeContents ::= SEQUENCE OF SafeBag
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [safeBags]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.safeBags || "",
						value: _SafeBag2.default.schema()
					})]
				});
			}
		}]);
	
		return SafeContents;
	}();
	//**************************************************************************************
	
	
	exports.default = SafeContents;
	//# sourceMappingURL=SafeContents.js.map

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _PrivateKeyInfo = __webpack_require__(385);
	
	var _PrivateKeyInfo2 = _interopRequireDefault(_PrivateKeyInfo);
	
	var _PKCS8ShroudedKeyBag = __webpack_require__(400);
	
	var _PKCS8ShroudedKeyBag2 = _interopRequireDefault(_PKCS8ShroudedKeyBag);
	
	var _CertBag = __webpack_require__(405);
	
	var _CertBag2 = _interopRequireDefault(_CertBag);
	
	var _CRLBag = __webpack_require__(428);
	
	var _CRLBag2 = _interopRequireDefault(_CRLBag);
	
	var _SecretBag = __webpack_require__(431);
	
	var _SecretBag2 = _interopRequireDefault(_SecretBag);
	
	var _SafeContents = __webpack_require__(398);
	
	var _SafeContents2 = _interopRequireDefault(_SafeContents);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var SafeBag = function () {
		//**********************************************************************************
		/**
	  * Constructor for SafeBag class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SafeBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SafeBag);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description bagId
	   */
			this.bagId = (0, _pvutils.getParametersValue)(parameters, "bagId", SafeBag.defaultValues("bagId"));
			/**
	   * @type {*}
	   * @description bagValue
	   */
			this.bagValue = (0, _pvutils.getParametersValue)(parameters, "bagValue", SafeBag.defaultValues("bagValue"));
	
			if ("bagAttributes" in parameters)
				/**
	    * @type {Array.<Attribute>}
	    * @description bagAttributes
	    */
				this.bagAttributes = (0, _pvutils.getParametersValue)(parameters, "bagAttributes", SafeBag.defaultValues("bagAttributes"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SafeBag, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SafeBag.schema({
					names: {
						bagId: "bagId",
						bagValue: "bagValue",
						bagAttributes: "bagAttributes"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SafeBag");
				//endregion
	
				//region Get internal properties from parsed schema
				this.bagId = asn1.result.bagId.valueBlock.toString();
	
				switch (this.bagId) {
					case "1.2.840.113549.1.12.10.1.1":
						// keyBag
						this.bagValue = new _PrivateKeyInfo2.default({ schema: asn1.result.bagValue });
						break;
					case "1.2.840.113549.1.12.10.1.2":
						// pkcs8ShroudedKeyBag
						this.bagValue = new _PKCS8ShroudedKeyBag2.default({ schema: asn1.result.bagValue });
						break;
					case "1.2.840.113549.1.12.10.1.3":
						// certBag
						this.bagValue = new _CertBag2.default({ schema: asn1.result.bagValue });
						break;
					case "1.2.840.113549.1.12.10.1.4":
						// crlBag
						this.bagValue = new _CRLBag2.default({ schema: asn1.result.bagValue });
						break;
					case "1.2.840.113549.1.12.10.1.5":
						// secretBag
						this.bagValue = new _SecretBag2.default({ schema: asn1.result.bagValue });
						break;
					case "1.2.840.113549.1.12.10.1.6":
						// safeContentsBag
						this.bagValue = new _SafeContents2.default({ schema: asn1.result.bagValue });
						break;
					default:
						throw new Error("Invalid \"bagId\" for SafeBag: " + this.bagId);
				}
	
				if ("bagAttributes" in asn1.result) this.bagAttributes = Array.from(asn1.result.bagAttributes, function (element) {
					return new _Attribute2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				var outputArray = [new asn1js.ObjectIdentifier({ value: this.bagId }), new asn1js.Constructed({
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 0 // [0]
					},
					value: [this.bagValue.toSchema()]
				})];
	
				if ("bagAttributes" in this) {
					outputArray.push(new asn1js.Set({
						value: Array.from(this.bagAttributes, function (element) {
							return element.toSchema();
						})
					}));
				}
	
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var output = {
					bagId: this.bagId,
					bagValue: this.bagValue.toJSON()
				};
	
				if ("bagAttributes" in this) output.bagAttributes = Array.from(this.bagAttributes, function (element) {
					return element.toJSON();
				});
	
				return output;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "bagId":
						return "";
					case "bagValue":
						return new asn1js.Any();
					case "bagAttributes":
						return [];
					default:
						throw new Error("Invalid member name for SafeBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "bagId":
						return memberValue === "";
					case "bagValue":
						return memberValue instanceof asn1js.Any;
					case "bagAttributes":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for SafeBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SafeBag ::= SEQUENCE {
				//    bagId	      	BAG-TYPE.&id ({PKCS12BagSet}),
				//    bagValue      [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
				//    bagAttributes SET OF PKCS12Attribute OPTIONAL
				//}
	
				//rsadsi	OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840) rsadsi(113549)}
				//pkcs    OBJECT IDENTIFIER ::= {rsadsi pkcs(1)}
				//pkcs-12	OBJECT IDENTIFIER ::= {pkcs 12}
	
				//bagtypes			OBJECT IDENTIFIER ::= {pkcs-12 10 1}
	
				//keyBag 	  BAG-TYPE ::=
				//{KeyBag IDENTIFIED BY {bagtypes 1}}
				//pkcs8ShroudedKeyBag BAG-TYPE ::=
				//{PKCS8ShroudedKeyBag IDENTIFIED BY {bagtypes 2}}
				//certBag BAG-TYPE ::=
				//{CertBag IDENTIFIED BY {bagtypes 3}}
				//crlBag BAG-TYPE ::=
				//{CRLBag IDENTIFIED BY {bagtypes 4}}
				//secretBag BAG-TYPE ::=
				//{SecretBag IDENTIFIED BY {bagtypes 5}}
				//safeContentsBag BAG-TYPE ::=
				//{SafeContents IDENTIFIED BY {bagtypes 6}}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [bagId]
	    * @property {string} [bagValue]
	    * @property {string} [bagAttributes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.bagId || "bagId" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.bagValue || "bagValue" })] // EXPLICIT ANY value
					}), new asn1js.Set({
						optional: true,
						value: [new asn1js.Repeated({
							name: names.bagAttributes || "bagAttributes",
							value: _Attribute2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return SafeBag;
	}();
	//**************************************************************************************
	
	
	exports.default = SafeBag;
	//# sourceMappingURL=SafeBag.js.map

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _EncryptedData = __webpack_require__(401);
	
	var _EncryptedData2 = _interopRequireDefault(_EncryptedData);
	
	var _EncryptedContentInfo = __webpack_require__(402);
	
	var _EncryptedContentInfo2 = _interopRequireDefault(_EncryptedContentInfo);
	
	var _PrivateKeyInfo = __webpack_require__(385);
	
	var _PrivateKeyInfo2 = _interopRequireDefault(_PrivateKeyInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var PKCS8ShroudedKeyBag = function () {
		//**********************************************************************************
		/**
	  * Constructor for PKCS8ShroudedKeyBag class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PKCS8ShroudedKeyBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PKCS8ShroudedKeyBag);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description encryptionAlgorithm
	   */
			this.encryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "encryptionAlgorithm", PKCS8ShroudedKeyBag.defaultValues("encryptionAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description encryptedData
	   */
			this.encryptedData = (0, _pvutils.getParametersValue)(parameters, "encryptedData", PKCS8ShroudedKeyBag.defaultValues("encryptedData"));
	
			if ("parsedValue" in parameters)
				/**
	    * @type {*}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", PKCS8ShroudedKeyBag.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PKCS8ShroudedKeyBag, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({
					names: {
						encryptionAlgorithm: {
							names: {
								blockName: "encryptionAlgorithm"
							}
						},
						encryptedData: "encryptedData"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PKCS8ShroudedKeyBag");
				//endregion
	
				//region Get internal properties from parsed schema
				this.encryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.encryptionAlgorithm });
				this.encryptedData = asn1.result.encryptedData;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.encryptionAlgorithm.toSchema(), this.encryptedData]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),
					encryptedData: this.encryptedData.toJSON()
				};
			}
			//**********************************************************************************
	
		}, {
			key: "parseInternalValues",
			value: function parseInternalValues(parameters) {
				var _this = this;
	
				//region Initial variables 
				var sequence = Promise.resolve();
	
				var cmsEncrypted = new _EncryptedData2.default({
					encryptedContentInfo: new _EncryptedContentInfo2.default({
						contentEncryptionAlgorithm: this.encryptionAlgorithm,
						encryptedContent: this.encryptedData
					})
				});
				//endregion 
	
				//region Decrypt internal data 
				sequence = sequence.then(function () {
					return cmsEncrypted.decrypt(parameters);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				//region Initialize "parsedValue" with decrypted PKCS#8 private key 
				sequence = sequence.then(function (result) {
					var asn1 = asn1js.fromBER(result);
					if (asn1.offset === -1) return Promise.reject("Error during parsing ASN.1 data");
	
					_this.parsedValue = new _PrivateKeyInfo2.default({ schema: asn1.result });
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}, {
			key: "makeInternalValues",
			value: function makeInternalValues(parameters) {
				var _this2 = this;
	
				//region Check that we do have "parsedValue" 
				if ("parsedValue" in this === false) return Promise.reject("Please initialize \"parsedValue\" first");
				//endregion 
	
				//region Initial variables 
				var sequence = Promise.resolve();
	
				var cmsEncrypted = new _EncryptedData2.default();
				//endregion 
	
				//region Encrypt internal data 
				sequence = sequence.then(function () {
					parameters.contentToEncrypt = _this2.parsedValue.toSchema().toBER(false);
	
					return cmsEncrypted.encrypt(parameters);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				//region Initialize internal values 
				sequence = sequence.then(function () {
					_this2.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;
					_this2.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;
				});
				//endregion 
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "encryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "encryptedData":
						return new asn1js.OctetString();
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for PKCS8ShroudedKeyBag class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "encryptionAlgorithm":
						return _AlgorithmIdentifier2.default.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
					case "encryptedData":
						return memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName));
					case "parsedValue":
						return memberValue instanceof Object && Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for PKCS8ShroudedKeyBag class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo
	
				//EncryptedPrivateKeyInfo ::= SEQUENCE {
				//    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
				//    encryptedData EncryptedData
				//}
	
				//EncryptedData ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [encryptionAlgorithm]
	    * @property {string} [encryptedData]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.encryptionAlgorithm || {
						names: {
							blockName: "encryptionAlgorithm"
						}
					}), new asn1js.Choice({
						value: [new asn1js.OctetString({ name: names.encryptedData || "encryptedData" }), new asn1js.OctetString({
							idBlock: {
								isConstructed: true
							},
							name: names.encryptedData || "encryptedData"
						})]
					})]
				});
			}
		}]);
	
		return PKCS8ShroudedKeyBag;
	}();
	//**************************************************************************************
	
	
	exports.default = PKCS8ShroudedKeyBag;
	//# sourceMappingURL=PKCS8ShroudedKeyBag.js.map

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _EncryptedContentInfo = __webpack_require__(402);
	
	var _EncryptedContentInfo2 = _interopRequireDefault(_EncryptedContentInfo);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _PBKDF2Params = __webpack_require__(403);
	
	var _PBKDF2Params2 = _interopRequireDefault(_PBKDF2Params);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _PBES2Params = __webpack_require__(404);
	
	var _PBES2Params2 = _interopRequireDefault(_PBES2Params);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var EncryptedData = function () {
		//**********************************************************************************
		/**
	  * Constructor for EncryptedData class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function EncryptedData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, EncryptedData);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", EncryptedData.defaultValues("version"));
			/**
	   * @type {EncryptedContentInfo}
	   * @description encryptedContentInfo
	   */
			this.encryptedContentInfo = (0, _pvutils.getParametersValue)(parameters, "encryptedContentInfo", EncryptedData.defaultValues("encryptedContentInfo"));
	
			if ("unprotectedAttrs" in parameters)
				/**
	    * @type {Array.<Attribute>}
	    * @description unprotectedAttrs
	    */
				this.unprotectedAttrs = (0, _pvutils.getParametersValue)(parameters, "unprotectedAttrs", EncryptedData.defaultValues("unprotectedAttrs"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(EncryptedData, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({
					names: {
						version: "version",
						encryptedContentInfo: {
							names: {
								blockName: "encryptedContentInfo"
							}
						},
						unprotectedAttrs: "unprotectedAttrs"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_ENCRYPTED_DATA");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.encryptedContentInfo = new _EncryptedContentInfo2.default({ schema: asn1.result.encryptedContentInfo });
	
				if ("unprotectedAttrs" in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, function (element) {
					return new _Attribute2.default({ schema: element });
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
				outputArray.push(this.encryptedContentInfo.toSchema());
	
				if ("unprotectedAttrs" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: Array.from(this.unprotectedAttrs, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version,
					encryptedContentInfo: this.encryptedContentInfo.toJSON()
				};
	
				if ("unprotectedAttrs" in this) _object.unprotectedAttrs = Array.from(this.unprotectedAttrs, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
	
			//**********************************************************************************
			/**
	   * Create a new CMS Encrypted Data content
	   * @param {Object} parameters Parameters neccessary for encryption
	   * @returns {Promise}
	   */
	
		}, {
			key: "encrypt",
			value: function encrypt(parameters) {
				var _this = this;
	
				//region Check for input parameters
				if (parameters instanceof Object === false) return Promise.reject("Parameters must have type \"Object\"");
	
				if ("password" in parameters === false) return Promise.reject("Absent mandatory parameter \"password\"");
	
				if ("contentEncryptionAlgorithm" in parameters === false) return Promise.reject("Absent mandatory parameter \"contentEncryptionAlgorithm\"");
	
				if ("hmacHashAlgorithm" in parameters === false) return Promise.reject("Absent mandatory parameter \"hmacHashAlgorithm\"");
	
				if ("iterationCount" in parameters === false) return Promise.reject("Absent mandatory parameter \"iterationCount\"");
	
				if ("contentToEncrypt" in parameters === false) return Promise.reject("Absent mandatory parameter \"contentToEncrypt\"");
	
				var contentEncryptionOID = (0, _common.getOIDByAlgorithm)(parameters.contentEncryptionAlgorithm);
				if (contentEncryptionOID === "") return Promise.reject("Wrong \"contentEncryptionAlgorithm\" value");
	
				var pbkdf2OID = (0, _common.getOIDByAlgorithm)({
					name: "PBKDF2"
				});
				if (pbkdf2OID === "") return Promise.reject("Can not find OID for PBKDF2");
	
				var hmacOID = (0, _common.getOIDByAlgorithm)({
					name: "HMAC",
					hash: {
						name: parameters.hmacHashAlgorithm
					}
				});
				if (hmacOID === "") return Promise.reject("Incorrect value for \"hmacHashAlgorithm\": " + parameters.hmacHashAlgorithm);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long
				var ivView = new Uint8Array(ivBuffer);
				(0, _common.getRandomValues)(ivView);
	
				var saltBuffer = new ArrayBuffer(64);
				var saltView = new Uint8Array(saltBuffer);
				(0, _common.getRandomValues)(saltView);
	
				var contentView = new Uint8Array(parameters.contentToEncrypt);
	
				var pbkdf2Params = new _PBKDF2Params2.default({
					salt: new asn1js.OctetString({ valueHex: saltBuffer }),
					iterationCount: parameters.iterationCount,
					prf: new _AlgorithmIdentifier2.default({
						algorithmId: hmacOID,
						algorithmParams: new asn1js.Null()
					})
				});
				//endregion
	
				//region Derive PBKDF2 key from "password" buffer
				sequence = sequence.then(function () {
					var passwordView = new Uint8Array(parameters.password);
	
					return crypto.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Derive key for "contentEncryptionAlgorithm"
				sequence = sequence.then(function (result) {
					return crypto.deriveKey({
						name: "PBKDF2",
						hash: {
							name: parameters.hmacHashAlgorithm
						},
						salt: saltView,
						iterations: parameters.iterationCount
					}, result, parameters.contentEncryptionAlgorithm, false, ["encrypt"]);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Encrypt content
				sequence = sequence.then(function (result) {
					return crypto.encrypt({
						name: parameters.contentEncryptionAlgorithm.name,
						iv: ivView
					}, result, contentView);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Store all parameters in CMS_ENCRYPTED_DATA
				sequence = sequence.then(function (result) {
					var pbes2Parameters = new _PBES2Params2.default({
						keyDerivationFunc: new _AlgorithmIdentifier2.default({
							algorithmId: pbkdf2OID,
							algorithmParams: pbkdf2Params.toSchema()
						}),
						encryptionScheme: new _AlgorithmIdentifier2.default({
							algorithmId: contentEncryptionOID,
							algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })
						})
					});
	
					_this.encryptedContentInfo = new _EncryptedContentInfo2.default({
						contentType: "1.2.840.113549.1.7.1", // "data"
						contentEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
							algorithmId: "1.2.840.113549.1.5.13", // pkcs5PBES2
							algorithmParams: pbes2Parameters.toSchema()
						}),
						encryptedContent: new asn1js.OctetString({ valueHex: result })
					});
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
			/**
	   * Create a new CMS Encrypted Data content
	   * @param {Object} parameters Parameters neccessary for encryption
	   */
	
		}, {
			key: "decrypt",
			value: function decrypt(parameters) {
				var _this2 = this;
	
				//region Check for input parameters 
				if (parameters instanceof Object === false) return Promise.reject("Parameters must have type \"Object\"");
	
				if ("password" in parameters === false) return Promise.reject("Absent mandatory parameter \"password\"");
	
				if (this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== "1.2.840.113549.1.5.13") // pkcs5PBES2
					return Promise.reject("Unknown \"contentEncryptionAlgorithm\": " + this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
				//endregion 
	
				//region Get a "crypto" extension 
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion 
	
				//region Initial variables 
				var sequence = Promise.resolve();
	
				var pbes2Parameters = void 0;
	
				try {
					pbes2Parameters = new _PBES2Params2.default({ schema: this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });
				} catch (ex) {
					return Promise.reject("Incorrectly encoded \"pbes2Parameters\"");
				}
	
				var pbkdf2Params = void 0;
	
				try {
					pbkdf2Params = new _PBKDF2Params2.default({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });
				} catch (ex) {
					return Promise.reject("Incorrectly encoded \"pbkdf2Params\"");
				}
	
				var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(pbes2Parameters.encryptionScheme.algorithmId);
				if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect OID for \"contentEncryptionAlgorithm\": " + pbes2Parameters.encryptionScheme.algorithmId);
	
				var ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;
				var ivView = new Uint8Array(ivBuffer);
	
				var saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;
				var saltView = new Uint8Array(saltBuffer);
	
				var iterationCount = pbkdf2Params.iterationCount;
	
				var hmacHashAlgorithm = "SHA-1";
	
				if ("prf" in pbkdf2Params) {
					var algorithm = (0, _common.getAlgorithmByOID)(pbkdf2Params.prf.algorithmId);
					if ("name" in algorithm === false) return Promise.reject("Incorrect OID for HMAC hash algorithm");
	
					hmacHashAlgorithm = algorithm.hash.name;
				}
				//endregion 
	
				//region Derive PBKDF2 key from "password" buffer 
				sequence = sequence.then(function () {
					return crypto.importKey("raw", parameters.password, "PBKDF2", false, ["deriveKey"]);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				//region Derive key for "contentEncryptionAlgorithm" 
				sequence = sequence.then(function (result) {
					return crypto.deriveKey({
						name: "PBKDF2",
						hash: {
							name: hmacHashAlgorithm
						},
						salt: saltView,
						iterations: iterationCount
					}, result, contentEncryptionAlgorithm, false, ["decrypt"]);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				//region Decrypt internal content using derived key 
				sequence = sequence.then(function (result) {
					//region Create correct data block for decryption
					var dataBuffer = new ArrayBuffer(0);
	
					if (_this2.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = _this2.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {
						var _iteratorNormalCompletion = true;
						var _didIteratorError = false;
						var _iteratorError = undefined;
	
						try {
							for (var _iterator = _this2.encryptedContentInfo.encryptedContent.valueBlock.value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var content = _step.value;
	
								dataBuffer = (0, _pvutils.utilConcatBuf)(dataBuffer, content.valueBlock.valueHex);
							}
						} catch (err) {
							_didIteratorError = true;
							_iteratorError = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion && _iterator.return) {
									_iterator.return();
								}
							} finally {
								if (_didIteratorError) {
									throw _iteratorError;
								}
							}
						}
					}
					//endregion
	
					return crypto.decrypt({
						name: contentEncryptionAlgorithm.name,
						iv: ivView
					}, result, dataBuffer);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion 
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "encryptedContentInfo":
						return new _EncryptedContentInfo2.default();
					case "unprotectedAttrs":
						return [];
					default:
						throw new Error("Invalid member name for EncryptedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === 0;
					case "encryptedContentInfo":
						return _EncryptedContentInfo2.default.compareWithDefault("contentType", memberValue.contentType) && _EncryptedContentInfo2.default.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && _EncryptedContentInfo2.default.compareWithDefault("encryptedContent", memberValue.encryptedContent);
					case "unprotectedAttrs":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for EncryptedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
				//    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }
	
				//EncryptedData ::= SEQUENCE {
				//    version CMSVersion,
				//    encryptedContentInfo EncryptedContentInfo,
				//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [encryptedContentInfo]
	    * @property {string} [unprotectedAttrs]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), _EncryptedContentInfo2.default.schema(names.encryptedContentInfo || {}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Repeated({
							name: names.unprotectedAttrs || "",
							value: _Attribute2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return EncryptedData;
	}();
	//**************************************************************************************
	
	
	exports.default = EncryptedData;
	//# sourceMappingURL=EncryptedData.js.map

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var EncryptedContentInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for EncryptedContentInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function EncryptedContentInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, EncryptedContentInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description contentType
	   */
			this.contentType = (0, _pvutils.getParametersValue)(parameters, "contentType", EncryptedContentInfo.defaultValues("contentType"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description contentEncryptionAlgorithm
	   */
			this.contentEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "contentEncryptionAlgorithm", EncryptedContentInfo.defaultValues("contentEncryptionAlgorithm"));
	
			if ("encryptedContent" in parameters) {
				/**
	    * @type {OctetString}
	    * @description encryptedContent (!!!) could be contructive or primitive value (!!!)
	    */
				this.encryptedContent = parameters.encryptedContent;
	
				if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {
					//region Divide OCTETSTRING value down to small pieces
					if (this.encryptedContent.idBlock.isConstructed === false) {
						var constrString = new asn1js.OctetString({
							idBlock: { isConstructed: true },
							isConstructed: true
						});
	
						var offset = 0;
						var length = this.encryptedContent.valueBlock.valueHex.byteLength;
	
						while (length > 0) {
							var pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, offset + 1024 > this.encryptedContent.valueBlock.valueHex.byteLength ? this.encryptedContent.valueBlock.valueHex.byteLength - offset : 1024);
							var _array = new ArrayBuffer(pieceView.length);
							var _view = new Uint8Array(_array);
	
							for (var i = 0; i < _view.length; i++) {
								_view[i] = pieceView[i];
							}constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));
	
							length -= pieceView.length;
							offset += pieceView.length;
						}
	
						this.encryptedContent = constrString;
					}
					//endregion
				}
			}
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(EncryptedContentInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({
					names: {
						contentType: "contentType",
						contentEncryptionAlgorithm: {
							names: {
								blockName: "contentEncryptionAlgorithm"
							}
						},
						encryptedContent: "encryptedContent"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for EncryptedContentInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.contentType = asn1.result.contentType.valueBlock.toString();
				this.contentEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.contentEncryptionAlgorithm });
	
				if ("encryptedContent" in asn1.result) {
					this.encryptedContent = asn1.result.encryptedContent;
	
					this.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL
					this.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of "in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE"
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var sequenceLengthBlock = {
					isIndefiniteForm: false
				};
	
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));
				outputArray.push(this.contentEncryptionAlgorithm.toSchema());
	
				if ("encryptedContent" in this) {
					sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
	
					var encryptedValue = this.encryptedContent;
	
					encryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
					encryptedValue.idBlock.tagNumber = 0; // [0]
	
					encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
	
					outputArray.push(encryptedValue);
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					lenBlock: sequenceLengthBlock,
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					contentType: this.contentType,
					contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()
				};
	
				if ("encryptedContent" in this) _object.encryptedContent = this.encryptedContent.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "contentType":
						return "";
					case "contentEncryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "encryptedContent":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for EncryptedContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "contentType":
						return memberValue === "";
					case "contentEncryptionAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "encryptedContent":
						return memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for EncryptedContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//EncryptedContentInfo ::= SEQUENCE {
				//    contentType ContentType,
				//    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
				//    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }
				//
				// Comment: Strange, but modern crypto engines create "encryptedContent" as "[0] EXPLICIT EncryptedContent"
				//
				//EncryptedContent ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [contentType]
	    * @property {string} [contentEncryptionAlgorithm]
	    * @property {string} [encryptedContent]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.contentType || "" }), _AlgorithmIdentifier2.default.schema(names.contentEncryptionAlgorithm || {}),
					// The CHOICE we need because "EncryptedContent" could have either "constructive"
					// or "primitive" form of encoding and we need to handle both variants
					new asn1js.Choice({
						value: [new asn1js.Constructed({
							name: names.encryptedContent || "",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [new asn1js.Repeated({
								value: new asn1js.OctetString()
							})]
						}), new asn1js.Primitive({
							name: names.encryptedContent || "",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							}
						})]
					})]
				});
			}
		}]);
	
		return EncryptedContentInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = EncryptedContentInfo;
	//# sourceMappingURL=EncryptedContentInfo.js.map

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC2898
	 */
	var PBKDF2Params = function () {
		//**********************************************************************************
		/**
	  * Constructor for PBKDF2Params class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PBKDF2Params() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PBKDF2Params);
	
			//region Internal properties of the object
			/**
	   * @type {Object}
	   * @description salt
	   */
			this.salt = (0, _pvutils.getParametersValue)(parameters, "salt", PBKDF2Params.defaultValues("salt"));
			/**
	   * @type {number}
	   * @description iterationCount
	   */
			this.iterationCount = (0, _pvutils.getParametersValue)(parameters, "iterationCount", PBKDF2Params.defaultValues("iterationCount"));
			/**
	   * @type {number}
	   * @description keyLength
	   */
			this.keyLength = (0, _pvutils.getParametersValue)(parameters, "keyLength", PBKDF2Params.defaultValues("keyLength"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description prf
	   */
			this.prf = (0, _pvutils.getParametersValue)(parameters, "prf", PBKDF2Params.defaultValues("prf"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PBKDF2Params, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({
					names: {
						saltPrimitive: "salt",
						saltConstructed: {
							names: {
								blockName: "salt"
							}
						},
						iterationCount: "iterationCount",
						keyLength: "keyLength",
						prf: {
							names: {
								blockName: "prf",
								optional: true
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PBKDF2_params");
				//endregion
	
				//region Get internal properties from parsed schema
				this.salt = asn1.result.salt;
				this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;
	
				if ("keyLength" in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;
	
				if ("prf" in asn1.result) this.prf = new _AlgorithmIdentifier2.default({ schema: asn1.result.prf });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence 
				var outputArray = [];
	
				outputArray.push(this.salt);
				outputArray.push(new asn1js.Integer({ value: this.iterationCount }));
	
				if (PBKDF2Params.defaultValues("keyLength") !== this.keyLength) outputArray.push(new asn1js.Integer({ value: this.keyLength }));
	
				if (PBKDF2Params.defaultValues("prf").isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					salt: this.salt.toJSON(),
					iterationCount: this.iterationCount
				};
	
				if (PBKDF2Params.defaultValues("keyLength") !== this.keyLength) _object.keyLength = this.keyLength;
	
				if (PBKDF2Params.defaultValues("prf").isEqual(this.prf) === false) _object.prf = this.prf.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "salt":
						return {};
					case "iterationCount":
						return -1;
					case "keyLength":
						return 0;
					case "prf":
						return new _AlgorithmIdentifier2.default();
					default:
						throw new Error("Invalid member name for PBKDF2Params class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PBKDF2-params ::= SEQUENCE {
				//    salt CHOICE {
				//        specified OCTET STRING,
				//        otherSource AlgorithmIdentifier },
				//  iterationCount INTEGER (1..MAX),
				//  keyLength INTEGER (1..MAX) OPTIONAL,
				//  prf AlgorithmIdentifier
				//    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [saltPrimitive]
	    * @property {string} [saltConstructed]
	    * @property {string} [iterationCount]
	    * @property {string} [keyLength]
	    * @property {string} [prf]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Choice({
						value: [new asn1js.OctetString({ name: names.saltPrimitive || "" }), _AlgorithmIdentifier2.default.schema(names.saltConstructed || {})]
					}), new asn1js.Integer({ name: names.iterationCount || "" }), new asn1js.Integer({
						name: names.keyLength || "",
						optional: true
					}), _AlgorithmIdentifier2.default.schema(names.prf || {
						names: {
							optional: true
						}
					})]
				});
			}
		}]);
	
		return PBKDF2Params;
	}();
	//**************************************************************************************
	
	
	exports.default = PBKDF2Params;
	//# sourceMappingURL=PBKDF2Params.js.map

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC2898
	 */
	var PBES2Params = function () {
		//**********************************************************************************
		/**
	  * Constructor for PBES2Params class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PBES2Params() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PBES2Params);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyDerivationFunc
	   */
			this.keyDerivationFunc = (0, _pvutils.getParametersValue)(parameters, "keyDerivationFunc", PBES2Params.defaultValues("keyDerivationFunc"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description encryptionScheme
	   */
			this.encryptionScheme = (0, _pvutils.getParametersValue)(parameters, "encryptionScheme", PBES2Params.defaultValues("encryptionScheme"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PBES2Params, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({
					names: {
						keyDerivationFunc: {
							names: {
								blockName: "keyDerivationFunc"
							}
						},
						encryptionScheme: {
							names: {
								blockName: "encryptionScheme"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PBES2_params");
				//endregion
	
				//region Get internal properties from parsed schema
				this.keyDerivationFunc = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyDerivationFunc });
				this.encryptionScheme = new _AlgorithmIdentifier2.default({ schema: asn1.result.encryptionScheme });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.keyDerivationFunc.toSchema(), this.encryptionScheme.toSchema()]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					keyDerivationFunc: this.keyDerivationFunc.toJSON(),
					encryptionScheme: this.encryptionScheme.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyDerivationFunc":
						return new _AlgorithmIdentifier2.default();
					case "encryptionScheme":
						return new _AlgorithmIdentifier2.default();
					default:
						throw new Error("Invalid member name for PBES2Params class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PBES2-params ::= SEQUENCE {
				//    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
				//    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyDerivationFunc]
	    * @property {string} [encryptionScheme]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.keyDerivationFunc || {}), _AlgorithmIdentifier2.default.schema(names.encryptionScheme || {})]
				});
			}
		}]);
	
		return PBES2Params;
	}();
	//**************************************************************************************
	
	
	exports.default = PBES2Params;
	//# sourceMappingURL=PBES2Params.js.map

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var CertBag = function () {
		//**********************************************************************************
		/**
	  * Constructor for CertBag class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertBag);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description certId
	   */
			this.certId = (0, _pvutils.getParametersValue)(parameters, "certId", CertBag.defaultValues("certId"));
			/**
	   * @type {*}
	   * @description certValue
	   */
			this.certValue = (0, _pvutils.getParametersValue)(parameters, "certValue", CertBag.defaultValues("certValue"));
	
			if ("parsedValue" in parameters)
				/**
	    * @type {*}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", CertBag.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertBag, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid 
				var asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({
					names: {
						id: "certId",
						value: "certValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CertBag");
				//endregion 
	
				//region Get internal properties from parsed schema 
				this.certId = asn1.result.certId.valueBlock.toString();
				this.certValue = asn1.result.certValue;
	
				switch (this.certId) {
					case "1.2.840.113549.1.9.22.1":
						// x509Certificate
						{
							var asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);
							this.parsedValue = new _Certificate2.default({ schema: asn1Inner.result });
						}
						break;
					case "1.2.840.113549.1.9.22.2": // sdsiCertificate
					default:
						throw new Error("Incorrect \"certId\" value in CertBag: " + this.certId);
				}
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				if ("parsedValue" in this) {
					this.certId = "1.2.840.113549.1.9.22.1";
					this.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });
				}
	
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.certId }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: ["toSchema" in this.certValue ? this.certValue.toSchema() : this.certValue]
					})]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					certId: this.certId,
					certValue: this.certValue.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "certId":
						return "";
					case "certValue":
						return new asn1js.Any();
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for CertBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "certId":
						return memberValue === "";
					case "certValue":
						return memberValue instanceof asn1js.Any;
					case "parsedValue":
						return memberValue instanceof Object && Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for CertBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CertBag ::= SEQUENCE {
				//    certId    BAG-TYPE.&id   ({CertTypes}),
				//    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [id]
	    * @property {string} [value]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.id || "id" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.value || "value" })] // EXPLICIT ANY value
					})]
				});
			}
		}]);
	
		return CertBag;
	}();
	//**************************************************************************************
	
	
	exports.default = CertBag;
	//# sourceMappingURL=CertBag.js.map

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _Time = __webpack_require__(407);
	
	var _Time2 = _interopRequireDefault(_Time);
	
	var _PublicKeyInfo = __webpack_require__(382);
	
	var _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	function tbsCertificate() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		//TBSCertificate  ::=  SEQUENCE  {
		//    version         [0]  EXPLICIT Version DEFAULT v1,
		//    serialNumber         CertificateSerialNumber,
		//    signature            AlgorithmIdentifier,
		//    issuer               Name,
		//    validity             Validity,
		//    subject              Name,
		//    subjectPublicKeyInfo SubjectPublicKeyInfo,
		//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
		//                         -- If present, version MUST be v2 or v3
		//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
		//                         -- If present, version MUST be v2 or v3
		//    extensions      [3]  EXPLICIT Extensions OPTIONAL
		//    -- If present, version MUST be v3
		//}
	
		/**
	  * @type {Object}
	  * @property {string} [blockName]
	  * @property {string} [tbsCertificateVersion]
	  * @property {string} [tbsCertificateSerialNumber]
	  * @property {string} [signature]
	  * @property {string} [issuer]
	  * @property {string} [tbsCertificateValidity]
	  * @property {string} [notBefore]
	  * @property {string} [notAfter]
	  * @property {string} [subject]
	  * @property {string} [subjectPublicKeyInfo]
	  * @property {string} [tbsCertificateIssuerUniqueID]
	  * @property {string} [tbsCertificateSubjectUniqueID]
	  * @property {string} [extensions]
	  */
		var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
		return new asn1js.Sequence({
			name: names.blockName || "tbsCertificate",
			value: [new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 0 // [0]
				},
				value: [new asn1js.Integer({ name: names.tbsCertificateVersion || "tbsCertificate.version" }) // EXPLICIT integer value
				]
			}), new asn1js.Integer({ name: names.tbsCertificateSerialNumber || "tbsCertificate.serialNumber" }), _AlgorithmIdentifier2.default.schema(names.signature || {
				names: {
					blockName: "tbsCertificate.signature"
				}
			}), _RelativeDistinguishedNames2.default.schema(names.issuer || {
				names: {
					blockName: "tbsCertificate.issuer"
				}
			}), new asn1js.Sequence({
				name: names.tbsCertificateValidity || "tbsCertificate.validity",
				value: [_Time2.default.schema(names.notBefore || {
					names: {
						utcTimeName: "tbsCertificate.notBefore",
						generalTimeName: "tbsCertificate.notBefore"
					}
				}), _Time2.default.schema(names.notAfter || {
					names: {
						utcTimeName: "tbsCertificate.notAfter",
						generalTimeName: "tbsCertificate.notAfter"
					}
				})]
			}), _RelativeDistinguishedNames2.default.schema(names.subject || {
				names: {
					blockName: "tbsCertificate.subject"
				}
			}), _PublicKeyInfo2.default.schema(names.subjectPublicKeyInfo || {
				names: {
					blockName: "tbsCertificate.subjectPublicKeyInfo"
				}
			}), new asn1js.Primitive({
				name: names.tbsCertificateIssuerUniqueID || "tbsCertificate.issuerUniqueID",
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 1 // [1]
				}
			}), // IMPLICIT bistring value
			new asn1js.Primitive({
				name: names.tbsCertificateSubjectUniqueID || "tbsCertificate.subjectUniqueID",
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 2 // [2]
				}
			}), // IMPLICIT bistring value
			new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 3 // [3]
				},
				value: [_Extensions2.default.schema(names.extensions || {
					names: {
						blockName: "tbsCertificate.extensions"
					}
				})]
			}) // EXPLICIT SEQUENCE value
			]
		});
	}
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	
	var Certificate = function () {
		//**********************************************************************************
		/**
	  * Constructor for Certificate class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Certificate() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Certificate);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description tbs
	   */
			this.tbs = (0, _pvutils.getParametersValue)(parameters, "tbs", Certificate.defaultValues("tbs"));
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", Certificate.defaultValues("version"));
			/**
	   * @type {Integer}
	   * @description serialNumber
	   */
			this.serialNumber = (0, _pvutils.getParametersValue)(parameters, "serialNumber", Certificate.defaultValues("serialNumber"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signature
	   */
			this.signature = (0, _pvutils.getParametersValue)(parameters, "signature", Certificate.defaultValues("signature"));
			/**
	   * @type {RelativeDistinguishedNames}
	   * @description issuer
	   */
			this.issuer = (0, _pvutils.getParametersValue)(parameters, "issuer", Certificate.defaultValues("issuer"));
			/**
	   * @type {Time}
	   * @description notBefore
	   */
			this.notBefore = (0, _pvutils.getParametersValue)(parameters, "notBefore", Certificate.defaultValues("notBefore"));
			/**
	   * @type {Time}
	   * @description notAfter
	   */
			this.notAfter = (0, _pvutils.getParametersValue)(parameters, "notAfter", Certificate.defaultValues("notAfter"));
			/**
	   * @type {RelativeDistinguishedNames}
	   * @description subject
	   */
			this.subject = (0, _pvutils.getParametersValue)(parameters, "subject", Certificate.defaultValues("subject"));
			/**
	   * @type {PublicKeyInfo}
	   * @description subjectPublicKeyInfo
	   */
			this.subjectPublicKeyInfo = (0, _pvutils.getParametersValue)(parameters, "subjectPublicKeyInfo", Certificate.defaultValues("subjectPublicKeyInfo"));
	
			if ("issuerUniqueID" in parameters)
				/**
	    * @type {ArrayBuffer}
	    * @description issuerUniqueID
	    */
				this.issuerUniqueID = (0, _pvutils.getParametersValue)(parameters, "issuerUniqueID", Certificate.defaultValues("issuerUniqueID"));
	
			if ("subjectUniqueID" in parameters)
				/**
	    * @type {ArrayBuffer}
	    * @description subjectUniqueID
	    */
				this.subjectUniqueID = (0, _pvutils.getParametersValue)(parameters, "subjectUniqueID", Certificate.defaultValues("subjectUniqueID"));
	
			if ("extensions" in parameters)
				/**
	    * @type {Array}
	    * @description extensions
	    */
				this.extensions = (0, _pvutils.getParametersValue)(parameters, "extensions", Certificate.defaultValues("extensions"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signatureAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", Certificate.defaultValues("signatureAlgorithm"));
			/**
	   * @type {BitString}
	   * @description signatureValue
	   */
			this.signatureValue = (0, _pvutils.getParametersValue)(parameters, "signatureValue", Certificate.defaultValues("signatureValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Certificate, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({
					names: {
						tbsCertificate: {
							names: {
								extensions: {
									names: {
										extensions: "tbsCertificate.extensions"
									}
								}
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CERT");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbs = asn1.result.tbsCertificate.valueBeforeDecode;
	
				if ("tbsCertificate.version" in asn1.result) this.version = asn1.result["tbsCertificate.version"].valueBlock.valueDec;
				this.serialNumber = asn1.result["tbsCertificate.serialNumber"];
				this.signature = new _AlgorithmIdentifier2.default({ schema: asn1.result["tbsCertificate.signature"] });
				this.issuer = new _RelativeDistinguishedNames2.default({ schema: asn1.result["tbsCertificate.issuer"] });
				this.notBefore = new _Time2.default({ schema: asn1.result["tbsCertificate.notBefore"] });
				this.notAfter = new _Time2.default({ schema: asn1.result["tbsCertificate.notAfter"] });
				this.subject = new _RelativeDistinguishedNames2.default({ schema: asn1.result["tbsCertificate.subject"] });
				this.subjectPublicKeyInfo = new _PublicKeyInfo2.default({ schema: asn1.result["tbsCertificate.subjectPublicKeyInfo"] });
				if ("tbsCertificate.issuerUniqueID" in asn1.result) this.issuerUniqueID = asn1.result["tbsCertificate.issuerUniqueID"].valueBlock.valueHex;
				if ("tbsCertificate.subjectUniqueID" in asn1.result) this.issuerUniqueID = asn1.result["tbsCertificate.subjectUniqueID"].valueBlock.valueHex;
				if ("tbsCertificate.extensions" in asn1.result) this.extensions = Array.from(asn1.result["tbsCertificate.extensions"], function (element) {
					return new _Extension2.default({ schema: element });
				});
	
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });
				this.signatureValue = asn1.result.signatureValue;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Create ASN.1 schema for existing values of TBS part for the certificate
	   */
	
		}, {
			key: "encodeTBS",
			value: function encodeTBS() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("version" in this && this.version !== Certificate.defaultValues("version")) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Integer({ value: this.version }) // EXPLICIT integer value
						]
					}));
				}
	
				outputArray.push(this.serialNumber);
				outputArray.push(this.signature.toSchema());
				outputArray.push(this.issuer.toSchema());
	
				outputArray.push(new asn1js.Sequence({
					value: [this.notBefore.toSchema(), this.notAfter.toSchema()]
				}));
	
				outputArray.push(this.subject.toSchema());
				outputArray.push(this.subjectPublicKeyInfo.toSchema());
	
				if ("issuerUniqueID" in this) {
					outputArray.push(new asn1js.Primitive({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						valueHex: this.issuerUniqueID
					}));
				}
				if ("subjectUniqueID" in this) {
					outputArray.push(new asn1js.Primitive({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						valueHex: this.subjectUniqueID
					}));
				}
	
				if ("subjectUniqueID" in this) {
					outputArray.push(new asn1js.Primitive({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						value: [this.extensions.toSchema()]
					}));
				}
	
				if ("extensions" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.extensions, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
				//endregion
	
				//region Create and return output sequence
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				var tbsSchema = {};
	
				//region Decode stored TBS value
				if (encodeFlag === false) {
					if (this.tbs.length === 0) // No stored certificate TBS part
						return Certificate.schema().value[0];
	
					tbsSchema = asn1js.fromBER(this.tbs).result;
				}
				//endregion
				//region Create TBS schema via assembling from TBS parts
				else tbsSchema = this.encodeTBS();
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					tbs: (0, _pvutils.bufferToHexCodes)(this.tbs, 0, this.tbs.byteLength),
					serialNumber: this.serialNumber.toJSON(),
					signature: this.signature.toJSON(),
					issuer: this.issuer.toJSON(),
					notBefore: this.notBefore.toJSON(),
					notAfter: this.notAfter.toJSON(),
					subject: this.subject.toJSON(),
					subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
					signatureAlgorithm: this.signatureAlgorithm.toJSON(),
					signatureValue: this.signatureValue.toJSON()
				};
	
				if ("version" in this && this.version !== Certificate.defaultValues("version")) object.version = this.version;
	
				if ("issuerUniqueID" in this) object.issuerUniqueID = (0, _pvutils.bufferToHexCodes)(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);
	
				if ("subjectUniqueID" in this) object.subjectUniqueID = (0, _pvutils.bufferToHexCodes)(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);
	
				if ("extensions" in this) object.extensions = Array.from(this.extensions, function (element) {
					return element.toJSON();
				});
	
				return object;
			}
	
			//**********************************************************************************
			/**
	   * Importing public key for current certificate
	   */
	
		}, {
			key: "getPublicKey",
			value: function getPublicKey() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Find correct algorithm for imported public key
				if (parameters === null) {
					//region Initial variables
					parameters = {};
					//endregion
	
					//region Find signer's hashing algorithm
					var shaAlgorithm = (0, _common.getHashAlgorithm)(this.signatureAlgorithm);
					if (shaAlgorithm === "") return Promise.reject("Unsupported signature algorithm: " + this.signatureAlgorithm.algorithmId);
					//endregion
	
					//region Get information about public key algorithm and default parameters for import
					var algorithmObject = (0, _common.getAlgorithmByOID)(this.subjectPublicKeyInfo.algorithm.algorithmId);
					if ("name" in algorithmObject === false) return Promise.reject("Unsupported public key algorithm: " + this.subjectPublicKeyInfo.algorithm.algorithmId);
	
					parameters.algorithm = (0, _common.getAlgorithmParameters)(algorithmObject.name, "importkey");
					if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmObject.name === "ECDSA") {
						// #region Get information about named curve
						var algorithmParamsChecked = false;
	
						if ("algorithmParams" in this.subjectPublicKeyInfo.algorithm === true) {
							if ("idBlock" in this.subjectPublicKeyInfo.algorithm.algorithmParams) {
								if (this.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && this.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
							}
						}
	
						if (algorithmParamsChecked === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(this.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + this.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						// #endregion
	
						parameters.algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
				}
				//endregion
	
				//region Get neccessary values from internal fields for current certificate
				var publicKeyInfoSchema = this.subjectPublicKeyInfo.toSchema();
				var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
				var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
				//endregion
	
				return crypto.importKey("spki", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);
			}
	
			//**********************************************************************************
			/**
	   * Get SHA-1 hash value for subject public key
	   */
	
		}, {
			key: "getKeyHash",
			value: function getKeyHash() {
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				return crypto.digest({ name: "sha-1" }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));
			}
	
			//**********************************************************************************
			/**
	   * Make a signature for current value from TBS section
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm="SHA-1"] Hashing algorithm
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey) {
				var _this = this;
	
				var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "SHA-1";
	
				//region Get hashing algorithm
				var oid = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
				if (oid === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.signature.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						this.signatureAlgorithm.algorithmId = this.signature.algorithmId;
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								var hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.signature = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							this.signatureAlgorithm = this.signature; // Must be the same
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				this.tbs = this.encodeTBS().toBER(false);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(this.tbs)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this.signatureValue = new asn1js.BitString({ valueHex: result });
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
	
		}, {
			key: "verify",
			value: function verify() {
				var _this2 = this;
	
				var issuerCertificate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
				//region Global variables
				var sequence = Promise.resolve();
	
				var subjectPublicKeyInfo = {};
	
				var signature = this.signatureValue;
				var tbs = this.tbs;
				//endregion
	
				//region Set correct "subjectPublicKeyInfo" value
				if (issuerCertificate !== null) subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;else {
					if (this.issuer.isEqual(this.subject)) // Self-signed certificate
						subjectPublicKeyInfo = this.subjectPublicKeyInfo;
				}
	
				if (subjectPublicKeyInfo instanceof _PublicKeyInfo2.default === false) return Promise.reject("Please provide issuer certificate as a parameter");
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Find signer's hashing algorithm
				var shaAlgorithm = (0, _common.getHashAlgorithm)(this.signatureAlgorithm);
				if (shaAlgorithm === "") return Promise.reject("Unsupported signature algorithm: " + this.signatureAlgorithm.algorithmId);
				//endregion
	
				//region Importing public key
				sequence = sequence.then(function () {
					//region Get information about public key algorithm and default parameters for import
					var algorithmId = void 0;
					if (_this2.signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = _this2.signatureAlgorithm.algorithmId;else algorithmId = subjectPublicKeyInfo.algorithm.algorithmId;
	
					var algorithmObject = (0, _common.getAlgorithmByOID)(algorithmId);
					if ("name" in algorithmObject === false) return Promise.reject("Unsupported public key algorithm: " + algorithmId);
	
					var algorithm = (0, _common.getAlgorithmParameters)(algorithmObject.name, "importkey");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmObject.name === "ECDSA") {
						// #region Get information about named curve
						var algorithmParamsChecked = false;
	
						if ("algorithmParams" in subjectPublicKeyInfo.algorithm === true) {
							if ("idBlock" in subjectPublicKeyInfo.algorithm.algorithmParams) {
								if (subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
							}
						}
	
						if (algorithmParamsChecked === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						// #endregion
	
						algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
	
					var publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();
					var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
					var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
	
					return crypto.importKey("spki", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);
				});
				//endregion
	
				//region Verify signature for the certificate
				sequence = sequence.then(function (publicKey) {
					//region Get default algorithm parameters for verification
					var algorithm = (0, _common.getAlgorithmParameters)(publicKey.algorithm.name, "verify");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
					//endregion
	
					//region Special case for ECDSA signatures
					var signatureValue = signature.valueBlock.valueHex;
	
					if (publicKey.algorithm.name === "ECDSA") {
						var asn1 = asn1js.fromBER(signatureValue);
						signatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);
					}
					//endregion
	
					//region Special case for RSA-PSS
					if (publicKey.algorithm.name === "RSA-PSS") {
						var pssParameters = void 0;
	
						try {
							pssParameters = new _RSASSAPSSParams2.default({ schema: _this2.signatureAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject(ex);
						}
	
						if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
	
						var hashAlgo = "SHA-1";
	
						if ("hashAlgorithm" in pssParameters) {
							var hashAlgorithm = (0, _common.getAlgorithmByOID)(pssParameters.hashAlgorithm.algorithmId);
							if ("name" in hashAlgorithm === false) return Promise.reject("Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId);
	
							hashAlgo = hashAlgorithm.name;
						}
	
						algorithm.algorithm.hash.name = hashAlgo;
					}
					//endregion
	
					return crypto.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(tbs));
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbs":
						return new ArrayBuffer(0);
					case "version":
						return 0;
					case "serialNumber":
						return new asn1js.Integer();
					case "signature":
						return new _AlgorithmIdentifier2.default();
					case "issuer":
						return new _RelativeDistinguishedNames2.default();
					case "notBefore":
						return new _Time2.default();
					case "notAfter":
						return new _Time2.default();
					case "subject":
						return new _RelativeDistinguishedNames2.default();
					case "subjectPublicKeyInfo":
						return new _PublicKeyInfo2.default();
					case "issuerUniqueID":
						return new ArrayBuffer(0);
					case "subjectUniqueID":
						return new ArrayBuffer(0);
					case "extensions":
						return [];
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signatureValue":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for Certificate class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//Certificate  ::=  SEQUENCE  {
				//    tbsCertificate       TBSCertificate,
				//    signatureAlgorithm   AlgorithmIdentifier,
				//    signatureValue       BIT STRING  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [tbsCertificate]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signatureValue]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [tbsCertificate(names.tbsCertificate), _AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {
						names: {
							blockName: "signatureAlgorithm"
						}
					}), new asn1js.BitString({ name: names.signatureValue || "signatureValue" })]
				});
			}
		}]);
	
		return Certificate;
	}();
	//**************************************************************************************
	
	
	exports.default = Certificate;
	//# sourceMappingURL=Certificate.js.map

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var Time = function () {
		//**********************************************************************************
		/**
	  * Constructor for Time class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value
	  * @property {Date} [value] Value of the TIME class
	  */
		function Time() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Time);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value
	   */
			this.type = (0, _pvutils.getParametersValue)(parameters, "type", Time.defaultValues("type"));
			/**
	   * @type {Date}
	   * @description Value of the TIME class
	   */
			this.value = (0, _pvutils.getParametersValue)(parameters, "value", Time.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Time, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Time.schema({
					names: {
						utcTimeName: "utcTimeName",
						generalTimeName: "generalTimeName"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for TIME");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("utcTimeName" in asn1.result) {
					this.type = 0;
					this.value = asn1.result.utcTimeName.toDate();
				}
				if ("generalTimeName" in asn1.result) {
					this.type = 1;
					this.value = asn1.result.generalTimeName.toDate();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				var result = {};
	
				if (this.type === 0) result = new asn1js.UTCTime({ valueDate: this.value });
				if (this.type === 1) result = new asn1js.GeneralizedTime({ valueDate: this.value });
	
				return result;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					type: this.type,
					value: this.value
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "type":
						return 0;
					case "value":
						return new Date(0, 0, 0);
					default:
						throw new Error("Invalid member name for Time class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @param {boolean} optional Flag that current schema should be optional
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
				var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [utcTimeName] Name for "utcTimeName" choice
	    * @property {string} [generalTimeName] Name for "generalTimeName" choice
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					optional: optional,
					value: [new asn1js.UTCTime({ name: names.utcTimeName || "" }), new asn1js.GeneralizedTime({ name: names.generalTimeName || "" })]
				});
			}
		}]);
	
		return Time;
	}();
	//**************************************************************************************
	
	
	exports.default = Time;
	//# sourceMappingURL=Time.js.map

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _SubjectDirectoryAttributes = __webpack_require__(409);
	
	var _SubjectDirectoryAttributes2 = _interopRequireDefault(_SubjectDirectoryAttributes);
	
	var _PrivateKeyUsagePeriod = __webpack_require__(410);
	
	var _PrivateKeyUsagePeriod2 = _interopRequireDefault(_PrivateKeyUsagePeriod);
	
	var _AltName = __webpack_require__(395);
	
	var _AltName2 = _interopRequireDefault(_AltName);
	
	var _BasicConstraints = __webpack_require__(411);
	
	var _BasicConstraints2 = _interopRequireDefault(_BasicConstraints);
	
	var _IssuingDistributionPoint = __webpack_require__(412);
	
	var _IssuingDistributionPoint2 = _interopRequireDefault(_IssuingDistributionPoint);
	
	var _GeneralNames = __webpack_require__(413);
	
	var _GeneralNames2 = _interopRequireDefault(_GeneralNames);
	
	var _NameConstraints = __webpack_require__(414);
	
	var _NameConstraints2 = _interopRequireDefault(_NameConstraints);
	
	var _CRLDistributionPoints = __webpack_require__(416);
	
	var _CRLDistributionPoints2 = _interopRequireDefault(_CRLDistributionPoints);
	
	var _CertificatePolicies = __webpack_require__(418);
	
	var _CertificatePolicies2 = _interopRequireDefault(_CertificatePolicies);
	
	var _PolicyMappings = __webpack_require__(421);
	
	var _PolicyMappings2 = _interopRequireDefault(_PolicyMappings);
	
	var _AuthorityKeyIdentifier = __webpack_require__(423);
	
	var _AuthorityKeyIdentifier2 = _interopRequireDefault(_AuthorityKeyIdentifier);
	
	var _PolicyConstraints = __webpack_require__(424);
	
	var _PolicyConstraints2 = _interopRequireDefault(_PolicyConstraints);
	
	var _ExtKeyUsage = __webpack_require__(425);
	
	var _ExtKeyUsage2 = _interopRequireDefault(_ExtKeyUsage);
	
	var _InfoAccess = __webpack_require__(426);
	
	var _InfoAccess2 = _interopRequireDefault(_InfoAccess);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var Extension = function () {
		//**********************************************************************************
		/**
	  * Constructor for Extension class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Extension() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Extension);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description extnID
	   */
			this.extnID = (0, _pvutils.getParametersValue)(parameters, "extnID", Extension.defaultValues("extnID"));
			/**
	   * @type {boolean}
	   * @description critical
	   */
			this.critical = (0, _pvutils.getParametersValue)(parameters, "critical", Extension.defaultValues("critical"));
			/**
	   * @type {OctetString}
	   * @description extnValue
	   */
			if ("extnValue" in parameters) this.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });else this.extnValue = Extension.defaultValues("extnValue");
	
			if ("parsedValue" in parameters)
				/**
	    * @type {Object}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", Extension.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Extension, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Extension.schema({
					names: {
						extnID: "extnID",
						critical: "critical",
						extnValue: "extnValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for EXTENSION");
				//endregion
	
				//region Get internal properties from parsed schema
				this.extnID = asn1.result.extnID.valueBlock.toString();
				if ("critical" in asn1.result) this.critical = asn1.result.critical.valueBlock.value;
				this.extnValue = asn1.result.extnValue;
	
				//region Get "parsedValue" for well-known extensions
				asn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);
				if (asn1.offset === -1) return;
	
				switch (this.extnID) {
					case "2.5.29.9":
						// SubjectDirectoryAttributes
						this.parsedValue = new _SubjectDirectoryAttributes2.default({ schema: asn1.result });
						break;
					case "2.5.29.14":
						// SubjectKeyIdentifier
						this.parsedValue = asn1.result; // Should be just a simple OCTETSTRING
						break;
					case "2.5.29.15":
						// KeyUsage
						this.parsedValue = asn1.result; // Should be just a simple BITSTRING
						break;
					case "2.5.29.16":
						// PrivateKeyUsagePeriod
						this.parsedValue = new _PrivateKeyUsagePeriod2.default({ schema: asn1.result });
						break;
					case "2.5.29.17": // SubjectAltName
					case "2.5.29.18":
						// IssuerAltName
						this.parsedValue = new _AltName2.default({ schema: asn1.result });
						break;
					case "2.5.29.19":
						// BasicConstraints
						this.parsedValue = new _BasicConstraints2.default({ schema: asn1.result });
						break;
					case "2.5.29.20": // CRLNumber
					case "2.5.29.27":
						// BaseCRLNumber (delta CRL indicator)
						this.parsedValue = asn1.result; // Should be just a simple INTEGER
						break;
					case "2.5.29.21":
						// CRLReason
						this.parsedValue = asn1.result; // Should be just a simple ENUMERATED
						break;
					case "2.5.29.24":
						// InvalidityDate
						this.parsedValue = asn1.result; // Should be just a simple GeneralizedTime
						break;
					case "2.5.29.28":
						// IssuingDistributionPoint
						this.parsedValue = new _IssuingDistributionPoint2.default({ schema: asn1.result });
						break;
					case "2.5.29.29":
						// CertificateIssuer
						this.parsedValue = new _GeneralNames2.default({ schema: asn1.result }); // Should be just a simple
						break;
					case "2.5.29.30":
						// NameConstraints
						this.parsedValue = new _NameConstraints2.default({ schema: asn1.result });
						break;
					case "2.5.29.31": // CRLDistributionPoints
					case "2.5.29.46":
						// FreshestCRL
						this.parsedValue = new _CRLDistributionPoints2.default({ schema: asn1.result });
						break;
					case "2.5.29.32":
						// CertificatePolicies
						this.parsedValue = new _CertificatePolicies2.default({ schema: asn1.result });
						break;
					case "2.5.29.33":
						// PolicyMappings
						this.parsedValue = new _PolicyMappings2.default({ schema: asn1.result });
						break;
					case "2.5.29.35":
						// AuthorityKeyIdentifier
						this.parsedValue = new _AuthorityKeyIdentifier2.default({ schema: asn1.result });
						break;
					case "2.5.29.36":
						// PolicyConstraints
						this.parsedValue = new _PolicyConstraints2.default({ schema: asn1.result });
						break;
					case "2.5.29.37":
						// ExtKeyUsage
						this.parsedValue = new _ExtKeyUsage2.default({ schema: asn1.result });
						break;
					case "2.5.29.54":
						// InhibitAnyPolicy
						this.parsedValue = asn1.result; // Should be just a simple INTEGER
						break;
					case "1.3.6.1.5.5.7.1.1": // AuthorityInfoAccess
					case "1.3.6.1.5.5.7.1.11":
						// SubjectInfoAccess
						this.parsedValue = new _InfoAccess2.default({ schema: asn1.result });
						break;
					default:
				}
				//endregion
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));
	
				if (this.critical !== Extension.defaultValues("critical")) outputArray.push(new asn1js.Boolean({ value: this.critical }));
	
				outputArray.push(this.extnValue);
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					extnID: this.extnID,
					extnValue: this.extnValue.toJSON()
				};
	
				if (this.critical !== Extension.defaultValues("critical")) object.critical = this.critical;
	
				if ("parsedValue" in this) object.parsedValue = this.parsedValue.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "extnID":
						return "";
					case "critical":
						return false;
					case "extnValue":
						return new asn1js.OctetString();
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for Extension class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//Extension  ::=  SEQUENCE  {
				//    extnID      OBJECT IDENTIFIER,
				//    critical    BOOLEAN DEFAULT FALSE,
				//    extnValue   OCTET STRING
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [extnID]
	    * @property {string} [critical]
	    * @property {string} [extnValue]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.extnID || "" }), new asn1js.Boolean({
						name: names.critical || "",
						optional: true
					}), new asn1js.OctetString({ name: names.extnValue || "" })]
				});
			}
		}]);
	
		return Extension;
	}();
	//**************************************************************************************
	
	
	exports.default = Extension;
	//# sourceMappingURL=Extension.js.map

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var SubjectDirectoryAttributes = function () {
		//**********************************************************************************
		/**
	  * Constructor for SubjectDirectoryAttributes class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SubjectDirectoryAttributes() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SubjectDirectoryAttributes);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<Attribute>}
	   * @description attributes
	   */
			this.attributes = (0, _pvutils.getParametersValue)(parameters, "attributes", SubjectDirectoryAttributes.defaultValues("attributes"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SubjectDirectoryAttributes, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({
					names: {
						attributes: "attributes"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SubjectDirectoryAttributes");
				//endregion
	
				//region Get internal properties from parsed schema
				this.attributes = Array.from(asn1.result.attributes, function (element) {
					return new _Attribute2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.attributes, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					attributes: Array.from(this.attributes, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "attributes":
						return [];
					default:
						throw new Error("Invalid member name for SubjectDirectoryAttributes class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// SubjectDirectoryAttributes OID ::= 2.5.29.9
				//
				//SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [utcTimeName] Name for "utcTimeName" choice
	    * @property {string} [generalTimeName] Name for "generalTimeName" choice
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.attributes || "",
						value: _Attribute2.default.schema()
					})]
				});
			}
		}]);
	
		return SubjectDirectoryAttributes;
	}();
	//**************************************************************************************
	
	
	exports.default = SubjectDirectoryAttributes;
	//# sourceMappingURL=SubjectDirectoryAttributes.js.map

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PrivateKeyUsagePeriod = function () {
		//**********************************************************************************
		/**
	  * Constructor for PrivateKeyUsagePeriod class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PrivateKeyUsagePeriod() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PrivateKeyUsagePeriod);
	
			//region Internal properties of the object
			if ("notBefore" in parameters)
				/**
	    * @type {Date}
	    * @description notBefore
	    */
				this.notBefore = (0, _pvutils.getParametersValue)(parameters, "notBefore", PrivateKeyUsagePeriod.defaultValues("notBefore"));
	
			if ("notAfter" in parameters)
				/**
	    * @type {Date}
	    * @description notAfter
	    */
				this.notAfter = (0, _pvutils.getParametersValue)(parameters, "notAfter", PrivateKeyUsagePeriod.defaultValues("notAfter"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PrivateKeyUsagePeriod, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({
					names: {
						notBefore: "notBefore",
						notAfter: "notAfter"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PrivateKeyUsagePeriod");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("notBefore" in asn1.result) {
					var localNotBefore = new asn1js.GeneralizedTime();
					localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);
					this.notBefore = localNotBefore.toDate();
				}
	
				if ("notAfter" in asn1.result) {
					var localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });
					localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);
					this.notAfter = localNotAfter.toDate();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("notBefore" in this) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						valueHex: new asn1js.GeneralizedTime({ valueDate: this.notBefore }).valueBlock.valueHex
					}));
				}
	
				if ("notAfter" in this) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						valueHex: new asn1js.GeneralizedTime({ valueDate: this.notAfter }).valueBlock.valueHex
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("notBefore" in this) object.notBefore = this.notBefore;
	
				if ("notAfter" in this) object.notAfter = this.notAfter;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "notBefore":
						return new Date();
					case "notAfter":
						return new Date();
					default:
						throw new Error("Invalid member name for PrivateKeyUsagePeriod class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// PrivateKeyUsagePeriod OID ::= 2.5.29.16
				//
				//PrivateKeyUsagePeriod ::= SEQUENCE {
				//    notBefore       [0]     GeneralizedTime OPTIONAL,
				//    notAfter        [1]     GeneralizedTime OPTIONAL }
				//-- either notBefore or notAfter MUST be present
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [notBefore]
	    * @property {string} [notAfter]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Primitive({
						name: names.notBefore || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						}
					}), new asn1js.Primitive({
						name: names.notAfter || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					})]
				});
			}
		}]);
	
		return PrivateKeyUsagePeriod;
	}();
	//**************************************************************************************
	
	
	exports.default = PrivateKeyUsagePeriod;
	//# sourceMappingURL=PrivateKeyUsagePeriod.js.map

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var BasicConstraints = function () {
		//**********************************************************************************
		/**
	  * Constructor for BasicConstraints class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {Object} [cA]
	  * @property {Object} [pathLenConstraint]
	  */
		function BasicConstraints() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, BasicConstraints);
	
			//region Internal properties of the object
			/**
	   * @type {boolean}
	   * @description cA
	   */
			this.cA = (0, _pvutils.getParametersValue)(parameters, "cA", false);
	
			if ("pathLenConstraint" in parameters)
				/**
	    * @type {number|Integer}
	    * @description pathLenConstraint
	    */
				this.pathLenConstraint = (0, _pvutils.getParametersValue)(parameters, "pathLenConstraint", 0);
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(BasicConstraints, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({
					names: {
						cA: "cA",
						pathLenConstraint: "pathLenConstraint"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for BasicConstraints");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("cA" in asn1.result) this.cA = asn1.result.cA.valueBlock.value;
	
				if ("pathLenConstraint" in asn1.result) {
					if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) this.pathLenConstraint = asn1.result.pathLenConstraint;else this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if (this.cA !== BasicConstraints.defaultValues("cA")) outputArray.push(new asn1js.Boolean({ value: this.cA }));
	
				if ("pathLenConstraint" in this) {
					if (this.pathLenConstraint instanceof asn1js.Integer) outputArray.push(this.pathLenConstraint);else outputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if (this.cA !== BasicConstraints.defaultValues("cA")) object.cA = this.cA;
	
				if ("pathLenConstraint" in this) {
					if (this.pathLenConstraint instanceof asn1js.Integer) object.pathLenConstraint = this.pathLenConstraint.toJSON();else object.pathLenConstraint = this.pathLenConstraint;
				}
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "cA":
						return false;
					default:
						throw new Error("Invalid member name for BasicConstraints class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// BasicConstraints OID ::= 2.5.29.19
				//
				//BasicConstraints ::= SEQUENCE {
				//    cA                      BOOLEAN DEFAULT FALSE,
				//    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [cA]
	    * @property {string} [pathLenConstraint]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Boolean({
						optional: true,
						name: names.cA || ""
					}), new asn1js.Integer({
						optional: true,
						name: names.pathLenConstraint || ""
					})]
				});
			}
		}]);
	
		return BasicConstraints;
	}();
	//**************************************************************************************
	
	
	exports.default = BasicConstraints;
	//# sourceMappingURL=BasicConstraints.js.map

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var IssuingDistributionPoint = function () {
		//**********************************************************************************
		/**
	  * Constructor for IssuingDistributionPoint class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function IssuingDistributionPoint() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, IssuingDistributionPoint);
	
			//region Internal properties of the object
			if ("distributionPoint" in parameters)
				/**
	    * @type {Array.<GeneralName>|RelativeDistinguishedNames}
	    * @description distributionPoint
	    */
				this.distributionPoint = (0, _pvutils.getParametersValue)(parameters, "distributionPoint", IssuingDistributionPoint.defaultValues("distributionPoint"));
	
			/**
	   * @type {boolean}
	   * @description onlyContainsUserCerts
	   */
			this.onlyContainsUserCerts = (0, _pvutils.getParametersValue)(parameters, "onlyContainsUserCerts", IssuingDistributionPoint.defaultValues("onlyContainsUserCerts"));
	
			/**
	   * @type {boolean}
	   * @description onlyContainsCACerts
	   */
			this.onlyContainsCACerts = (0, _pvutils.getParametersValue)(parameters, "onlyContainsCACerts", IssuingDistributionPoint.defaultValues("onlyContainsCACerts"));
	
			if ("onlySomeReasons" in parameters)
				/**
	    * @type {number}
	    * @description onlySomeReasons
	    */
				this.onlySomeReasons = (0, _pvutils.getParametersValue)(parameters, "onlySomeReasons", IssuingDistributionPoint.defaultValues("onlySomeReasons"));
	
			/**
	   * @type {boolean}
	   * @description indirectCRL
	   */
			this.indirectCRL = (0, _pvutils.getParametersValue)(parameters, "indirectCRL", IssuingDistributionPoint.defaultValues("indirectCRL"));
	
			/**
	   * @type {boolean}
	   * @description onlyContainsAttributeCerts
	   */
			this.onlyContainsAttributeCerts = (0, _pvutils.getParametersValue)(parameters, "onlyContainsAttributeCerts", IssuingDistributionPoint.defaultValues("onlyContainsAttributeCerts"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(IssuingDistributionPoint, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({
					names: {
						distributionPoint: "distributionPoint",
						distributionPointNames: "distributionPointNames",
						onlyContainsUserCerts: "onlyContainsUserCerts",
						onlyContainsCACerts: "onlyContainsCACerts",
						onlySomeReasons: "onlySomeReasons",
						indirectCRL: "indirectCRL",
						onlyContainsAttributeCerts: "onlyContainsAttributeCerts"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for IssuingDistributionPoint");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("distributionPoint" in asn1.result) {
					switch (true) {
						case asn1.result.distributionPoint.idBlock.tagNumber === 0:
							// GENERAL_NAMES variant
							this.distributionPoint = Array.from(asn1.result.distributionPointNames, function (element) {
								return new _GeneralName2.default({ schema: element });
							});
							break;
						case asn1.result.distributionPoint.idBlock.tagNumber === 1:
							// RDN variant
							{
								asn1.result.distributionPoint.idBlock.tagClass = 1; // UNIVERSAL
								asn1.result.distributionPoint.idBlock.tagNumber = 16; // SEQUENCE
	
								this.distributionPoint = new _RelativeDistinguishedNames2.default({ schema: asn1.result.distributionPoint });
							}
							break;
						default:
							throw new Error("Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}");
					}
				}
	
				if ("onlyContainsUserCerts" in asn1.result) {
					var view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);
					this.onlyContainsUserCerts = view[0] !== 0x00;
				}
	
				if ("onlyContainsCACerts" in asn1.result) {
					var _view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);
					this.onlyContainsCACerts = _view[0] !== 0x00;
				}
	
				if ("onlySomeReasons" in asn1.result) {
					var _view2 = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);
					this.onlySomeReasons = _view2[0];
				}
	
				if ("indirectCRL" in asn1.result) {
					var _view3 = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);
					this.indirectCRL = _view3[0] !== 0x00;
				}
	
				if ("onlyContainsAttributeCerts" in asn1.result) {
					var _view4 = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);
					this.onlyContainsAttributeCerts = _view4[0] !== 0x00;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("distributionPoint" in this) {
					var value = void 0;
	
					if (this.distributionPoint instanceof Array) {
						value = new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: Array.from(this.distributionPoint, function (element) {
								return element.toSchema();
							})
						});
					} else {
						value = this.distributionPoint.toSchema();
	
						value.idBlock.tagClass = 3; // CONTEXT - SPECIFIC
						value.idBlock.tagNumber = 1; // [1]
					}
	
					outputArray.push(value);
				}
	
				if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues("onlyContainsUserCerts")) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						valueHex: new Uint8Array([0xFF]).buffer
					}));
				}
	
				if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues("onlyContainsCACerts")) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						valueHex: new Uint8Array([0xFF]).buffer
					}));
				}
	
				if ("onlySomeReasons" in this) {
					var buffer = new ArrayBuffer(1);
					var view = new Uint8Array(buffer);
	
					view[0] = this.onlySomeReasons;
	
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						valueHex: buffer
					}));
				}
	
				if (this.indirectCRL !== IssuingDistributionPoint.defaultValues("indirectCRL")) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 4 // [4]
						},
						valueHex: new Uint8Array([0xFF]).buffer
					}));
				}
	
				if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues("onlyContainsAttributeCerts")) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 5 // [5]
						},
						valueHex: new Uint8Array([0xFF]).buffer
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("distributionPoint" in this) {
					if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, function (element) {
						return element.toJSON();
					});else object.distributionPoint = this.distributionPoint.toJSON();
				}
	
				if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues("onlyContainsUserCerts")) object.onlyContainsUserCerts = this.onlyContainsUserCerts;
	
				if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues("onlyContainsCACerts")) object.onlyContainsCACerts = this.onlyContainsCACerts;
	
				if ("onlySomeReasons" in this) object.onlySomeReasons = this.onlySomeReasons;
	
				if (this.indirectCRL !== IssuingDistributionPoint.defaultValues("indirectCRL")) object.indirectCRL = this.indirectCRL;
	
				if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues("onlyContainsAttributeCerts")) object.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "distributionPoint":
						return [];
					case "onlyContainsUserCerts":
						return false;
					case "onlyContainsCACerts":
						return false;
					case "onlySomeReasons":
						return 0;
					case "indirectCRL":
						return false;
					case "onlyContainsAttributeCerts":
						return false;
					default:
						throw new Error("Invalid member name for IssuingDistributionPoint class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// IssuingDistributionPoint OID ::= 2.5.29.28
				//
				//IssuingDistributionPoint ::= SEQUENCE {
				//    distributionPoint          [0] DistributionPointName OPTIONAL,
				//    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,
				//    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,
				//    onlySomeReasons            [3] ReasonFlags OPTIONAL,
				//    indirectCRL                [4] BOOLEAN DEFAULT FALSE,
				//    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
				//
				//ReasonFlags ::= BIT STRING {
				//    unused                  (0),
				//    keyCompromise           (1),
				//    cACompromise            (2),
				//    affiliationChanged      (3),
				//    superseded              (4),
				//    cessationOfOperation    (5),
				//    certificateHold         (6),
				//    privilegeWithdrawn      (7),
				//    aACompromise            (8) }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [distributionPoint]
	    * @property {string} [distributionPointNames]
	    * @property {string} [onlyContainsUserCerts]
	    * @property {string} [onlyContainsCACerts]
	    * @property {string} [onlySomeReasons]
	    * @property {string} [indirectCRL]
	    * @property {string} [onlyContainsAttributeCerts]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Choice({
							value: [new asn1js.Constructed({
								name: names.distributionPoint || "",
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 0 // [0]
								},
								value: [new asn1js.Repeated({
									name: names.distributionPointNames || "",
									value: _GeneralName2.default.schema()
								})]
							}), new asn1js.Constructed({
								name: names.distributionPoint || "",
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: _RelativeDistinguishedNames2.default.schema().valueBlock.value
							})]
						})]
					}), new asn1js.Primitive({
						name: names.onlyContainsUserCerts || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					}), // IMPLICIT boolean value
					new asn1js.Primitive({
						name: names.onlyContainsCACerts || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						}
					}), // IMPLICIT boolean value
					new asn1js.Primitive({
						name: names.onlySomeReasons || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						}
					}), // IMPLICIT bitstring value
					new asn1js.Primitive({
						name: names.indirectCRL || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 4 // [4]
						}
					}), // IMPLICIT boolean value
					new asn1js.Primitive({
						name: names.onlyContainsAttributeCerts || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 5 // [5]
						}
					}) // IMPLICIT boolean value
					]
				});
			}
		}]);
	
		return IssuingDistributionPoint;
	}();
	//**************************************************************************************
	
	
	exports.default = IssuingDistributionPoint;
	//# sourceMappingURL=IssuingDistributionPoint.js.map

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var GeneralNames = function () {
		//**********************************************************************************
		/**
	  * Constructor for GeneralNames class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function GeneralNames() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GeneralNames);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<GeneralName>}
	   * @description Array of "general names"
	   */
			this.names = (0, _pvutils.getParametersValue)(parameters, "names", GeneralNames.defaultValues("names"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(GeneralNames, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, GeneralNames.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for GeneralNames");
				//endregion
	
				//region Get internal properties from parsed schema
				this.names = Array.from(asn1.result.names, function (element) {
					return new _GeneralName2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.names, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					names: Array.from(this.names, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "names":
						return [];
					default:
						throw new Error("Invalid member name for GeneralNames class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				/**
	    * @type {Object}
	    * @property {string} utcTimeName Name for "utcTimeName" choice
	    * @property {string} generalTimeName Name for "generalTimeName" choice
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					value: [new asn1js.Repeated({
						name: names.blockName || "names",
						value: _GeneralName2.default.schema()
					})]
				});
			}
		}]);
	
		return GeneralNames;
	}();
	//**************************************************************************************
	
	
	exports.default = GeneralNames;
	//# sourceMappingURL=GeneralNames.js.map

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralSubtree = __webpack_require__(415);
	
	var _GeneralSubtree2 = _interopRequireDefault(_GeneralSubtree);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var NameConstraints = function () {
		//**********************************************************************************
		/**
	  * Constructor for NameConstraints class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function NameConstraints() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, NameConstraints);
	
			//region Internal properties of the object
			if ("permittedSubtrees" in parameters)
				/**
	    * @type {Array.<GeneralSubtree>}
	    * @description permittedSubtrees
	    */
				this.permittedSubtrees = (0, _pvutils.getParametersValue)(parameters, "permittedSubtrees", NameConstraints.defaultValues("permittedSubtrees"));
	
			if ("excludedSubtrees" in parameters)
				/**
	    * @type {Array.<GeneralSubtree>}
	    * @description excludedSubtrees
	    */
				this.excludedSubtrees = (0, _pvutils.getParametersValue)(parameters, "excludedSubtrees", NameConstraints.defaultValues("excludedSubtrees"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(NameConstraints, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({
					names: {
						permittedSubtrees: "permittedSubtrees",
						excludedSubtrees: "excludedSubtrees"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for NameConstraints");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("permittedSubtrees" in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, function (element) {
					return new _GeneralSubtree2.default({ schema: element });
				});
	
				if ("excludedSubtrees" in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, function (element) {
					return new _GeneralSubtree2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("permittedSubtrees" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.permittedSubtrees, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
	
				if ("excludedSubtrees" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.excludedSubtrees, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("permittedSubtrees" in this) object.permittedSubtrees = Array.from(this.permittedSubtrees, function (element) {
					return element.toJSON();
				});
	
				if ("excludedSubtrees" in this) object.excludedSubtrees = Array.from(this.excludedSubtrees, function (element) {
					return element.toJSON();
				});
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "permittedSubtrees":
						return [];
					case "excludedSubtrees":
						return [];
					default:
						throw new Error("Invalid member name for NameConstraints class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// NameConstraints OID ::= 2.5.29.30
				//
				//NameConstraints ::= SEQUENCE {
				//    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
				//    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [permittedSubtrees]
	    * @property {string} [excludedSubtrees]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Repeated({
							name: names.permittedSubtrees || "",
							value: _GeneralSubtree2.default.schema()
						})]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Repeated({
							name: names.excludedSubtrees || "",
							value: _GeneralSubtree2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return NameConstraints;
	}();
	//**************************************************************************************
	
	
	exports.default = NameConstraints;
	//# sourceMappingURL=NameConstraints.js.map

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var GeneralSubtree = function () {
		//**********************************************************************************
		/**
	  * Constructor for GeneralSubtree class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function GeneralSubtree() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, GeneralSubtree);
	
			//region Internal properties of the object
			/**
	   * @type {GeneralName}
	   * @description base
	   */
			this.base = (0, _pvutils.getParametersValue)(parameters, "base", GeneralSubtree.defaultValues("base"));
	
			/**
	   * @type {number|Integer}
	   * @description base
	   */
			this.minimum = (0, _pvutils.getParametersValue)(parameters, "minimum", GeneralSubtree.defaultValues("minimum"));
	
			if ("maximum" in parameters)
				/**
	    * @type {number|Integer}
	    * @description minimum
	    */
				this.maximum = (0, _pvutils.getParametersValue)(parameters, "maximum", GeneralSubtree.defaultValues("maximum"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(GeneralSubtree, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({
					names: {
						base: {
							names: {
								blockName: "base"
							}
						},
						minimum: "minimum",
						maximum: "maximum"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ");
				//endregion
	
				//region Get internal properties from parsed schema
				this.base = new _GeneralName2.default({ schema: asn1.result.base });
	
				if ("minimum" in asn1.result) {
					if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;else this.minimum = asn1.result.minimum.valueBlock.valueDec;
				}
	
				if ("maximum" in asn1.result) {
					if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;else this.maximum = asn1.result.maximum.valueBlock.valueDec;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.base.toSchema());
	
				if (this.minimum !== 0) {
					var valueMinimum = 0;
	
					if (this.minimum instanceof asn1js.Integer) valueMinimum = this.minimum;else valueMinimum = new asn1js.Integer({ value: this.minimum });
	
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [valueMinimum]
					}));
				}
	
				if ("maximum" in this) {
					var valueMaximum = 0;
	
					if (this.maximum instanceof asn1js.Integer) valueMaximum = this.maximum;else valueMaximum = new asn1js.Integer({ value: this.maximum });
	
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [valueMaximum]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					base: this.base.toJSON()
				};
	
				if (this.minimum !== 0) {
					if (typeof this.minimum === "number") object.minimum = this.minimum;else object.minimum = this.minimum.toJSON();
				}
	
				if ("maximum" in this) {
					if (typeof this.maximum === "number") object.maximum = this.maximum;else object.maximum = this.maximum.toJSON();
				}
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "base":
						return new _GeneralName2.default();
					case "minimum":
						return 0;
					case "maximum":
						return 0;
					default:
						throw new Error("Invalid member name for GeneralSubtree class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//GeneralSubtree ::= SEQUENCE {
				//    base                    GeneralName,
				//    minimum         [0]     BaseDistance DEFAULT 0,
				//    maximum         [1]     BaseDistance OPTIONAL }
				//
				//BaseDistance ::= INTEGER (0..MAX)
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [base]
	    * @property {string} [minimum]
	    * @property {string} [maximum]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_GeneralName2.default.schema(names.base || {}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Integer({ name: names.minimum || "" })]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Integer({ name: names.maximum || "" })]
					})]
				});
			}
		}]);
	
		return GeneralSubtree;
	}();
	//**************************************************************************************
	
	
	exports.default = GeneralSubtree;
	//# sourceMappingURL=GeneralSubtree.js.map

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _DistributionPoint = __webpack_require__(417);
	
	var _DistributionPoint2 = _interopRequireDefault(_DistributionPoint);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var CRLDistributionPoints = function () {
		//**********************************************************************************
		/**
	  * Constructor for CRLDistributionPoints class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CRLDistributionPoints() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CRLDistributionPoints);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<DistributionPoint>}
	   * @description distributionPoints
	   */
			this.distributionPoints = (0, _pvutils.getParametersValue)(parameters, "distributionPoints", CRLDistributionPoints.defaultValues("distributionPoints"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CRLDistributionPoints, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CRLDistributionPoints.schema({
					names: {
						distributionPoints: "distributionPoints"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CRLDistributionPoints");
				//endregion
	
				//region Get internal properties from parsed schema
				this.distributionPoints = Array.from(asn1.result.distributionPoints, function (element) {
					return new _DistributionPoint2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.distributionPoints, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					distributionPoints: Array.from(this.distributionPoints, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "distributionPoints":
						return [];
					default:
						throw new Error("Invalid member name for CRLDistributionPoints class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// CRLDistributionPoints OID ::= 2.5.29.31
				//
				//CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [distributionPoints]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.distributionPoints || "",
						value: _DistributionPoint2.default.schema()
					})]
				});
			}
		}]);
	
		return CRLDistributionPoints;
	}();
	//**************************************************************************************
	
	
	exports.default = CRLDistributionPoints;
	//# sourceMappingURL=CRLDistributionPoints.js.map

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var DistributionPoint = function () {
		//**********************************************************************************
		/**
	  * Constructor for DistributionPoint class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  * @property {Object} [distributionPoint]
	  * @property {Object} [reasons]
	  * @property {Object} [cRLIssuer]
	  */
		function DistributionPoint() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, DistributionPoint);
	
			//region Internal properties of the object
			if ("distributionPoint" in parameters)
				/**
	    * @type {Array.<GeneralName>}
	    * @description distributionPoint
	    */
				this.distributionPoint = (0, _pvutils.getParametersValue)(parameters, "distributionPoint", DistributionPoint.defaultValues("distributionPoint"));
	
			if ("reasons" in parameters)
				/**
	    * @type {BitString}
	    * @description values
	    */
				this.reasons = (0, _pvutils.getParametersValue)(parameters, "reasons", DistributionPoint.defaultValues("reasons"));
	
			if ("cRLIssuer" in parameters)
				/**
	    * @type {Array.<GeneralName>}
	    * @description cRLIssuer
	    */
				this.cRLIssuer = (0, _pvutils.getParametersValue)(parameters, "cRLIssuer", DistributionPoint.defaultValues("cRLIssuer"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(DistributionPoint, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({
					names: {
						distributionPoint: "distributionPoint",
						distributionPointNames: "distributionPointNames",
						reasons: "reasons",
						cRLIssuer: "cRLIssuer",
						cRLIssuerNames: "cRLIssuerNames"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for DistributionPoint");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("distributionPoint" in asn1.result) {
					if (asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant
						this.distributionPoint = Array.from(asn1.result.distributionPointNames, function (element) {
							return new _GeneralName2.default({ schema: element });
						});
	
					if (asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant
						{
							asn1.result.distributionPoint.idBlock.tagClass = 1; // UNIVERSAL
							asn1.result.distributionPoint.idBlock.tagNumber = 16; // SEQUENCE
	
							this.distributionPoint = new _RelativeDistinguishedNames2.default({ schema: asn1.result.distributionPoint });
						}
				}
	
				if ("reasons" in asn1.result) this.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });
	
				if ("cRLIssuer" in asn1.result) this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, function (element) {
					return new _GeneralName2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("distributionPoint" in this) {
					var internalValue = void 0;
	
					if (this.distributionPoint instanceof Array) {
						internalValue = new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: Array.from(this.distributionPoint, function (element) {
								return element.toSchema();
							})
						});
					} else {
						internalValue = new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 1 // [1]
							},
							value: [this.distributionPoint.toSchema()]
						});
					}
	
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [internalValue]
					}));
				}
	
				if ("reasons" in this) {
					outputArray.push(new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						valueHex: this.reasons.valueBlock.valueHex
					}));
				}
	
				if ("cRLIssuer" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: Array.from(this.cRLIssuer, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("distributionPoint" in this) {
					if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, function (element) {
						return element.toJSON();
					});else object.distributionPoint = this.distributionPoint.toJSON();
				}
	
				if ("reasons" in this) object.reasons = this.reasons.toJSON();
	
				if ("cRLIssuer" in this) object.cRLIssuer = Array.from(this.cRLIssuer, function (element) {
					return element.toJSON();
				});
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "distributionPoint":
						return [];
					case "reasons":
						return new asn1js.BitString();
					case "cRLIssuer":
						return [];
					default:
						throw new Error("Invalid member name for DistributionPoint class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//DistributionPoint ::= SEQUENCE {
				//    distributionPoint       [0]     DistributionPointName OPTIONAL,
				//    reasons                 [1]     ReasonFlags OPTIONAL,
				//    cRLIssuer               [2]     GeneralNames OPTIONAL }
				//
				//DistributionPointName ::= CHOICE {
				//    fullName                [0]     GeneralNames,
				//    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }
				//
				//ReasonFlags ::= BIT STRING {
				//    unused                  (0),
				//    keyCompromise           (1),
				//    cACompromise            (2),
				//    affiliationChanged      (3),
				//    superseded              (4),
				//    cessationOfOperation    (5),
				//    certificateHold         (6),
				//    privilegeWithdrawn      (7),
				//    aACompromise            (8) }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [distributionPoint]
	    * @property {string} [distributionPointNames]
	    * @property {string} [reasons]
	    * @property {string} [cRLIssuer]
	    * @property {string} [cRLIssuerNames]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Choice({
							value: [new asn1js.Constructed({
								name: names.distributionPoint || "",
								optional: true,
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 0 // [0]
								},
								value: [new asn1js.Repeated({
									name: names.distributionPointNames || "",
									value: _GeneralName2.default.schema()
								})]
							}), new asn1js.Constructed({
								name: names.distributionPoint || "",
								optional: true,
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: _RelativeDistinguishedNames2.default.schema().valueBlock.value
							})]
						})]
					}), new asn1js.Primitive({
						name: names.reasons || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					}), // IMPLICIT bitstring value
					new asn1js.Constructed({
						name: names.cRLIssuer || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: [new asn1js.Repeated({
							name: names.cRLIssuerNames || "",
							value: _GeneralName2.default.schema()
						})]
					}) // IMPLICIT bitstring value
					]
				});
			}
		}]);
	
		return DistributionPoint;
	}();
	//**************************************************************************************
	
	
	exports.default = DistributionPoint;
	//# sourceMappingURL=DistributionPoint.js.map

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _PolicyInformation = __webpack_require__(419);
	
	var _PolicyInformation2 = _interopRequireDefault(_PolicyInformation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var CertificatePolicies = function () {
		//**********************************************************************************
		/**
	  * Constructor for CertificatePolicies class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertificatePolicies() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertificatePolicies);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<PolicyInformation>}
	   * @description certificatePolicies
	   */
			this.certificatePolicies = (0, _pvutils.getParametersValue)(parameters, "certificatePolicies", CertificatePolicies.defaultValues("certificatePolicies"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertificatePolicies, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({
					names: {
						certificatePolicies: "certificatePolicies"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CertificatePolicies");
				//endregion
	
				//region Get internal properties from parsed schema
				this.certificatePolicies = Array.from(asn1.result.certificatePolicies, function (element) {
					return new _PolicyInformation2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.certificatePolicies, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					certificatePolicies: Array.from(this.certificatePolicies, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "certificatePolicies":
						return [];
					default:
						throw new Error("Invalid member name for CertificatePolicies class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// CertificatePolicies OID ::= 2.5.29.32
				//
				//certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [certificatePolicies]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.certificatePolicies || "",
						value: _PolicyInformation2.default.schema()
					})]
				});
			}
		}]);
	
		return CertificatePolicies;
	}();
	//**************************************************************************************
	
	
	exports.default = CertificatePolicies;
	//# sourceMappingURL=CertificatePolicies.js.map

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _PolicyQualifierInfo = __webpack_require__(420);
	
	var _PolicyQualifierInfo2 = _interopRequireDefault(_PolicyQualifierInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PolicyInformation = function () {
		//**********************************************************************************
		/**
	  * Constructor for PolicyInformation class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PolicyInformation() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PolicyInformation);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description policyIdentifier
	   */
			this.policyIdentifier = (0, _pvutils.getParametersValue)(parameters, "policyIdentifier", PolicyInformation.defaultValues("policyIdentifier"));
	
			if ("policyQualifiers" in parameters)
				/**
	    * @type {Array.<PolicyQualifierInfo>}
	    * @description Value of the TIME class
	    */
				this.policyQualifiers = (0, _pvutils.getParametersValue)(parameters, "policyQualifiers", PolicyInformation.defaultValues("policyQualifiers"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PolicyInformation, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({
					names: {
						policyIdentifier: "policyIdentifier",
						policyQualifiers: "policyQualifiers"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PolicyInformation");
				//endregion
	
				//region Get internal properties from parsed schema
				this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();
	
				if ("policyQualifiers" in asn1.result) this.policyQualifiers = Array.from(asn1.result.policyQualifiers, function (element) {
					return new _PolicyQualifierInfo2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));
	
				if ("policyQualifiers" in this) {
					outputArray.push(new asn1js.Sequence({
						value: Array.from(this.policyQualifiers, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					policyIdentifier: this.policyIdentifier
				};
	
				if ("policyQualifiers" in this) object.policyQualifiers = Array.from(this.policyQualifiers, function (element) {
					return element.toJSON();
				});
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "policyIdentifier":
						return "";
					case "policyQualifiers":
						return [];
					default:
						throw new Error("Invalid member name for PolicyInformation class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PolicyInformation ::= SEQUENCE {
				//    policyIdentifier   CertPolicyId,
				//    policyQualifiers   SEQUENCE SIZE (1..MAX) OF
				//    PolicyQualifierInfo OPTIONAL }
				//
				//CertPolicyId ::= OBJECT IDENTIFIER
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [policyIdentifier]
	    * @property {string} [policyQualifiers]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.policyIdentifier || "" }), new asn1js.Sequence({
						optional: true,
						value: [new asn1js.Repeated({
							name: names.policyQualifiers || "",
							value: _PolicyQualifierInfo2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return PolicyInformation;
	}();
	//**************************************************************************************
	
	
	exports.default = PolicyInformation;
	//# sourceMappingURL=PolicyInformation.js.map

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PolicyQualifierInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for PolicyQualifierInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PolicyQualifierInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PolicyQualifierInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description policyQualifierId
	   */
			this.policyQualifierId = (0, _pvutils.getParametersValue)(parameters, "policyQualifierId", PolicyQualifierInfo.defaultValues("policyQualifierId"));
			/**
	   * @type {Object}
	   * @description qualifier
	   */
			this.qualifier = (0, _pvutils.getParametersValue)(parameters, "qualifier", PolicyQualifierInfo.defaultValues("qualifier"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PolicyQualifierInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({
					names: {
						policyQualifierId: "policyQualifierId",
						qualifier: "qualifier"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PolicyQualifierInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();
				this.qualifier = asn1.result.qualifier;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.policyQualifierId }), this.qualifier]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					policyQualifierId: this.policyQualifierId,
					qualifier: this.qualifier.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "policyQualifierId":
						return "";
					case "qualifier":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for PolicyQualifierInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PolicyQualifierInfo ::= SEQUENCE {
				//    policyQualifierId  PolicyQualifierId,
				//    qualifier          ANY DEFINED BY policyQualifierId }
				//
				//id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
				//id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
				//id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
				//
				//PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [policyQualifierId]
	    * @property {string} [qualifier]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.policyQualifierId || "" }), new asn1js.Any({ name: names.qualifier || "" })]
				});
			}
		}]);
	
		return PolicyQualifierInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = PolicyQualifierInfo;
	//# sourceMappingURL=PolicyQualifierInfo.js.map

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _PolicyMapping = __webpack_require__(422);
	
	var _PolicyMapping2 = _interopRequireDefault(_PolicyMapping);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PolicyMappings = function () {
		//**********************************************************************************
		/**
	  * Constructor for PolicyMappings class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PolicyMappings() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PolicyMappings);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<PolicyMapping>}
	   * @description mappings
	   */
			this.mappings = (0, _pvutils.getParametersValue)(parameters, "mappings", PolicyMappings.defaultValues("mappings"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PolicyMappings, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PolicyMappings.schema({
					names: {
						mappings: "mappings"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PolicyMappings");
				//endregion
	
				//region Get internal properties from parsed schema
				this.mappings = Array.from(asn1.result.mappings, function (element) {
					return new _PolicyMapping2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.mappings, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					mappings: Array.from(this.mappings, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "mappings":
						return [];
					default:
						throw new Error("Invalid member name for PolicyMappings class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// PolicyMappings OID ::= 2.5.29.33
				//
				//PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [utcTimeName] Name for "utcTimeName" choice
	    * @property {string} [generalTimeName] Name for "generalTimeName" choice
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.mappings || "",
						value: _PolicyMapping2.default.schema()
					})]
				});
			}
		}]);
	
		return PolicyMappings;
	}();
	//**************************************************************************************
	
	
	exports.default = PolicyMappings;
	//# sourceMappingURL=PolicyMappings.js.map

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PolicyMapping = function () {
		//**********************************************************************************
		/**
	  * Constructor for PolicyMapping class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PolicyMapping() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PolicyMapping);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description issuerDomainPolicy
	   */
			this.issuerDomainPolicy = (0, _pvutils.getParametersValue)(parameters, "issuerDomainPolicy", PolicyMapping.defaultValues("issuerDomainPolicy"));
			/**
	   * @type {string}
	   * @description subjectDomainPolicy
	   */
			this.subjectDomainPolicy = (0, _pvutils.getParametersValue)(parameters, "subjectDomainPolicy", PolicyMapping.defaultValues("subjectDomainPolicy"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PolicyMapping, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({
					names: {
						issuerDomainPolicy: "issuerDomainPolicy",
						subjectDomainPolicy: "subjectDomainPolicy"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PolicyMapping");
				//endregion
	
				//region Get internal properties from parsed schema
				this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();
				this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }), new asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					issuerDomainPolicy: this.issuerDomainPolicy,
					subjectDomainPolicy: this.subjectDomainPolicy
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "issuerDomainPolicy":
						return "";
					case "subjectDomainPolicy":
						return "";
					default:
						throw new Error("Invalid member name for PolicyMapping class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PolicyMapping ::= SEQUENCE {
				//    issuerDomainPolicy      CertPolicyId,
				//    subjectDomainPolicy     CertPolicyId }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [issuerDomainPolicy]
	    * @property {string} [subjectDomainPolicy]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.issuerDomainPolicy || "" }), new asn1js.ObjectIdentifier({ name: names.subjectDomainPolicy || "" })]
				});
			}
		}]);
	
		return PolicyMapping;
	}();
	//**************************************************************************************
	
	
	exports.default = PolicyMapping;
	//# sourceMappingURL=PolicyMapping.js.map

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var AuthorityKeyIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for AuthorityKeyIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function AuthorityKeyIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, AuthorityKeyIdentifier);
	
			//region Internal properties of the object
			if ("keyIdentifier" in parameters)
				/**
	    * @type {OctetString}
	    * @description keyIdentifier
	    */
				this.keyIdentifier = (0, _pvutils.getParametersValue)(parameters, "keyIdentifier", AuthorityKeyIdentifier.defaultValues("keyIdentifier"));
	
			if ("authorityCertIssuer" in parameters)
				/**
	    * @type {Array.<GeneralName>}
	    * @description authorityCertIssuer
	    */
				this.authorityCertIssuer = (0, _pvutils.getParametersValue)(parameters, "authorityCertIssuer", AuthorityKeyIdentifier.defaultValues("authorityCertIssuer"));
	
			if ("authorityCertSerialNumber" in parameters)
				/**
	    * @type {Integer}
	    * @description authorityCertIssuer
	    */
				this.authorityCertSerialNumber = (0, _pvutils.getParametersValue)(parameters, "authorityCertSerialNumber", AuthorityKeyIdentifier.defaultValues("authorityCertSerialNumber"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(AuthorityKeyIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({
					names: {
						keyIdentifier: "keyIdentifier",
						authorityCertIssuer: "authorityCertIssuer",
						authorityCertSerialNumber: "authorityCertSerialNumber"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for AuthorityKeyIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("keyIdentifier" in asn1.result) {
					asn1.result.keyIdentifier.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.keyIdentifier.idBlock.tagNumber = 4; // OCTETSTRING
	
					this.keyIdentifier = asn1.result.keyIdentifier;
				}
	
				if ("authorityCertIssuer" in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, function (element) {
					return new _GeneralName2.default({ schema: element });
				});
	
				if ("authorityCertSerialNumber" in asn1.result) {
					asn1.result.authorityCertSerialNumber.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.authorityCertSerialNumber.idBlock.tagNumber = 2; // INTEGER
	
					this.authorityCertSerialNumber = asn1.result.authorityCertSerialNumber;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if ("keyIdentifier" in this) {
					var value = this.keyIdentifier;
	
					value.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
					value.idBlock.tagNumber = 0; // [0]
	
					outputArray.push(value);
				}
	
				if ("authorityCertIssuer" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.authorityCertIssuer, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
	
				if ("authorityCertSerialNumber" in this) {
					var _value = this.authorityCertSerialNumber;
	
					_value.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
					_value.idBlock.tagNumber = 2; // [2]
	
					outputArray.push(_value);
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("keyIdentifier" in this) object.keyIdentifier = this.keyIdentifier.toJSON();
	
				if ("authorityCertIssuer" in this) object.authorityCertIssuer = Array.from(this.authorityCertIssuer, function (element) {
					return element.toJSON();
				});
	
				if ("authorityCertSerialNumber" in this) object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyIdentifier":
						return new asn1js.OctetString();
					case "authorityCertIssuer":
						return [];
					case "authorityCertSerialNumber":
						return new asn1js.Integer();
					default:
						throw new Error("Invalid member name for AuthorityKeyIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// AuthorityKeyIdentifier OID ::= 2.5.29.35
				//
				//AuthorityKeyIdentifier ::= SEQUENCE {
				//    keyIdentifier             [0] KeyIdentifier           OPTIONAL,
				//    authorityCertIssuer       [1] GeneralNames            OPTIONAL,
				//    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }
				//
				//KeyIdentifier ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyIdentifier]
	    * @property {string} [authorityCertIssuer]
	    * @property {string} [authorityCertSerialNumber]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Primitive({
						name: names.keyIdentifier || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						}
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Repeated({
							name: names.authorityCertIssuer || "",
							value: _GeneralName2.default.schema()
						})]
					}), new asn1js.Primitive({
						name: names.authorityCertSerialNumber || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						}
					})]
				});
			}
		}]);
	
		return AuthorityKeyIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = AuthorityKeyIdentifier;
	//# sourceMappingURL=AuthorityKeyIdentifier.js.map

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var PolicyConstraints = function () {
		//**********************************************************************************
		/**
	  * Constructor for PolicyConstraints class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PolicyConstraints() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PolicyConstraints);
	
			//region Internal properties of the object
			if ("requireExplicitPolicy" in parameters)
				/**
	    * @type {number}
	    * @description requireExplicitPolicy
	    */
				this.requireExplicitPolicy = (0, _pvutils.getParametersValue)(parameters, "requireExplicitPolicy", PolicyConstraints.defaultValues("requireExplicitPolicy"));
	
			if ("inhibitPolicyMapping" in parameters)
				/**
	    * @type {number}
	    * @description Value of the TIME class
	    */
				this.inhibitPolicyMapping = (0, _pvutils.getParametersValue)(parameters, "inhibitPolicyMapping", PolicyConstraints.defaultValues("inhibitPolicyMapping"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PolicyConstraints, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PolicyConstraints.schema({
					names: {
						requireExplicitPolicy: "requireExplicitPolicy",
						inhibitPolicyMapping: "inhibitPolicyMapping"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PolicyConstraints");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("requireExplicitPolicy" in asn1.result) {
					var field1 = asn1.result.requireExplicitPolicy;
	
					field1.idBlock.tagClass = 1; // UNIVERSAL
					field1.idBlock.tagNumber = 2; // INTEGER
	
					var ber1 = field1.toBER(false);
					var int1 = asn1js.fromBER(ber1);
	
					this.requireExplicitPolicy = int1.result.valueBlock.valueDec;
				}
	
				if ("inhibitPolicyMapping" in asn1.result) {
					var field2 = asn1.result.inhibitPolicyMapping;
	
					field2.idBlock.tagClass = 1; // UNIVERSAL
					field2.idBlock.tagNumber = 2; // INTEGER
	
					var ber2 = field2.toBER(false);
					var int2 = asn1js.fromBER(ber2);
	
					this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create correct values for output sequence
				var outputArray = [];
	
				if ("requireExplicitPolicy" in this) {
					var int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });
	
					int1.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
					int1.idBlock.tagNumber = 0; // [0]
	
					outputArray.push(int1);
				}
	
				if ("inhibitPolicyMapping" in this) {
					var int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });
	
					int2.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
					int2.idBlock.tagNumber = 1; // [1]
	
					outputArray.push(int2);
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if ("requireExplicitPolicy" in this) object.requireExplicitPolicy = this.requireExplicitPolicy;
	
				if ("inhibitPolicyMapping" in this) object.inhibitPolicyMapping = this.inhibitPolicyMapping;
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "requireExplicitPolicy":
						return 0;
					case "inhibitPolicyMapping":
						return 0;
					default:
						throw new Error("Invalid member name for PolicyConstraints class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// PolicyMappings OID ::= 2.5.29.36
				//
				//PolicyConstraints ::= SEQUENCE {
				//    requireExplicitPolicy           [0] SkipCerts OPTIONAL,
				//    inhibitPolicyMapping            [1] SkipCerts OPTIONAL }
				//
				//SkipCerts ::= INTEGER (0..MAX)
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [requireExplicitPolicy]
	    * @property {string} [inhibitPolicyMapping]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Primitive({
						name: names.requireExplicitPolicy || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						}
					}), // IMPLICIT integer value
					new asn1js.Primitive({
						name: names.inhibitPolicyMapping || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						}
					}) // IMPLICIT integer value
					]
				});
			}
		}]);
	
		return PolicyConstraints;
	}();
	//**************************************************************************************
	
	
	exports.default = PolicyConstraints;
	//# sourceMappingURL=PolicyConstraints.js.map

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var ExtKeyUsage = function () {
		//**********************************************************************************
		/**
	  * Constructor for ExtKeyUsage class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ExtKeyUsage() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ExtKeyUsage);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<string>}
	   * @description keyPurposes
	   */
			this.keyPurposes = (0, _pvutils.getParametersValue)(parameters, "keyPurposes", ExtKeyUsage.defaultValues("keyPurposes"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ExtKeyUsage, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({
					names: {
						keyPurposes: "keyPurposes"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ExtKeyUsage");
				//endregion
	
				//region Get internal properties from parsed schema
				this.keyPurposes = Array.from(asn1.result.keyPurposes, function (element) {
					return element.valueBlock.toString();
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.keyPurposes, function (element) {
						return new asn1js.ObjectIdentifier({ value: element });
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					keyPurposes: Array.from(this.keyPurposes)
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyPurposes":
						return [];
					default:
						throw new Error("Invalid member name for ExtKeyUsage class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// ExtKeyUsage OID ::= 2.5.29.37
				//
				// ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
	
				// KeyPurposeId ::= OBJECT IDENTIFIER
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyPurposes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.keyPurposes || "",
						value: new asn1js.ObjectIdentifier()
					})]
				});
			}
		}]);
	
		return ExtKeyUsage;
	}();
	//**************************************************************************************
	
	
	exports.default = ExtKeyUsage;
	//# sourceMappingURL=ExtKeyUsage.js.map

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AccessDescription = __webpack_require__(390);
	
	var _AccessDescription2 = _interopRequireDefault(_AccessDescription);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var InfoAccess = function () {
		//**********************************************************************************
		/**
	  * Constructor for InfoAccess class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function InfoAccess() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, InfoAccess);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<AccessDescription>}
	   * @description accessDescriptions
	   */
			this.accessDescriptions = (0, _pvutils.getParametersValue)(parameters, "accessDescriptions", InfoAccess.defaultValues("accessDescriptions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(InfoAccess, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, InfoAccess.schema({
					names: {
						accessDescriptions: "accessDescriptions"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for InfoAccess");
				//endregion
	
				//region Get internal properties from parsed schema
				this.accessDescriptions = Array.from(asn1.result.accessDescriptions, function (element) {
					return new _AccessDescription2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.accessDescriptions, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					accessDescriptions: Array.from(this.accessDescriptions, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "accessDescriptions":
						return [];
					default:
						throw new Error("Invalid member name for InfoAccess class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				// AuthorityInfoAccess OID ::= 1.3.6.1.5.5.7.1.1
				// SubjectInfoAccess OID ::= 1.3.6.1.5.5.7.1.11
				//
				//AuthorityInfoAccessSyntax  ::=
				//SEQUENCE SIZE (1..MAX) OF AccessDescription
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [accessDescriptions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.accessDescriptions || "",
						value: _AccessDescription2.default.schema()
					})]
				});
			}
		}]);
	
		return InfoAccess;
	}();
	//**************************************************************************************
	
	
	exports.default = InfoAccess;
	//# sourceMappingURL=InfoAccess.js.map

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var Extensions = function () {
		//**********************************************************************************
		/**
	  * Constructor for Extensions class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Extensions() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Extensions);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<Extension>}
	   * @description type
	   */
			this.extensions = (0, _pvutils.getParametersValue)(parameters, "extensions", Extensions.defaultValues("extensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Extensions, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({
					names: {
						extensions: "extensions"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for EXTENSIONS");
				//endregion
	
				//region Get internal properties from parsed schema
				this.extensions = Array.from(asn1.result.extensions, function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.extensions, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					extensions: Array.from(this.extensions, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "extensions":
						return [];
					default:
						throw new Error("Invalid member name for Extensions class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @param {boolean} optional Flag that current schema should be optional
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
				var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
				//Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [extensions]
	    * @property {string} [extension]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					optional: optional,
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.extensions || "",
						value: _Extension2.default.schema(names.extension || {})
					})]
				});
			}
		}]);
	
		return Extensions;
	}();
	//**************************************************************************************
	
	
	exports.default = Extensions;
	//# sourceMappingURL=Extensions.js.map

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _CertificateRevocationList = __webpack_require__(429);
	
	var _CertificateRevocationList2 = _interopRequireDefault(_CertificateRevocationList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var CRLBag = function () {
		//**********************************************************************************
		/**
	  * Constructor for CRLBag class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CRLBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CRLBag);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description crlId
	   */
			this.crlId = (0, _pvutils.getParametersValue)(parameters, "crlId", CRLBag.defaultValues("crlId"));
			/**
	   * @type {*}
	   * @description crlValue
	   */
			this.crlValue = (0, _pvutils.getParametersValue)(parameters, "crlValue", CRLBag.defaultValues("crlValue"));
	
			if ("parsedValue" in parameters)
				/**
	    * @type {*}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", CRLBag.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CRLBag, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CRLBag.schema({
					names: {
						id: "crlId",
						value: "crlValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CRLBag");
				//endregion
	
				//region Get internal properties from parsed schema
				this.crlId = asn1.result.crlId.valueBlock.toString();
				this.crlValue = asn1.result.crlValue;
	
				switch (this.crlId) {
					case "1.2.840.113549.1.9.23.1":
						// x509CRL
						{
							var asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);
							this.parsedValue = new _CertificateRevocationList2.default({ schema: asn1Inner.result });
						}
						break;
					default:
						throw new Error("Incorrect \"crlId\" value in CertBag: " + this.crlId);
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				if ("parsedValue" in this) {
					this.certId = "1.2.840.113549.1.9.23.1";
					this.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });
				}
	
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.crlId }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.crlValue.toSchema()]
					})]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					crlId: this.crlId,
					crlValue: this.crlValue.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "crlId":
						return "";
					case "crlValue":
						return new asn1js.Any();
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for CRLBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "crlId":
						return memberValue === "";
					case "crlValue":
						return memberValue instanceof asn1js.Any;
					case "parsedValue":
						return memberValue instanceof Object && Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for CRLBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CRLBag ::= SEQUENCE {
				//    crlId     	BAG-TYPE.&id ({CRLTypes}),
				//    crlValue 	[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [id]
	    * @property {string} [value]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.id || "id" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.value || "value" })] // EXPLICIT ANY value
					})]
				});
			}
		}]);
	
		return CRLBag;
	}();
	//**************************************************************************************
	
	
	exports.default = CRLBag;
	//# sourceMappingURL=CRLBag.js.map

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _Time = __webpack_require__(407);
	
	var _Time2 = _interopRequireDefault(_Time);
	
	var _RevokedCertificate = __webpack_require__(430);
	
	var _RevokedCertificate2 = _interopRequireDefault(_RevokedCertificate);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	var _PublicKeyInfo = __webpack_require__(382);
	
	var _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	function tbsCertList() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		//TBSCertList  ::=  SEQUENCE  {
		//    version                 Version OPTIONAL,
		//                                 -- if present, MUST be v2
		//    signature               AlgorithmIdentifier,
		//    issuer                  Name,
		//    thisUpdate              Time,
		//    nextUpdate              Time OPTIONAL,
		//    revokedCertificates     SEQUENCE OF SEQUENCE  {
		//        userCertificate         CertificateSerialNumber,
		//        revocationDate          Time,
		//        crlEntryExtensions      Extensions OPTIONAL
		//        -- if present, version MUST be v2
		//    }  OPTIONAL,
		//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
		//    -- if present, version MUST be v2
		//}
	
		/**
	  * @type {Object}
	  * @property {string} [blockName]
	  * @property {string} [tbsCertListVersion]
	  * @property {string} [signature]
	  * @property {string} [issuer]
	  * @property {string} [tbsCertListThisUpdate]
	  * @property {string} [tbsCertListNextUpdate]
	  * @property {string} [tbsCertListRevokedCertificates]
	  * @property {string} [crlExtensions]
	  */
		var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
		return new asn1js.Sequence({
			name: names.blockName || "tbsCertList",
			value: [new asn1js.Integer({
				optional: true,
				name: names.tbsCertListVersion || "tbsCertList.version",
				value: 2
			}), // EXPLICIT integer value (v2)
			_AlgorithmIdentifier2.default.schema(names.signature || {
				names: {
					blockName: "tbsCertList.signature"
				}
			}), _RelativeDistinguishedNames2.default.schema(names.issuer || {
				names: {
					blockName: "tbsCertList.issuer"
				}
			}), _Time2.default.schema(names.tbsCertListThisUpdate || {
				names: {
					utcTimeName: "tbsCertList.thisUpdate",
					generalTimeName: "tbsCertList.thisUpdate"
				}
			}), _Time2.default.schema(names.tbsCertListNextUpdate || {
				names: {
					utcTimeName: "tbsCertList.nextUpdate",
					generalTimeName: "tbsCertList.nextUpdate"
				}
			}, true), new asn1js.Sequence({
				optional: true,
				value: [new asn1js.Repeated({
					name: names.tbsCertListRevokedCertificates || "tbsCertList.revokedCertificates",
					value: new asn1js.Sequence({
						value: [new asn1js.Integer(), _Time2.default.schema(), _Extensions2.default.schema({}, true)]
					})
				})]
			}), new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 0 // [0]
				},
				value: [_Extensions2.default.schema(names.crlExtensions || {
					names: {
						blockName: "tbsCertList.extensions"
					}
				})]
			}) // EXPLICIT SEQUENCE value
			]
		});
	}
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	
	var CertificateRevocationList = function () {
		//**********************************************************************************
		/**
	  * Constructor for Attribute class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertificateRevocationList() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertificateRevocationList);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description tbs
	   */
			this.tbs = (0, _pvutils.getParametersValue)(parameters, "tbs", CertificateRevocationList.defaultValues("tbs"));
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", CertificateRevocationList.defaultValues("version"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signature
	   */
			this.signature = (0, _pvutils.getParametersValue)(parameters, "signature", CertificateRevocationList.defaultValues("signature"));
			/**
	   * @type {RelativeDistinguishedNames}
	   * @description issuer
	   */
			this.issuer = (0, _pvutils.getParametersValue)(parameters, "issuer", CertificateRevocationList.defaultValues("issuer"));
			/**
	   * @type {Time}
	   * @description thisUpdate
	   */
			this.thisUpdate = (0, _pvutils.getParametersValue)(parameters, "thisUpdate", CertificateRevocationList.defaultValues("thisUpdate"));
	
			if ("nextUpdate" in parameters)
				/**
	    * @type {Time}
	    * @description nextUpdate
	    */
				this.nextUpdate = (0, _pvutils.getParametersValue)(parameters, "nextUpdate", CertificateRevocationList.defaultValues("nextUpdate"));
	
			if ("revokedCertificates" in parameters)
				/**
	    * @type {Array.<RevokedCertificate>}
	    * @description revokedCertificates
	    */
				this.revokedCertificates = (0, _pvutils.getParametersValue)(parameters, "revokedCertificates", CertificateRevocationList.defaultValues("revokedCertificates"));
	
			if ("crlExtensions" in parameters)
				/**
	    * @type {Extensions}
	    * @description crlExtensions
	    */
				this.crlExtensions = (0, _pvutils.getParametersValue)(parameters, "crlExtensions", CertificateRevocationList.defaultValues("crlExtensions"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signatureAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", CertificateRevocationList.defaultValues("signatureAlgorithm"));
			/**
	   * @type {BitString}
	   * @description signatureValue
	   */
			this.signatureValue = (0, _pvutils.getParametersValue)(parameters, "signatureValue", CertificateRevocationList.defaultValues("signatureValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertificateRevocationList, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CertificateRevocationList.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CRL");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbs = asn1.result.tbsCertList.valueBeforeDecode;
	
				if ("tbsCertList.version" in asn1.result) this.version = asn1.result["tbsCertList.version"].valueBlock.valueDec;
				this.signature = new _AlgorithmIdentifier2.default({ schema: asn1.result["tbsCertList.signature"] });
				this.issuer = new _RelativeDistinguishedNames2.default({ schema: asn1.result["tbsCertList.issuer"] });
				this.thisUpdate = new _Time2.default({ schema: asn1.result["tbsCertList.thisUpdate"] });
				if ("tbsCertList.nextUpdate" in asn1.result) this.nextUpdate = new _Time2.default({ schema: asn1.result["tbsCertList.nextUpdate"] });
				if ("tbsCertList.revokedCertificates" in asn1.result) this.revokedCertificates = Array.from(asn1.result["tbsCertList.revokedCertificates"], function (element) {
					return new _RevokedCertificate2.default({ schema: element });
				});
				if ("tbsCertList.extensions" in asn1.result) this.crlExtensions = new _Extensions2.default({ schema: asn1.result["tbsCertList.extensions"] });
	
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });
				this.signatureValue = asn1.result.signatureValue;
				//endregion
			}
	
			//**********************************************************************************
	
		}, {
			key: "encodeTBS",
			value: function encodeTBS() {
				//region Create array for output sequence
				var outputArray = [];
	
				if (this.version !== CertificateRevocationList.defaultValues("version")) outputArray.push(new asn1js.Integer({ value: this.version }));
	
				outputArray.push(this.signature.toSchema());
				outputArray.push(this.issuer.toSchema());
				outputArray.push(this.thisUpdate.toSchema());
	
				if ("nextUpdate" in this) outputArray.push(this.nextUpdate.toSchema());
	
				if ("revokedCertificates" in this) {
					outputArray.push(new asn1js.Sequence({
						value: Array.from(this.revokedCertificates, function (element) {
							return element.toSchema();
						})
					}));
				}
	
				if ("crlExtensions" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.crlExtensions.toSchema()]
					}));
				}
				//endregion
	
				return new asn1js.Sequence({
					value: outputArray
				});
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Decode stored TBS value
				var tbsSchema = void 0;
	
				if (encodeFlag === false) {
					if (this.tbs.length === 0) // No stored TBS part
						return CertificateRevocationList.schema();
	
					tbsSchema = asn1js.fromBER(this.tbs).result;
				}
				//endregion
				//region Create TBS schema via assembling from TBS parts
				else tbsSchema = this.encodeTBS();
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					tbs: (0, _pvutils.bufferToHexCodes)(this.tbs, 0, this.tbs.byteLength),
					signature: this.signature.toJSON(),
					issuer: this.issuer.toJSON(),
					thisUpdate: this.thisUpdate.toJSON(),
					signatureAlgorithm: this.signatureAlgorithm.toJSON(),
					signatureValue: this.signatureValue.toJSON()
				};
	
				if (this.version !== CertificateRevocationList.defaultValues("version")) object.version = this.version;
	
				if ("nextUpdate" in this) object.nextUpdate = this.nextUpdate.toJSON();
	
				if ("revokedCertificates" in this) object.revokedCertificates = Array.from(this.revokedCertificates, function (element) {
					return element.toJSON();
				});
	
				if ("crlExtensions" in this) object.crlExtensions = this.crlExtensions.toJSON();
	
				return object;
			}
	
			//**********************************************************************************
	
		}, {
			key: "isCertificateRevoked",
			value: function isCertificateRevoked(certificate) {
				//region Check that issuer of the input certificate is the same with issuer of this CRL
				if (this.issuer.isEqual(certificate.issuer) === false) return false;
				//endregion
	
				//region Check that there are revoked certificates in this CRL
				if ("revokedCertificates" in this === false) return false;
				//endregion
	
				//region Search for input certificate in revoked certificates array
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = this.revokedCertificates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var revokedCertificate = _step.value;
	
						if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) return true;
					}
					//endregion
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return false;
			}
	
			//**********************************************************************************
			/**
	   * Make a signature for existing CRL data
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey) {
				var _this = this;
	
				var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "SHA-1";
	
				//region Get a private key from function parameter
				if (typeof privateKey === "undefined") return Promise.reject("Need to provide a private key for signing");
				//endregion
	
				//region Get hashing algorithm
				var oid = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
				if (oid === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.signature.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						this.signatureAlgorithm.algorithmId = this.signature.algorithmId;
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								var hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.signature = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							this.signatureAlgorithm = this.signature; // Must be the same
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				this.tbs = this.encodeTBS().toBER(false);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(this.tbs)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this.signatureValue = new asn1js.BitString({ valueHex: result });
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Verify existing signature
	   * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters
	   * @returns {*}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this2 = this;
	
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//region Global variables
				var sequence = Promise.resolve();
	
				var signature = this.signatureValue;
				var tbs = this.tbs;
	
				var subjectPublicKeyInfo = -1;
				//endregion
	
				//region Get information about CRL issuer certificate
				if ("issuerCertificate" in parameters) // "issuerCertificate" must be of type "simpl.CERT"
					{
						subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;
	
						// The CRL issuer name and "issuerCertificate" subject name are not equal
						if (this.issuer.isEqual(parameters.issuerCertificate.subject) === false) return Promise.resolve(false);
					}
	
				//region In case if there is only public key during verification
				if ("publicKeyInfo" in parameters) subjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type "PublicKeyInfo"
				//endregion
	
				if (subjectPublicKeyInfo instanceof _PublicKeyInfo2.default === false) return Promise.reject("Issuer's certificate must be provided as an input parameter");
				//endregion
	
				//region Check the CRL for unknown critical extensions
				if ("crlExtensions" in this) {
					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;
	
					try {
						for (var _iterator2 = this.crlExtensions.extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var extension = _step2.value;
	
							if (extension.critical) {
								// We can not be sure that unknown extension has no value for CRL signature
								if ("parsedValue" in extension === false) return Promise.resolve(false);
							}
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}
				}
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Find signer's hashing algorithm
				var shaAlgorithm = (0, _common.getHashAlgorithm)(this.signatureAlgorithm);
				if (shaAlgorithm === "") return Promise.reject("Unsupported signature algorithm: " + this.signatureAlgorithm.algorithmId);
				//endregion
	
				//region Import public key
				sequence = sequence.then(function () {
					//region Get information about public key algorithm and default parameters for import
					var algorithmObject = (0, _common.getAlgorithmByOID)(_this2.signature.algorithmId);
					if ("name" in algorithmObject === "") return Promise.reject("Unsupported public key algorithm: " + _this2.signature.algorithmId);
	
					var algorithm = (0, _common.getAlgorithmParameters)(algorithmObject.name, "importkey");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmObject.name === "ECDSA") {
						// #region Get information about named curve
						var algorithmParamsChecked = false;
	
						if ("algorithmParams" in subjectPublicKeyInfo.algorithm === true) {
							if ("idBlock" in subjectPublicKeyInfo.algorithm.algorithmParams) {
								if (subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
							}
						}
	
						if (algorithmParamsChecked === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						// #endregion
	
						algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
	
					var publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();
					var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
					var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
	
					return crypto.importKey("spki", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);
				});
				//endregion
	
				//region Verify signature for the certificate
				sequence = sequence.then(function (publicKey) {
					//region Get default algorithm parameters for verification
					var algorithm = (0, _common.getAlgorithmParameters)(publicKey.algorithm.name, "verify");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
					//endregion
	
					//region Special case for ECDSA signatures
					var signatureValue = signature.valueBlock.valueHex;
	
					if (publicKey.algorithm.name === "ECDSA") {
						var asn1 = asn1js.fromBER(signatureValue);
						signatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);
					}
					//endregion
	
					//region Special case for RSA-PSS
					if (publicKey.algorithm.name === "RSA-PSS") {
						var pssParameters = void 0;
	
						try {
							pssParameters = new _RSASSAPSSParams2.default({ schema: _this2.signatureAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject(ex);
						}
	
						if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
	
						var hashAlgo = "SHA-1";
	
						if ("hashAlgorithm" in pssParameters) {
							var hashAlgorithm = (0, _common.getAlgorithmByOID)(pssParameters.hashAlgorithm.algorithmId);
							if ("name" in hashAlgorithm === false) return Promise.reject("Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId);
	
							hashAlgo = hashAlgorithm.name;
						}
	
						algorithm.algorithm.hash.name = hashAlgo;
					}
					//endregion
	
					return crypto.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(tbs));
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbs":
						return new ArrayBuffer(0);
					case "version":
						return 1;
					case "signature":
						return new _AlgorithmIdentifier2.default();
					case "issuer":
						return new _RelativeDistinguishedNames2.default();
					case "thisUpdate":
						return new _Time2.default();
					case "nextUpdate":
						return new _Time2.default();
					case "revokedCertificates":
						return [];
					case "crlExtensions":
						return new _Extensions2.default();
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signatureValue":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for CertificateRevocationList class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CertificateList  ::=  SEQUENCE  {
				//    tbsCertList          TBSCertList,
				//    signatureAlgorithm   AlgorithmIdentifier,
				//    signatureValue       BIT STRING  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signatureValue]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "CertificateList",
					value: [tbsCertList(parameters), _AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {
						names: {
							blockName: "signatureAlgorithm"
						}
					}), new asn1js.BitString({ name: names.signatureValue || "signatureValue" })]
				});
			}
		}]);
	
		return CertificateRevocationList;
	}();
	//**************************************************************************************
	
	
	exports.default = CertificateRevocationList;
	//# sourceMappingURL=CertificateRevocationList.js.map

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Time = __webpack_require__(407);
	
	var _Time2 = _interopRequireDefault(_Time);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5280
	 */
	var RevokedCertificate = function () {
		//**********************************************************************************
		/**
	  * Constructor for RevokedCertificate class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RevokedCertificate() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RevokedCertificate);
	
			//region Internal properties of the object
			/**
	   * @type {Integer}
	   * @description userCertificate
	   */
			this.userCertificate = (0, _pvutils.getParametersValue)(parameters, "userCertificate", RevokedCertificate.defaultValues("userCertificate"));
			/**
	   * @type {Time}
	   * @description revocationDate
	   */
			this.revocationDate = (0, _pvutils.getParametersValue)(parameters, "revocationDate", RevokedCertificate.defaultValues("revocationDate"));
	
			if ("crlEntryExtensions" in parameters)
				/**
	    * @type {Extensions}
	    * @description crlEntryExtensions
	    */
				this.crlEntryExtensions = (0, _pvutils.getParametersValue)(parameters, "crlEntryExtensions", RevokedCertificate.defaultValues("crlEntryExtensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RevokedCertificate, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RevokedCertificate.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for REV_CERT");
				//endregion
	
				//region Get internal properties from parsed schema
				this.userCertificate = asn1.result.userCertificate;
				this.revocationDate = new _Time2.default({ schema: asn1.result.revocationDate });
	
				if ("crlEntryExtensions" in asn1.result) this.crlEntryExtensions = new _Extensions2.default({ schema: asn1.result.crlEntryExtensions });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [this.userCertificate, this.revocationDate.toSchema()];
	
				if ("crlEntryExtensions" in this) outputArray.push(this.crlEntryExtensions.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					userCertificate: this.userCertificate.toJSON(),
					revocationDate: this.revocationDate.toJSON
				};
	
				if ("crlEntryExtensions" in this) object.crlEntryExtensions = this.crlEntryExtensions.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "userCertificate":
						return new asn1js.Integer();
					case "revocationDate":
						return new _Time2.default();
					case "crlEntryExtensions":
						return new _Extensions2.default();
					default:
						throw new Error("Invalid member name for RevokedCertificate class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [userCertificate]
	    * @property {string} [revocationDate]
	    * @property {string} [crlEntryExtensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.userCertificate || "userCertificate" }), _Time2.default.schema({
						names: {
							utcTimeName: names.revocationDate || "revocationDate",
							generalTimeName: names.revocationDate || "revocationDate"
						}
					}), _Extensions2.default.schema({
						names: {
							blockName: names.crlEntryExtensions || "crlEntryExtensions"
						}
					}, true)]
				});
			}
		}]);
	
		return RevokedCertificate;
	}();
	//**************************************************************************************
	
	
	exports.default = RevokedCertificate;
	//# sourceMappingURL=RevokedCertificate.js.map

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var SecretBag = function () {
		//**********************************************************************************
		/**
	  * Constructor for SecretBag class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SecretBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SecretBag);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description secretTypeId
	   */
			this.secretTypeId = (0, _pvutils.getParametersValue)(parameters, "secretTypeId", SecretBag.defaultValues("secretTypeId"));
			/**
	   * @type {*}
	   * @description secretValue
	   */
			this.secretValue = (0, _pvutils.getParametersValue)(parameters, "secretValue", SecretBag.defaultValues("secretValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SecretBag, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SecretBag.schema({
					names: {
						id: "secretTypeId",
						value: "secretValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SecretBag");
				//endregion
	
				//region Get internal properties from parsed schema
				this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();
				this.secretValue = asn1.result.secretValue;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.secretTypeId }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.secretValue.toSchema()]
					})]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					secretTypeId: this.secretTypeId,
					secretValue: this.secretValue.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "secretTypeId":
						return "";
					case "secretValue":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for SecretBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "secretTypeId":
						return memberValue === "";
					case "secretValue":
						return memberValue instanceof asn1js.Any;
					default:
						throw new Error("Invalid member name for SecretBag class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SecretBag ::= SEQUENCE {
				//    secretTypeId BAG-TYPE.&id ({SecretTypes}),
				//    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [id]
	    * @property {string} [value]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.id || "id" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.value || "value" })] // EXPLICIT ANY value
					})]
				});
			}
		}]);
	
		return SecretBag;
	}();
	//**************************************************************************************
	
	
	exports.default = SecretBag;
	//# sourceMappingURL=SecretBag.js.map

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _OriginatorInfo = __webpack_require__(433);
	
	var _OriginatorInfo2 = _interopRequireDefault(_OriginatorInfo);
	
	var _RecipientInfo = __webpack_require__(437);
	
	var _RecipientInfo2 = _interopRequireDefault(_RecipientInfo);
	
	var _EncryptedContentInfo = __webpack_require__(402);
	
	var _EncryptedContentInfo2 = _interopRequireDefault(_EncryptedContentInfo);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RSAESOAEPParams = __webpack_require__(453);
	
	var _RSAESOAEPParams2 = _interopRequireDefault(_RSAESOAEPParams);
	
	var _KeyTransRecipientInfo = __webpack_require__(438);
	
	var _KeyTransRecipientInfo2 = _interopRequireDefault(_KeyTransRecipientInfo);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _RecipientEncryptedKey = __webpack_require__(445);
	
	var _RecipientEncryptedKey2 = _interopRequireDefault(_RecipientEncryptedKey);
	
	var _KeyAgreeRecipientIdentifier = __webpack_require__(446);
	
	var _KeyAgreeRecipientIdentifier2 = _interopRequireDefault(_KeyAgreeRecipientIdentifier);
	
	var _KeyAgreeRecipientInfo = __webpack_require__(441);
	
	var _KeyAgreeRecipientInfo2 = _interopRequireDefault(_KeyAgreeRecipientInfo);
	
	var _RecipientEncryptedKeys = __webpack_require__(444);
	
	var _RecipientEncryptedKeys2 = _interopRequireDefault(_RecipientEncryptedKeys);
	
	var _KEKRecipientInfo = __webpack_require__(449);
	
	var _KEKRecipientInfo2 = _interopRequireDefault(_KEKRecipientInfo);
	
	var _KEKIdentifier = __webpack_require__(450);
	
	var _KEKIdentifier2 = _interopRequireDefault(_KEKIdentifier);
	
	var _PBKDF2Params = __webpack_require__(403);
	
	var _PBKDF2Params2 = _interopRequireDefault(_PBKDF2Params);
	
	var _PasswordRecipientinfo = __webpack_require__(451);
	
	var _PasswordRecipientinfo2 = _interopRequireDefault(_PasswordRecipientinfo);
	
	var _ECCCMSSharedInfo = __webpack_require__(454);
	
	var _ECCCMSSharedInfo2 = _interopRequireDefault(_ECCCMSSharedInfo);
	
	var _OriginatorIdentifierOrKey = __webpack_require__(442);
	
	var _OriginatorIdentifierOrKey2 = _interopRequireDefault(_OriginatorIdentifierOrKey);
	
	var _OriginatorPublicKey = __webpack_require__(443);
	
	var _OriginatorPublicKey2 = _interopRequireDefault(_OriginatorPublicKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var EnvelopedData = function () {
		//**********************************************************************************
		/**
	  * Constructor for EnvelopedData class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function EnvelopedData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, EnvelopedData);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", EnvelopedData.defaultValues("version"));
	
			if ("originatorInfo" in parameters)
				/**
	    * @type {OriginatorInfo}
	    * @description originatorInfo
	    */
				this.originatorInfo = (0, _pvutils.getParametersValue)(parameters, "originatorInfo", EnvelopedData.defaultValues("originatorInfo"));
	
			/**
	   * @type {Array.<RecipientInfo>}
	   * @description recipientInfos
	   */
			this.recipientInfos = (0, _pvutils.getParametersValue)(parameters, "recipientInfos", EnvelopedData.defaultValues("recipientInfos"));
			/**
	   * @type {EncryptedContentInfo}
	   * @description encryptedContentInfo
	   */
			this.encryptedContentInfo = (0, _pvutils.getParametersValue)(parameters, "encryptedContentInfo", EnvelopedData.defaultValues("encryptedContentInfo"));
	
			if ("unprotectedAttrs" in parameters)
				/**
	    * @type {Array.<Attribute>}
	    * @description unprotectedAttrs
	    */
				this.unprotectedAttrs = (0, _pvutils.getParametersValue)(parameters, "unprotectedAttrs", EnvelopedData.defaultValues("unprotectedAttrs"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(EnvelopedData, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, EnvelopedData.schema({
					names: {
						version: "version",
						originatorInfo: "originatorInfo",
						recipientInfos: "recipientInfos",
						encryptedContentInfo: {
							names: {
								blockName: "encryptedContentInfo"
							}
						},
						unprotectedAttrs: "unprotectedAttrs"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_ENVELOPED_DATA");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
	
				if ("originatorInfo" in asn1.result) {
					asn1.result.originatorInfo.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.originatorInfo.idBlock.tagNumber = 16; // SEQUENCE
	
					this.originatorInfo = new _OriginatorInfo2.default({ schema: asn1.result.originatorInfo });
				}
	
				this.recipientInfos = Array.from(asn1.result.recipientInfos, function (element) {
					return new _RecipientInfo2.default({ schema: element });
				});
				this.encryptedContentInfo = new _EncryptedContentInfo2.default({ schema: asn1.result.encryptedContentInfo });
	
				if ("unprotectedAttrs" in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, function (element) {
					return new _Attribute2.default({ schema: element });
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
	
				if ("originatorInfo" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: this.originatorInfo.toSchema().valueBlock.value
					}));
				}
	
				outputArray.push(new asn1js.Set({
					value: Array.from(this.recipientInfos, function (element) {
						return element.toSchema();
					})
				}));
	
				outputArray.push(this.encryptedContentInfo.toSchema());
	
				if ("unprotectedAttrs" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: Array.from(this.unprotectedAttrs, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version
				};
	
				if ("originatorInfo" in this) _object.originatorInfo = this.originatorInfo.toJSON();
	
				_object.recipientInfos = Array.from(this.recipientInfos, function (element) {
					return element.toJSON();
				});
				_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();
	
				if ("unprotectedAttrs" in this) _object.unprotectedAttrs = Array.from(this.unprotectedAttrs, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
	
			//**********************************************************************************
			/**
	   * Helpers function for filling "RecipientInfo" based on recipient's certificate.
	   * Problem with WebCrypto is that for RSA certificates we have only one option - "key transport" and
	   * for ECC certificates we also have one option - "key agreement". As soon as Google will implement
	   * DH algorithm it would be possible to use "key agreement" also for RSA certificates.
	   * @param {Certificate} [certificate] Recipient's certificate
	   * @param {Object} [parameters] Additional parameters neccessary for "fine tunning" of encryption process
	   * @param {number} [variant] Variant = 1 is for "key transport", variant = 2 is for "key agreement". In fact the "variant" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: "key transport" for RSA and "key agreement" for ECC certificates.
	   */
	
		}, {
			key: "addRecipientByCertificate",
			value: function addRecipientByCertificate(certificate, parameters, variant) {
				//region Initial variables 
				var encryptionParameters = parameters || {};
				//endregion 
	
				//region Check type of certificate
				if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.113549") !== -1) variant = 1; // For the moment it is the only variant for RSA-based certificates
				else {
						if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.10045") !== -1) variant = 2; // For the moment it is the only variant for ECC-based certificates
						else throw new Error("Unknown type of certificate's public key: " + certificate.subjectPublicKeyInfo.algorithm.algorithmId);
					}
				//endregion 
	
				//region Initialize encryption parameters 
				if ("oaepHashAlgorithm" in encryptionParameters === false) encryptionParameters.oaepHashAlgorithm = "SHA-512";
	
				if ("kdfAlgorithm" in encryptionParameters === false) encryptionParameters.kdfAlgorithm = "SHA-512";
	
				if ("kekEncryptionLength" in encryptionParameters === false) encryptionParameters.kekEncryptionLength = 256;
				//endregion 
	
				//region Add new "recipient" depends on "variant" and certificate type 
				switch (variant) {
					case 1:
						// Key transport scheme
						{
							//region keyEncryptionAlgorithm
							var oaepOID = (0, _common.getOIDByAlgorithm)({
								name: "RSA-OAEP"
							});
							if (oaepOID === "") throw new Error("Can not find OID for OAEP");
							//endregion
	
							//region RSAES-OAEP-params
							var hashOID = (0, _common.getOIDByAlgorithm)({
								name: encryptionParameters.oaepHashAlgorithm
							});
							if (hashOID === "") throw new Error("Unknown OAEP hash algorithm: " + encryptionParameters.oaepHashAlgorithm);
	
							var hashAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: hashOID,
								algorithmParams: new asn1js.Null()
							});
	
							var rsaOAEPParams = new _RSAESOAEPParams2.default({
								hashAlgorithm: hashAlgorithm,
								maskGenAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // id-mgf1
									algorithmParams: hashAlgorithm.toSchema()
								})
							});
							//endregion
	
							//region KeyTransRecipientInfo
							var keyInfo = new _KeyTransRecipientInfo2.default({
								version: 0,
								rid: new _IssuerAndSerialNumber2.default({
									issuer: certificate.issuer,
									serialNumber: certificate.serialNumber
								}),
								keyEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: oaepOID,
									algorithmParams: rsaOAEPParams.toSchema()
								}),
								recipientCertificate: certificate
								// "encryptedKey" will be calculated in "encrypt" function
							});
							//endregion
	
							//region Final values for "CMS_ENVELOPED_DATA"
							this.recipientInfos.push(new _RecipientInfo2.default({
								variant: 1,
								value: keyInfo
							}));
							//endregion
						}
						break;
					case 2:
						// Key agreement scheme
						{
							//region RecipientEncryptedKey
							var encryptedKey = new _RecipientEncryptedKey2.default({
								rid: new _KeyAgreeRecipientIdentifier2.default({
									variant: 1,
									value: new _IssuerAndSerialNumber2.default({
										issuer: certificate.issuer,
										serialNumber: certificate.serialNumber
									})
								})
								// "encryptedKey" will be calculated in "encrypt" function
							});
							//endregion
	
							//region keyEncryptionAlgorithm
							var aesKWoid = (0, _common.getOIDByAlgorithm)({
								name: "AES-KW",
								length: encryptionParameters.kekEncryptionLength
							});
							if (aesKWoid === "") throw new Error("Unknown length for key encryption algorithm: " + encryptionParameters.kekEncryptionLength);
	
							var aesKW = new _AlgorithmIdentifier2.default({
								algorithmId: aesKWoid,
								algorithmParams: new asn1js.Null()
							});
							//endregion
	
							//region KeyAgreeRecipientInfo
							var ecdhOID = (0, _common.getOIDByAlgorithm)({
								name: "ECDH",
								kdf: encryptionParameters.kdfAlgorithm
							});
							if (ecdhOID === "") throw new Error("Unknown KDF algorithm: " + encryptionParameters.kdfAlgorithm);
	
							// In fact there is no need in so long UKM, but RFC2631
							// has requirement that "UserKeyMaterial" must be 512 bits long
							var ukmBuffer = new ArrayBuffer(64);
							var ukmView = new Uint8Array(ukmBuffer);
							(0, _common.getRandomValues)(ukmView); // Generate random values in 64 bytes long buffer
	
							var _keyInfo = new _KeyAgreeRecipientInfo2.default({
								version: 3,
								// "originator" will be calculated in "encrypt" function because ephemeral key would be generated there
								ukm: new asn1js.OctetString({ valueHex: ukmBuffer }),
								keyEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: ecdhOID,
									algorithmParams: aesKW.toSchema()
								}),
								recipientEncryptedKeys: new _RecipientEncryptedKeys2.default({
									encryptedKeys: [encryptedKey]
								}),
								recipientCertificate: certificate
							});
							//endregion
	
							//region Final values for "CMS_ENVELOPED_DATA"
							this.recipientInfos.push(new _RecipientInfo2.default({
								variant: 2,
								value: _keyInfo
							}));
							//endregion
						}
						break;
					default:
						throw new Error("Unknown \"variant\" value: " + variant);
				}
				//endregion 
	
				return true;
			}
	
			//**********************************************************************************
			/**
	   * Add recipient based on pre-defined data like password or KEK
	   * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data
	   * @param {Object} parameters Additional parameters neccessary for "fine tunning" of encryption process
	   * @param {number} variant Variant = 1 for pre-defined "key encryption key" (KEK). Variant = 2 for password-based encryption.
	   */
	
		}, {
			key: "addRecipientByPreDefinedData",
			value: function addRecipientByPreDefinedData(preDefinedData, parameters, variant) {
				//region Initial variables
				var encryptionParameters = parameters || {};
				//endregion
	
				//region Check initial parameters
				if (preDefinedData instanceof ArrayBuffer === false) throw new Error("Please pass \"preDefinedData\" in ArrayBuffer type");
	
				if (preDefinedData.byteLength === 0) throw new Error("Pre-defined data could have zero length");
				//endregion
	
				//region Initialize encryption parameters
				if ("keyIdentifier" in encryptionParameters === false) {
					var keyIdentifierBuffer = new ArrayBuffer(16);
					var keyIdentifierView = new Uint8Array(keyIdentifierBuffer);
					(0, _common.getRandomValues)(keyIdentifierView);
	
					encryptionParameters.keyIdentifier = keyIdentifierBuffer;
				}
	
				if ("hmacHashAlgorithm" in encryptionParameters === false) encryptionParameters.hmacHashAlgorithm = "SHA-512";
	
				if ("iterationCount" in encryptionParameters === false) encryptionParameters.iterationCount = 2048;
	
				if ("keyEncryptionAlgorithm" in encryptionParameters === false) {
					encryptionParameters.keyEncryptionAlgorithm = {
						name: "AES-KW",
						length: 256
					};
				}
	
				if ("keyEncryptionAlgorithmParams" in encryptionParameters === false) encryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();
				//endregion
	
				//region Add new recipient based on passed variant
				switch (variant) {
					case 1:
						// KEKRecipientInfo
						{
							//region keyEncryptionAlgorithm
							var kekOID = (0, _common.getOIDByAlgorithm)(encryptionParameters.keyEncryptionAlgorithm);
							if (kekOID === "") throw new Error("Incorrect value for \"keyEncryptionAlgorithm\"");
							//endregion
	
							//region KEKRecipientInfo
							var keyInfo = new _KEKRecipientInfo2.default({
								version: 4,
								kekid: new _KEKIdentifier2.default({
									keyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })
								}),
								keyEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: kekOID,
									/*
	         For AES-KW params are NULL, but for other algorithm could another situation.
	         */
									algorithmParams: encryptionParameters.keyEncryptionAlgorithmParams
								}),
								preDefinedKEK: preDefinedData
								// "encryptedKey" would be set in "ecrypt" function
							});
							//endregion
	
							//region Final values for "CMS_ENVELOPED_DATA"
							this.recipientInfos.push(new _RecipientInfo2.default({
								variant: 3,
								value: keyInfo
							}));
							//endregion
						}
						break;
					case 2:
						// PasswordRecipientinfo
						{
							//region keyDerivationAlgorithm
							var pbkdf2OID = (0, _common.getOIDByAlgorithm)({
								name: "PBKDF2"
							});
							if (pbkdf2OID === "") throw new Error("Can not find OID for PBKDF2");
							//endregion
	
							//region Salt
							var saltBuffer = new ArrayBuffer(64);
							var saltView = new Uint8Array(saltBuffer);
							(0, _common.getRandomValues)(saltView);
							//endregion
	
							//region HMAC-based algorithm
							var hmacOID = (0, _common.getOIDByAlgorithm)({
								name: "HMAC",
								hash: {
									name: encryptionParameters.hmacHashAlgorithm
								}
							});
							if (hmacOID === "") throw new Error("Incorrect value for \"hmacHashAlgorithm\": " + encryptionParameters.hmacHashAlgorithm);
							//endregion
	
							//region PBKDF2-params
							var pbkdf2Params = new _PBKDF2Params2.default({
								salt: new asn1js.OctetString({ valueHex: saltBuffer }),
								iterationCount: encryptionParameters.iterationCount,
								prf: new _AlgorithmIdentifier2.default({
									algorithmId: hmacOID,
									algorithmParams: new asn1js.Null()
								})
							});
							//endregion
	
							//region keyEncryptionAlgorithm
							var _kekOID = (0, _common.getOIDByAlgorithm)(encryptionParameters.keyEncryptionAlgorithm);
							if (_kekOID === "") throw new Error("Incorrect value for \"keyEncryptionAlgorithm\"");
							//endregion
	
							//region PasswordRecipientinfo
							var _keyInfo2 = new _PasswordRecipientinfo2.default({
								version: 0,
								keyDerivationAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: pbkdf2OID,
									algorithmParams: pbkdf2Params.toSchema()
								}),
								keyEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
									algorithmId: _kekOID,
									/*
	         For AES-KW params are NULL, but for other algorithm could be another situation.
	         */
									algorithmParams: encryptionParameters.keyEncryptionAlgorithmParams
								}),
								password: preDefinedData
								// "encryptedKey" would be set in "ecrypt" function
							});
							//endregion
	
							//region Final values for "CMS_ENVELOPED_DATA"
							this.recipientInfos.push(new _RecipientInfo2.default({
								variant: 4,
								value: _keyInfo2
							}));
							//endregion
						}
						break;
					default:
						throw new Error("Unknown value for \"variant\": " + variant);
				}
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Create a new CMS Enveloped Data content with encrypted data
	   * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only "AES-CBC" or "AES-GCM" algorithms.
	   * @param {ArrayBuffer} contentToEncrypt Content to encrypt
	   * @returns {Promise}
	   */
	
		}, {
			key: "encrypt",
			value: function encrypt(contentEncryptionAlgorithm, contentToEncrypt) {
				var _this2 = this;
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long
				var ivView = new Uint8Array(ivBuffer);
				(0, _common.getRandomValues)(ivView);
	
				var contentView = new Uint8Array(contentToEncrypt);
	
				var sessionKey = void 0;
				var encryptedContent = void 0;
				var exportedSessionKey = void 0;
	
				var recipientsPromises = [];
	
				var _this = this;
				//endregion
	
				//region Check for input parameters
				var contentEncryptionOID = (0, _common.getOIDByAlgorithm)(contentEncryptionAlgorithm);
				if (contentEncryptionOID === "") return Promise.reject("Wrong \"contentEncryptionAlgorithm\" value");
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Generate new content encryption key
				sequence = sequence.then(function () {
					return crypto.generateKey(contentEncryptionAlgorithm, true, ["encrypt"]);
				});
				//endregion
				//region Encrypt content
				sequence = sequence.then(function (result) {
					sessionKey = result;
	
					return crypto.encrypt({
						name: contentEncryptionAlgorithm.name,
						iv: ivView
					}, sessionKey, contentView);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
				//region Export raw content of content encryption key
				sequence = sequence.then(function (result) {
					//region Create output OCTETSTRING with encrypted content
					encryptedContent = result;
					//endregion
	
					return crypto.exportKey("raw", sessionKey);
				}, function (error) {
					return Promise.reject(error);
				}).then(function (result) {
					exportedSessionKey = result;
	
					return true;
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
				//region Append common information to CMS_ENVELOPED_DATA
				sequence = sequence.then(function () {
					_this2.version = 2;
					_this2.encryptedContentInfo = new _EncryptedContentInfo2.default({
						contentType: "1.2.840.113549.1.7.1", // "data"
						contentEncryptionAlgorithm: new _AlgorithmIdentifier2.default({
							algorithmId: contentEncryptionOID,
							algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })
						}),
						encryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })
					});
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Special sub-functions to work with each recipient's type
				function SubKeyAgreeRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
	
					var ecdhPublicKey = void 0;
					var ecdhPrivateKey = void 0;
	
					var recipientCurve = void 0;
					var recipientCurveLength = void 0;
	
					var exportedECDHPublicKey = void 0;
					//endregion
	
					//region Get "namedCurve" parameter from recipient's certificate
					currentSequence = currentSequence.then(function () {
						var curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
	
						if (curveObject instanceof asn1js.ObjectIdentifier === false) return Promise.reject("Incorrect \"recipientCertificate\" for index " + index);
	
						var curveOID = curveObject.valueBlock.toString();
	
						switch (curveOID) {
							case "1.2.840.10045.3.1.7":
								recipientCurve = "P-256";
								recipientCurveLength = 256;
								break;
							case "1.3.132.0.34":
								recipientCurve = "P-384";
								recipientCurveLength = 384;
								break;
							case "1.3.132.0.35":
								recipientCurve = "P-521";
								recipientCurveLength = 528;
								break;
							default:
								return Promise.reject("Incorrect curve OID for index " + index);
						}
	
						return recipientCurve;
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Generate ephemeral ECDH key
					currentSequence = currentSequence.then(function (result) {
						return crypto.generateKey({
							name: "ECDH",
							namedCurve: result
						}, true, ["deriveBits"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Export public key of ephemeral ECDH key pair
					currentSequence = currentSequence.then(function (result) {
						ecdhPublicKey = result.publicKey;
						ecdhPrivateKey = result.privateKey;
	
						return crypto.exportKey("spki", ecdhPublicKey);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Import recipient's public key
					currentSequence = currentSequence.then(function (result) {
						exportedECDHPublicKey = result;
	
						return _this.recipientInfos[index].value.recipientCertificate.getPublicKey({
							algorithm: {
								algorithm: {
									name: "ECDH",
									namedCurve: recipientCurve
								},
								usages: []
							}
						});
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Create shared secret
					currentSequence = currentSequence.then(function (result) {
						return crypto.deriveBits({
							name: "ECDH",
							public: result
						}, ecdhPrivateKey, recipientCurveLength);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Apply KDF function to shared secret
					currentSequence = currentSequence.then(function (result) {
						//region Get length of used AES-KW algorithm
						var aesKWAlgorithm = new _AlgorithmIdentifier2.default({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });
	
						var KWalgorithm = (0, _common.getAlgorithmByOID)(aesKWAlgorithm.algorithmId);
						if ("name" in KWalgorithm === false) return Promise.reject("Incorrect OID for key encryption algorithm: " + aesKWAlgorithm.algorithmId);
						//endregion
	
						//region Translate AES-KW length to ArrayBuffer
						var kwLength = KWalgorithm.length;
	
						var kwLengthBuffer = new ArrayBuffer(4);
						var kwLengthView = new Uint8Array(kwLengthBuffer);
	
						for (var j = 3; j >= 0; j--) {
							kwLengthView[j] = kwLength;
							kwLength >>= 8;
						}
						//endregion
	
						//region Create and encode "ECC-CMS-SharedInfo" structure
						var eccInfo = new _ECCCMSSharedInfo2.default({
							keyInfo: new _AlgorithmIdentifier2.default({
								algorithmId: aesKWAlgorithm.algorithmId,
								/*
	        Initially RFC5753 says that AES algorithms have absent parameters.
	        But since early implementations all put NULL here. Thus, in order to be
	        "backward compatible", index also put NULL here.
	        */
								algorithmParams: new asn1js.Null()
							}),
							entityUInfo: _this.recipientInfos[index].value.ukm,
							suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })
						});
	
						var encodedInfo = eccInfo.toSchema().toBER(false);
						//endregion
	
						//region Get SHA algorithm used together with ECDH
						var ecdhAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in ecdhAlgorithm === false) return Promise.reject("Incorrect OID for key encryption algorithm: " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						return (0, _common.kdf)(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Import AES-KW key from result of KDF function
					currentSequence = currentSequence.then(function (result) {
						return crypto.importKey("raw", result, { name: "AES-KW" }, true, ["wrapKey"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Finally wrap session key by using AES-KW algorithm
					currentSequence = currentSequence.then(function (result) {
						return crypto.wrapKey("raw", sessionKey, result, { name: "AES-KW" });
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Append all neccessary data to current CMS_RECIPIENT_INFO object
					currentSequence = currentSequence.then(function (result) {
						//region OriginatorIdentifierOrKey
						var asn1 = asn1js.fromBER(exportedECDHPublicKey);
	
						var originator = new _OriginatorIdentifierOrKey2.default();
						originator.variant = 3;
						originator.value = new _OriginatorPublicKey2.default({ schema: asn1.result });
						// There is option when we can stay with ECParameters, but here index prefer to avoid the params
						if ("algorithmParams" in originator.value.algorithm) delete originator.value.algorithm.algorithmParams;
	
						_this.recipientInfos[index].value.originator = originator;
						//endregion
	
						//region RecipientEncryptedKey
						/*
	      We will not support using of same ephemeral key for many recipients
	      */
						_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });
						//endregion
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubKeyTransRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					//endregion
	
					//region Get recipient's public key
					currentSequence = currentSequence.then(function () {
						//region Get current used SHA algorithm
						var schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;
						var rsaOAEPParams = new _RSAESOAEPParams2.default({ schema: schema });
	
						var hashAlgorithm = (0, _common.getAlgorithmByOID)(rsaOAEPParams.hashAlgorithm.algorithmId);
						if ("name" in hashAlgorithm === false) return Promise.reject("Incorrect OID for hash algorithm: " + rsaOAEPParams.hashAlgorithm.algorithmId);
						//endregion
	
						return _this.recipientInfos[index].value.recipientCertificate.getPublicKey({
							algorithm: {
								algorithm: {
									name: "RSA-OAEP",
									hash: {
										name: hashAlgorithm.name
									}
								},
								usages: ["encrypt", "wrapKey"]
							}
						});
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Encrypt early exported session key on recipient's public key
					currentSequence = currentSequence.then(function (result) {
						return crypto.encrypt(result.algorithm, result, exportedSessionKey);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Append all neccessary data to current CMS_RECIPIENT_INFO object
					currentSequence = currentSequence.then(function (result) {
						//region RecipientEncryptedKey
						_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });
						//endregion
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubKEKRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					var kekAlgorithm = void 0;
					//endregion
	
					//region Import KEK from pre-defined data
					currentSequence = currentSequence.then(function () {
						//region Get WebCrypto form of "keyEncryptionAlgorithm"
						kekAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in kekAlgorithm === false) return Promise.reject("Incorrect OID for \"keyEncryptionAlgorithm\": " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.importKey("raw", new Uint8Array(_this.recipientInfos[index].value.preDefinedKEK), kekAlgorithm, true, ["wrapKey"]); // Too specific for AES-KW
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Wrap previously exported session key
					currentSequence = currentSequence.then(function (result) {
						return crypto.wrapKey("raw", sessionKey, result, kekAlgorithm);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Append all neccessary data to current CMS_RECIPIENT_INFO object
					currentSequence = currentSequence.then(function (result) {
						//region RecipientEncryptedKey
						_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });
						//endregion
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubPasswordRecipientinfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					var pbkdf2Params = void 0;
					var kekAlgorithm = void 0;
					//endregion
	
					//region Check that we have encoded "keyDerivationAlgorithm" plus "PBKDF2_params" in there
					currentSequence = currentSequence.then(function () {
						if ("keyDerivationAlgorithm" in _this.recipientInfos[index].value === false) return Promise.reject("Please append encoded \"keyDerivationAlgorithm\"");
	
						if ("algorithmParams" in _this.recipientInfos[index].value.keyDerivationAlgorithm === false) return Promise.reject("Incorrectly encoded \"keyDerivationAlgorithm\"");
	
						try {
							pbkdf2Params = new _PBKDF2Params2.default({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject("Incorrectly encoded \"keyDerivationAlgorithm\"");
						}
	
						return Promise.resolve();
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Derive PBKDF2 key from "password" buffer
					currentSequence = currentSequence.then(function () {
						var passwordView = new Uint8Array(_this.recipientInfos[index].value.password);
	
						return crypto.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Derive key for "keyEncryptionAlgorithm"
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of "keyEncryptionAlgorithm"
						kekAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in kekAlgorithm === false) return Promise.reject("Incorrect OID for \"keyEncryptionAlgorithm\": " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						//region Get HMAC hash algorithm
						var hmacHashAlgorithm = "SHA-1";
	
						if ("prf" in pbkdf2Params) {
							var algorithm = (0, _common.getAlgorithmByOID)(pbkdf2Params.prf.algorithmId);
							if ("name" in algorithm === false) return Promise.reject("Incorrect OID for HMAC hash algorithm");
	
							hmacHashAlgorithm = algorithm.hash.name;
						}
						//endregion
	
						//region Get PBKDF2 "salt" value
						var saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
						//endregion
	
						//region Get PBKDF2 iterations count
						var iterations = pbkdf2Params.iterationCount;
						//endregion
	
						return crypto.deriveKey({
							name: "PBKDF2",
							hash: {
								name: hmacHashAlgorithm
							},
							salt: saltView,
							iterations: iterations
						}, result, kekAlgorithm, true, ["wrapKey"]); // Usages are too specific for KEK algorithm
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Wrap previously exported session key (Also too specific for KEK algorithm)
					currentSequence = currentSequence.then(function (result) {
						return crypto.wrapKey("raw", sessionKey, result, kekAlgorithm);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Append all neccessary data to current CMS_RECIPIENT_INFO object
					currentSequence = currentSequence.then(function (result) {
						//region RecipientEncryptedKey
						_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });
						//endregion
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				//endregion
	
				//region Create special routines for each "recipient"
				sequence = sequence.then(function () {
					for (var i = 0; i < _this2.recipientInfos.length; i++) {
						//region Initial variables
						var currentSequence = Promise.resolve();
						//endregion
	
						switch (_this2.recipientInfos[i].variant) {
							case 1:
								// KeyTransRecipientInfo
								currentSequence = SubKeyTransRecipientInfo(i);
								break;
							case 2:
								// KeyAgreeRecipientInfo
								currentSequence = SubKeyAgreeRecipientInfo(i);
								break;
							case 3:
								// KEKRecipientInfo
								currentSequence = SubKEKRecipientInfo(i);
								break;
							case 4:
								// PasswordRecipientinfo
								currentSequence = SubPasswordRecipientinfo(i);
								break;
							default:
								return Promise.reject("Uknown recipient type in array with index " + i);
						}
	
						recipientsPromises.push(currentSequence);
					}
	
					return Promise.all(recipientsPromises);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
			/**
	   * Decrypt existing CMS Enveloped Data content
	   * @param {number} recipientIndex Index of recipient
	   * @param {Object} parameters Additional parameters
	   * @returns {Promise}
	   */
	
		}, {
			key: "decrypt",
			value: function decrypt(recipientIndex, parameters) {
				var _this3 = this;
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var decryptionParameters = parameters || {};
	
				var _this = this;
				//endregion
	
				//region Check for input parameters
				if (recipientIndex + 1 > this.recipientInfos.length) return Promise.reject("Maximum value for \"index\" is: " + (this.recipientInfos.length - 1));
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Special sub-functions to work with each recipient's type
				function SubKeyAgreeRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
	
					var recipientCurve = void 0;
					var recipientCurveLength = void 0;
	
					var curveOID = void 0;
	
					var ecdhPrivateKey = void 0;
					//endregion
	
					//region Get "namedCurve" parameter from recipient's certificate
					currentSequence = currentSequence.then(function () {
						if ("recipientCertificate" in decryptionParameters === false) return Promise.reject("Parameter \"recipientCertificate\" is mandatory for \"KeyAgreeRecipientInfo\"");
	
						if ("recipientPrivateKey" in decryptionParameters === false) return Promise.reject("Parameter \"recipientPrivateKey\" is mandatory for \"KeyAgreeRecipientInfo\"");
	
						var curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
	
						if (curveObject instanceof asn1js.ObjectIdentifier === false) return Promise.reject("Incorrect \"recipientCertificate\" for index " + index);
	
						curveOID = curveObject.valueBlock.toString();
	
						switch (curveOID) {
							case "1.2.840.10045.3.1.7":
								recipientCurve = "P-256";
								recipientCurveLength = 256;
								break;
							case "1.3.132.0.34":
								recipientCurve = "P-384";
								recipientCurveLength = 384;
								break;
							case "1.3.132.0.35":
								recipientCurve = "P-521";
								recipientCurveLength = 528;
								break;
							default:
								return Promise.reject("Incorrect curve OID for index " + index);
						}
	
						return crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, {
							name: "ECDH",
							namedCurve: recipientCurve
						}, true, ["deriveBits"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Import sender's ephemeral public key
					currentSequence = currentSequence.then(function (result) {
						ecdhPrivateKey = result;
	
						//region Change "OriginatorPublicKey" if "curve" parameter absent
						if ("algorithmParams" in _this.recipientInfos[index].value.originator.value.algorithm === false) _this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });
						//endregion
	
						//region Create ArrayBuffer with sender's public key
						var buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);
						//endregion
	
						return crypto.importKey("spki", buffer, {
							name: "ECDH",
							namedCurve: recipientCurve
						}, true, []);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Create shared secret
					currentSequence = currentSequence.then(function (result) {
						return crypto.deriveBits({
							name: "ECDH",
							public: result
						}, ecdhPrivateKey, recipientCurveLength);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Apply KDF function to shared secret
					currentSequence = currentSequence.then(function (result) {
						//region Get length of used AES-KW algorithm
						var aesKWAlgorithm = new _AlgorithmIdentifier2.default({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });
	
						var KWalgorithm = (0, _common.getAlgorithmByOID)(aesKWAlgorithm.algorithmId);
						if ("name" in KWalgorithm === false) return Promise.reject("Incorrect OID for key encryption algorithm: " + aesKWAlgorithm.algorithmId);
						//endregion
	
						//region Translate AES-KW length to ArrayBuffer
						var kwLength = KWalgorithm.length;
	
						var kwLengthBuffer = new ArrayBuffer(4);
						var kwLengthView = new Uint8Array(kwLengthBuffer);
	
						for (var j = 3; j >= 0; j--) {
							kwLengthView[j] = kwLength;
							kwLength >>= 8;
						}
						//endregion
	
						//region Create and encode "ECC-CMS-SharedInfo" structure
						var eccInfo = new _ECCCMSSharedInfo2.default({
							keyInfo: new _AlgorithmIdentifier2.default({
								algorithmId: aesKWAlgorithm.algorithmId,
								/*
	        Initially RFC5753 says that AES algorithms have absent parameters.
	        But since early implementations all put NULL here. Thus, in order to be
	        "backward compatible", index also put NULL here.
	        */
								algorithmParams: new asn1js.Null()
							}),
							entityUInfo: _this.recipientInfos[index].value.ukm,
							suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })
						});
	
						var encodedInfo = eccInfo.toSchema().toBER(false);
						//endregion
	
						//region Get SHA algorithm used together with ECDH
						var ecdhAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in ecdhAlgorithm === false) return Promise.reject("Incorrect OID for key encryption algorithm: " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						return (0, _common.kdf)(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Import AES-KW key from result of KDF function
					currentSequence = currentSequence.then(function (result) {
						return crypto.importKey("raw", result, { name: "AES-KW" }, true, ["unwrapKey"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Finally unwrap session key
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of content encryption algorithm
						var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect \"contentEncryptionAlgorithm\": " + _this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.unwrapKey("raw", _this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex, result, { name: "AES-KW" }, contentEncryptionAlgorithm, true, ["decrypt"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubKeyTransRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					//endregion
	
					//region Import recipient's private key
					currentSequence = currentSequence.then(function () {
						if ("recipientPrivateKey" in decryptionParameters === false) return Promise.reject("Parameter \"recipientPrivateKey\" is mandatory for \"KeyTransRecipientInfo\"");
	
						//region Get current used SHA algorithm
						var schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;
						var rsaOAEPParams = new _RSAESOAEPParams2.default({ schema: schema });
	
						var hashAlgorithm = (0, _common.getAlgorithmByOID)(rsaOAEPParams.hashAlgorithm.algorithmId);
						if ("name" in hashAlgorithm === false) return Promise.reject("Incorrect OID for hash algorithm: " + rsaOAEPParams.hashAlgorithm.algorithmId);
						//endregion
	
						return crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, {
							name: "RSA-OAEP",
							hash: {
								name: hashAlgorithm.name
							}
						}, true, ["decrypt"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Decrypt encrypted session key
					currentSequence = currentSequence.then(function (result) {
						return crypto.decrypt(result.algorithm, result, _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Import decrypted session key
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of content encryption algorithm
						var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect \"contentEncryptionAlgorithm\": " + _this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.importKey("raw", result, contentEncryptionAlgorithm, true, ["decrypt"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubKEKRecipientInfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					var kekAlgorithm = void 0;
					//endregion
	
					//region Import KEK from pre-defined data
					currentSequence = currentSequence.then(function () {
						if ("preDefinedData" in decryptionParameters === false) return Promise.reject("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
	
						//region Get WebCrypto form of "keyEncryptionAlgorithm"
						kekAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in kekAlgorithm === false) return Promise.reject("Incorrect OID for \"keyEncryptionAlgorithm\": " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.importKey("raw", decryptionParameters.preDefinedData, kekAlgorithm, true, ["unwrapKey"]); // Too specific for AES-KW
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Unwrap previously exported session key
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of content encryption algorithm
						var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect \"contentEncryptionAlgorithm\": " + _this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.unwrapKey("raw", _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex, result, kekAlgorithm, contentEncryptionAlgorithm, true, ["decrypt"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				function SubPasswordRecipientinfo(index) {
					//region Initial variables
					var currentSequence = Promise.resolve();
					var pbkdf2Params = void 0;
					var kekAlgorithm = void 0;
					//endregion
	
					//region Derive PBKDF2 key from "password" buffer
					currentSequence = currentSequence.then(function () {
						if ("preDefinedData" in decryptionParameters === false) return Promise.reject("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
	
						if ("keyDerivationAlgorithm" in _this.recipientInfos[index].value === false) return Promise.reject("Please append encoded \"keyDerivationAlgorithm\"");
	
						if ("algorithmParams" in _this.recipientInfos[index].value.keyDerivationAlgorithm === false) return Promise.reject("Incorrectly encoded \"keyDerivationAlgorithm\"");
	
						try {
							pbkdf2Params = new _PBKDF2Params2.default({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject("Incorrectly encoded \"keyDerivationAlgorithm\"");
						}
	
						return crypto.importKey("raw", decryptionParameters.preDefinedData, "PBKDF2", false, ["deriveKey"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Derive key for "keyEncryptionAlgorithm"
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of "keyEncryptionAlgorithm"
						kekAlgorithm = (0, _common.getAlgorithmByOID)(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						if ("name" in kekAlgorithm === false) return Promise.reject("Incorrect OID for \"keyEncryptionAlgorithm\": " + _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);
						//endregion
	
						//region Get HMAC hash algorithm
						var hmacHashAlgorithm = "SHA-1";
	
						if ("prf" in pbkdf2Params) {
							var algorithm = (0, _common.getAlgorithmByOID)(pbkdf2Params.prf.algorithmId);
							if ("name" in algorithm === false) return Promise.reject("Incorrect OID for HMAC hash algorithm");
	
							hmacHashAlgorithm = algorithm.hash.name;
						}
						//endregion
	
						//region Get PBKDF2 "salt" value
						var saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
						//endregion
	
						//region Get PBKDF2 iterations count
						var iterations = pbkdf2Params.iterationCount;
						//endregion
	
						return crypto.deriveKey({
							name: "PBKDF2",
							hash: {
								name: hmacHashAlgorithm
							},
							salt: saltView,
							iterations: iterations
						}, result, kekAlgorithm, true, ["unwrapKey"]); // Usages are too specific for KEK algorithm
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
					//region Unwrap previously exported session key
					currentSequence = currentSequence.then(function (result) {
						//region Get WebCrypto form of content encryption algorithm
						var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect \"contentEncryptionAlgorithm\": " + _this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
						//endregion
	
						return crypto.unwrapKey("raw", _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex, result, kekAlgorithm, contentEncryptionAlgorithm, true, ["decrypt"]);
					}, function (error) {
						return Promise.reject(error);
					});
					//endregion
	
					return currentSequence;
				}
	
				//endregion
	
				//region Perform steps, specific to each type of session key encryption
				sequence = sequence.then(function () {
					//region Initial variables
					var currentSequence = Promise.resolve();
					//endregion
	
					switch (_this3.recipientInfos[recipientIndex].variant) {
						case 1:
							// KeyTransRecipientInfo
							currentSequence = SubKeyTransRecipientInfo(recipientIndex);
							break;
						case 2:
							// KeyAgreeRecipientInfo
							currentSequence = SubKeyAgreeRecipientInfo(recipientIndex);
							break;
						case 3:
							// KEKRecipientInfo
							currentSequence = SubKEKRecipientInfo(recipientIndex);
							break;
						case 4:
							// PasswordRecipientinfo
							currentSequence = SubPasswordRecipientinfo(recipientIndex);
							break;
						default:
							return Promise.reject("Uknown recipient type in array with index " + recipientIndex);
					}
	
					return currentSequence;
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Finally decrypt data by session key
				sequence = sequence.then(function (result) {
					//region Get WebCrypto form of content encryption algorithm
					var contentEncryptionAlgorithm = (0, _common.getAlgorithmByOID)(_this3.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
					if ("name" in contentEncryptionAlgorithm === false) return Promise.reject("Incorrect \"contentEncryptionAlgorithm\": " + _this3.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);
					//endregion
	
					//region Get "intialization vector" for content encryption algorithm
					var ivBuffer = _this3.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;
					var ivView = new Uint8Array(ivBuffer);
					//endregion
	
					//region Create correct data block for decryption
					var dataBuffer = new ArrayBuffer(0);
	
					if (_this3.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = _this3.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {
						var _iteratorNormalCompletion = true;
						var _didIteratorError = false;
						var _iteratorError = undefined;
	
						try {
							for (var _iterator = _this3.encryptedContentInfo.encryptedContent.valueBlock.value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var content = _step.value;
	
								dataBuffer = (0, _pvutils.utilConcatBuf)(dataBuffer, content.valueBlock.valueHex);
							}
						} catch (err) {
							_didIteratorError = true;
							_iteratorError = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion && _iterator.return) {
									_iterator.return();
								}
							} finally {
								if (_didIteratorError) {
									throw _iteratorError;
								}
							}
						}
					}
					//endregion
	
					return crypto.decrypt({
						name: contentEncryptionAlgorithm.name,
						iv: ivView
					}, result, dataBuffer);
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "originatorInfo":
						return new _OriginatorInfo2.default();
					case "recipientInfos":
						return [];
					case "encryptedContentInfo":
						return new _EncryptedContentInfo2.default();
					case "unprotectedAttrs":
						return [];
					default:
						throw new Error("Invalid member name for EnvelopedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === EnvelopedData.defaultValues(memberName);
					case "originatorInfo":
						return memberValue.certs.certificates.length === 0 && memberValue.crls.crls.length === 0;
					case "recipientInfos":
					case "unprotectedAttrs":
						return memberValue.length === 0;
					case "encryptedContentInfo":
						return _EncryptedContentInfo2.default.compareWithDefault("contentType", memberValue.contentType) && _EncryptedContentInfo2.default.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && _EncryptedContentInfo2.default.compareWithDefault("encryptedContent", memberValue.encryptedContent);
					default:
						throw new Error("Invalid member name for EnvelopedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//EnvelopedData ::= SEQUENCE {
				//    version CMSVersion,
				//    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
				//    recipientInfos RecipientInfos,
				//    encryptedContentInfo EncryptedContentInfo,
				//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [originatorInfo]
	    * @property {string} [recipientInfos]
	    * @property {string} [encryptedContentInfo]
	    * @property {string} [unprotectedAttrs]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), new asn1js.Constructed({
						name: names.originatorInfo || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: _OriginatorInfo2.default.schema().valueBlock.value
					}), new asn1js.Set({
						value: [new asn1js.Repeated({
							name: names.recipientInfos || "",
							value: _RecipientInfo2.default.schema()
						})]
					}), _EncryptedContentInfo2.default.schema(names.encryptedContentInfo || {}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Repeated({
							name: names.unprotectedAttrs || "",
							value: _Attribute2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return EnvelopedData;
	}();
	//**************************************************************************************
	
	
	exports.default = EnvelopedData;
	//# sourceMappingURL=EnvelopedData.js.map

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _CertificateSet = __webpack_require__(434);
	
	var _CertificateSet2 = _interopRequireDefault(_CertificateSet);
	
	var _RevocationInfoChoices = __webpack_require__(435);
	
	var _RevocationInfoChoices2 = _interopRequireDefault(_RevocationInfoChoices);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OriginatorInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for OriginatorInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OriginatorInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OriginatorInfo);
	
			//region Internal properties of the object
			/**
	   * @type {CertificateSet}
	   * @description certs
	   */
			this.certs = (0, _pvutils.getParametersValue)(parameters, "certs", OriginatorInfo.defaultValues("certs"));
			/**
	   * @type {RevocationInfoChoices}
	   * @description crls
	   */
			this.crls = (0, _pvutils.getParametersValue)(parameters, "crls", OriginatorInfo.defaultValues("crls"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OriginatorInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({
					names: {
						certs: "certs",
						crls: "crls"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OriginatorInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				asn1.result.certs.idBlock.tagClass = 1; // UNIVERSAL
				asn1.result.certs.idBlock.tagNumber = 17; // SET
	
				this.certs = new _CertificateSet2.default({ schema: asn1.result.certs });
	
				asn1.result.crls.idBlock.tagClass = 1; // UNIVERSAL
				asn1.result.crls.idBlock.tagNumber = 17; // SET
	
				this.crls = new _RevocationInfoChoices2.default({ schema: asn1.result.crls });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: this.certs.toSchema().valueBlock.value
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: this.crls.toSchema().valueBlock.value
					})]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					certs: this.certs.toJSON(),
					crls: this.crls.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "certs":
						return new _CertificateSet2.default();
					case "crls":
						return new _RevocationInfoChoices2.default();
					default:
						throw new Error("Invalid member name for OriginatorInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "certs":
						return memberValue.certificates.length === 0;
					case "crls":
						return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;
					default:
						throw new Error("Invalid member name for OriginatorInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OriginatorInfo ::= SEQUENCE {
				//    certs [0] IMPLICIT CertificateSet OPTIONAL,
				//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [certs]
	    * @property {string} [crls]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						name: names.certs || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: _CertificateSet2.default.schema().valueBlock.value
					}), new asn1js.Constructed({
						name: names.crls || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: _RevocationInfoChoices2.default.schema().valueBlock.value
					})]
				});
			}
		}]);
	
		return OriginatorInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = OriginatorInfo;
	//# sourceMappingURL=OriginatorInfo.js.map

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var CertificateSet = function () {
		//**********************************************************************************
		/**
	  * Constructor for CertificateSet class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertificateSet() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertificateSet);
	
			//region Internal properties of the object
			/**
	   * @type {Array}
	   * @description certificates
	   */
			this.certificates = (0, _pvutils.getParametersValue)(parameters, "certificates", CertificateSet.defaultValues("certificates"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertificateSet, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_CERTIFICATE_SET");
				//endregion
	
				//region Get internal properties from parsed schema
				this.certificates = Array.from(asn1.result.certificates, function (element) {
					if (element.idBlock.tagClass === 1) return new _Certificate2.default({ schema: element });
	
					return element;
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Set({
					value: Array.from(this.certificates, function (element) {
						if (element instanceof _Certificate2.default) return element.toSchema();
	
						return element;
					})
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					certificates: Array.from(this.certificates, function (element) {
						return element.toJSON();
					})
				};
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "certificates":
						return [];
					default:
						throw new Error("Invalid member name for Attribute class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CertificateSet ::= SET OF CertificateChoices
				//
				//CertificateChoices ::= CHOICE {
				//    certificate Certificate,
				//    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete
				//    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete
				//    v2AttrCert [2] IMPLICIT AttributeCertificateV2,
				//    other [3] IMPLICIT OtherCertificateFormat }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Set({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.certificates || "",
						value: new asn1js.Choice({
							value: [_Certificate2.default.schema(), new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: [new asn1js.Any()]
							}), // JUST A STUB
							new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 2 // [2]
								},
								value: [new asn1js.Any()]
							}), // JUST A STUB
							new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 3 // [3]
								},
								value: [new asn1js.ObjectIdentifier(), new asn1js.Any()]
							})]
						})
					})]
				}); // TODO: add definition for "AttributeCertificateV2"
			}
		}]);
	
		return CertificateSet;
	}();
	//**************************************************************************************
	
	
	exports.default = CertificateSet;
	//# sourceMappingURL=CertificateSet.js.map

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _CertificateRevocationList = __webpack_require__(429);
	
	var _CertificateRevocationList2 = _interopRequireDefault(_CertificateRevocationList);
	
	var _OtherRevocationInfoFormat = __webpack_require__(436);
	
	var _OtherRevocationInfoFormat2 = _interopRequireDefault(_OtherRevocationInfoFormat);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RevocationInfoChoices = function () {
		//**********************************************************************************
		/**
	  * Constructor for RevocationInfoChoices class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RevocationInfoChoices() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RevocationInfoChoices);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<CertificateRevocationList>}
	   * @description crls
	   */
			this.crls = (0, _pvutils.getParametersValue)(parameters, "crls", RevocationInfoChoices.defaultValues("crls"));
			/**
	   * @type {Array.<OtherRevocationInfoFormat>}
	   * @description otherRevocationInfos
	   */
			this.otherRevocationInfos = (0, _pvutils.getParametersValue)(parameters, "otherRevocationInfos", RevocationInfoChoices.defaultValues("otherRevocationInfos"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RevocationInfoChoices, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({
					names: {
						crls: "crls"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CSM_REVOCATION_INFO_CHOICES");
				//endregion
	
				//region Get internal properties from parsed schema
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = asn1.result.crls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var element = _step.value;
	
						if (element.idBlock.tagClass === 1) this.crls.push(new _CertificateRevocationList2.default({ schema: element }));else this.otherRevocationInfos.push(new _OtherRevocationInfoFormat2.default({ schema: element }));
					}
	
					//endregion
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output set
				var outputArray = [];
	
				outputArray.push.apply(outputArray, _toConsumableArray(Array.from(this.crls, function (element) {
					return element.toSchema();
				})));
	
				outputArray.push.apply(outputArray, _toConsumableArray(Array.from(this.otherRevocationInfos, function (element) {
					var schema = element.toSchema();
	
					schema.idBlock.tagClass = 3;
					schema.idBlock.tagNumber = 1;
	
					return schema;
				})));
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Set({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					crls: Array.from(this.crls, function (element) {
						return element.toJSON();
					}),
					otherRevocationInfos: Array.from(this.otherRevocationInfos, function (element) {
						return element.toJSON();
					})
				};
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "crls":
						return [];
					case "otherRevocationInfos":
						return [];
					default:
						throw new Error("Invalid member name for RevocationInfoChoices class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RevocationInfoChoices ::= SET OF RevocationInfoChoice
	
				//RevocationInfoChoice ::= CHOICE {
				//    crl CertificateList,
				//    other [1] IMPLICIT OtherRevocationInfoFormat }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [crls]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Set({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.crls || "",
						value: new asn1js.Choice({
							value: [_CertificateRevocationList2.default.schema(), new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: [new asn1js.ObjectIdentifier(), new asn1js.Any()]
							})]
						})
					})]
				});
			}
		}]);
	
		return RevocationInfoChoices;
	}();
	//**************************************************************************************
	
	
	exports.default = RevocationInfoChoices;
	//# sourceMappingURL=RevocationInfoChoices.js.map

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OtherRevocationInfoFormat = function () {
		//**********************************************************************************
		/**
	  * Constructor for OtherRevocationInfoFormat class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OtherRevocationInfoFormat() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OtherRevocationInfoFormat);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description otherRevInfoFormat
	   */
			this.otherRevInfoFormat = (0, _pvutils.getParametersValue)(parameters, "otherRevInfoFormat", OtherRevocationInfoFormat.defaultValues("otherRevInfoFormat"));
			/**
	   * @type {Any}
	   * @description otherRevInfo
	   */
			this.otherRevInfo = (0, _pvutils.getParametersValue)(parameters, "otherRevInfo", OtherRevocationInfoFormat.defaultValues("otherRevInfo"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OtherRevocationInfoFormat, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OtherRevocationInfoFormat");
				//endregion
	
				//region Get internal properties from parsed schema
				this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();
				this.otherRevInfo = asn1.result.otherRevInfo;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }), this.otherRevInfo]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					otherRevInfoFormat: this.otherRevInfoFormat
				};
	
				if (!(this.otherRevInfo instanceof asn1js.Any)) object.otherRevInfo = this.otherRevInfo.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "otherRevInfoFormat":
						return "";
					case "otherRevInfo":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for OtherRevocationInfoFormat class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OtherCertificateFormat ::= SEQUENCE {
				//    otherRevInfoFormat OBJECT IDENTIFIER,
				//    otherRevInfo ANY DEFINED BY otherCertFormat }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [otherRevInfoFormat]
	    * @property {string} [otherRevInfo]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.otherRevInfoFormat || "otherRevInfoFormat" }), new asn1js.Any({ name: names.otherRevInfo || "otherRevInfo" })]
				});
			}
		}]);
	
		return OtherRevocationInfoFormat;
	}();
	//**************************************************************************************
	
	
	exports.default = OtherRevocationInfoFormat;
	//# sourceMappingURL=OtherRevocationInfoFormat.js.map

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _KeyTransRecipientInfo = __webpack_require__(438);
	
	var _KeyTransRecipientInfo2 = _interopRequireDefault(_KeyTransRecipientInfo);
	
	var _KeyAgreeRecipientInfo = __webpack_require__(441);
	
	var _KeyAgreeRecipientInfo2 = _interopRequireDefault(_KeyAgreeRecipientInfo);
	
	var _KEKRecipientInfo = __webpack_require__(449);
	
	var _KEKRecipientInfo2 = _interopRequireDefault(_KEKRecipientInfo);
	
	var _PasswordRecipientinfo = __webpack_require__(451);
	
	var _PasswordRecipientinfo2 = _interopRequireDefault(_PasswordRecipientinfo);
	
	var _OtherRecipientInfo = __webpack_require__(452);
	
	var _OtherRecipientInfo2 = _interopRequireDefault(_OtherRecipientInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RecipientInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for RecipientInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RecipientInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RecipientInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description variant
	   */
			this.variant = (0, _pvutils.getParametersValue)(parameters, "variant", RecipientInfo.defaultValues("variant"));
	
			if ("value" in parameters)
				/**
	    * @type {*}
	    * @description value
	    */
				this.value = (0, _pvutils.getParametersValue)(parameters, "value", RecipientInfo.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RecipientInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RecipientInfo.schema({
					names: {
						blockName: "blockName"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_RECIPIENT_INFO");
				//endregion
	
				//region Get internal properties from parsed schema
				if (asn1.result.blockName.idBlock.tagClass === 1) {
					this.variant = 1;
					this.value = new _KeyTransRecipientInfo2.default({ schema: asn1.result.blockName });
				} else {
					//region Create "SEQUENCE" from "ASN1_CONSTRUCTED"
					var tagNumber = asn1.result.blockName.idBlock.tagNumber;
	
					asn1.result.blockName.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.blockName.idBlock.tagNumber = 16; // SEQUENCE
					//endregion
	
					switch (tagNumber) {
						case 1:
							this.variant = 2;
							this.value = new _KeyAgreeRecipientInfo2.default({ schema: asn1.result.blockName });
							break;
						case 2:
							this.variant = 3;
							this.value = new _KEKRecipientInfo2.default({ schema: asn1.result.blockName });
							break;
						case 3:
							this.variant = 4;
							this.value = new _PasswordRecipientinfo2.default({ schema: asn1.result.blockName });
							break;
						case 4:
							this.variant = 5;
							this.value = new _OtherRecipientInfo2.default({ schema: asn1.result.blockName });
							break;
						default:
							throw new Error("Incorrect structure of RecipientInfo block");
					}
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				var _schema = this.value.toSchema();
	
				switch (this.variant) {
					case 1:
						return _schema;
					case 2:
					case 3:
					case 4:
						//region Create "ASN1_CONSTRUCTED" from "SEQUENCE"
						_schema.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
						_schema.idBlock.tagNumber = this.variant - 1;
						//endregion
	
						return _schema;
					default:
						return new asn1js.Any();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					variant: this.variant
				};
	
				if (this.variant >= 1 && this.variant <= 4) _object.value = this.value.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "variant":
						return -1;
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for RecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "variant":
						return memberValue === RecipientInfo.defaultValues(memberName);
					case "value":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for RecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RecipientInfo ::= CHOICE {
				//    ktri KeyTransRecipientInfo,
				//    kari [1] KeyAgreeRecipientInfo,
				//    kekri [2] KEKRecipientInfo,
				//    pwri [3] PasswordRecipientinfo,
				//    ori [4] OtherRecipientInfo }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					value: [_KeyTransRecipientInfo2.default.schema({
						names: {
							blockName: names.blockName || ""
						}
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: _KeyAgreeRecipientInfo2.default.schema().valueBlock.value
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: _KEKRecipientInfo2.default.schema().valueBlock.value
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 3 // [3]
						},
						value: _PasswordRecipientinfo2.default.schema().valueBlock.value
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 4 // [4]
						},
						value: _OtherRecipientInfo2.default.schema().valueBlock.value
					})]
				});
			}
		}]);
	
		return RecipientInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = RecipientInfo;
	//# sourceMappingURL=RecipientInfo.js.map

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _RecipientIdentifier = __webpack_require__(439);
	
	var _RecipientIdentifier2 = _interopRequireDefault(_RecipientIdentifier);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var KeyTransRecipientInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for KeyTransRecipientInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KeyTransRecipientInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KeyTransRecipientInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", KeyTransRecipientInfo.defaultValues("version"));
			/**
	   * @type {RecipientIdentifier}
	   * @description rid
	   */
			this.rid = (0, _pvutils.getParametersValue)(parameters, "rid", KeyTransRecipientInfo.defaultValues("rid"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyEncryptionAlgorithm
	   */
			this.keyEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "keyEncryptionAlgorithm", KeyTransRecipientInfo.defaultValues("keyEncryptionAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description encryptedKey
	   */
			this.encryptedKey = (0, _pvutils.getParametersValue)(parameters, "encryptedKey", KeyTransRecipientInfo.defaultValues("encryptedKey"));
			/**
	   * @type {Certificate}
	   * @description recipientCertificate For some reasons we need to store recipient's certificate here
	   */
			this.recipientCertificate = (0, _pvutils.getParametersValue)(parameters, "recipientCertificate", KeyTransRecipientInfo.defaultValues("recipientCertificate"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(KeyTransRecipientInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({
					names: {
						version: "version",
						rid: {
							names: {
								blockName: "rid"
							}
						},
						keyEncryptionAlgorithm: {
							names: {
								blockName: "keyEncryptionAlgorithm"
							}
						},
						encryptedKey: "encryptedKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for KeyTransRecipientInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
	
				if (asn1.result.rid.idBlock.tagClass === 3) this.rid = asn1.result.rid.valueBlock.value[0]; // SubjectKeyIdentifier
				else this.rid = new _IssuerAndSerialNumber2.default({ schema: asn1.result.rid });
	
				this.keyEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyEncryptionAlgorithm });
				this.encryptedKey = asn1.result.encryptedKey;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence 
				var outputArray = [];
	
				if (this.rid instanceof _IssuerAndSerialNumber2.default) {
					this.version = 0;
	
					outputArray.push(new asn1js.Integer({ value: this.version }));
					outputArray.push(this.rid.toSchema());
				} else {
					this.version = 2;
	
					outputArray.push(new asn1js.Integer({ value: this.version }));
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.rid]
					}));
				}
	
				outputArray.push(this.keyEncryptionAlgorithm.toSchema());
				outputArray.push(this.encryptedKey);
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					version: this.version,
					rid: this.rid.toJSON(),
					keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
					encryptedKey: this.encryptedKey.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return -1;
					case "rid":
						return {};
					case "keyEncryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "encryptedKey":
						return new asn1js.OctetString();
					case "recipientCertificate":
						return new _Certificate2.default();
					default:
						throw new Error("Invalid member name for KeyTransRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === KeyTransRecipientInfo.defaultValues("version");
					case "rid":
						return Object.keys(memberValue).length === 0;
					case "keyEncryptionAlgorithm":
					case "encryptedKey":
						return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));
					case "recipientCertificate":
						return false; // For now we do not need to compare any values with the "recipientCertificate"
					default:
						throw new Error("Invalid member name for KeyTransRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//KeyTransRecipientInfo ::= SEQUENCE {
				//    version CMSVersion,  -- always set to 0 or 2
				//    rid RecipientIdentifier,
				//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
				//    encryptedKey EncryptedKey }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [rid]
	    * @property {string} [keyEncryptionAlgorithm]
	    * @property {string} [encryptedKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), _RecipientIdentifier2.default.schema(names.rid || {}), _AlgorithmIdentifier2.default.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({ name: names.encryptedKey || "" })]
				});
			}
		}]);
	
		return KeyTransRecipientInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = KeyTransRecipientInfo;
	//# sourceMappingURL=KeyTransRecipientInfo.js.map

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RecipientIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for RecipientIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RecipientIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RecipientIdentifier);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description variant
	   */
			this.variant = (0, _pvutils.getParametersValue)(parameters, "variant", RecipientIdentifier.defaultValues("variant"));
	
			if ("value" in parameters)
				/**
	    * @type {*}
	    * @description value
	    */
				this.value = (0, _pvutils.getParametersValue)(parameters, "value", RecipientIdentifier.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RecipientIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({
					names: {
						blockName: "blockName"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RecipientIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				if (asn1.result.blockName.idBlock.tagClass === 1) {
					this.variant = 1;
					this.value = new _IssuerAndSerialNumber2.default({ schema: asn1.result.blockName });
				} else {
					this.variant = 2;
					this.value = asn1.result.blockName.valueBlock.value[0];
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				switch (this.variant) {
					case 1:
						return this.value.toSchema();
					case 2:
						return new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [this.value]
						});
					default:
						return new asn1js.Any();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					variant: this.variant
				};
	
				if (this.variant === 1 || this.variant === 2) _object.value = this.value.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "variant":
						return -1;
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for RecipientIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "variant":
						return memberValue === -1;
					case "values":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for RecipientIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RecipientIdentifier ::= CHOICE {
				//    issuerAndSerialNumber IssuerAndSerialNumber,
				//    subjectKeyIdentifier [0] SubjectKeyIdentifier }
				//
				//SubjectKeyIdentifier ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					value: [_IssuerAndSerialNumber2.default.schema({
						names: {
							blockName: names.blockName || ""
						}
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.OctetString()]
					})]
				});
			}
		}]);
	
		return RecipientIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = RecipientIdentifier;
	//# sourceMappingURL=RecipientIdentifier.js.map

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var IssuerAndSerialNumber = function () {
		//**********************************************************************************
		/**
	  * Constructor for IssuerAndSerialNumber class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function IssuerAndSerialNumber() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, IssuerAndSerialNumber);
	
			//region Internal properties of the object
			/**
	   * @type {RelativeDistinguishedNames}
	   * @description issuer
	   */
			this.issuer = (0, _pvutils.getParametersValue)(parameters, "issuer", IssuerAndSerialNumber.defaultValues("issuer"));
			/**
	   * @type {Integer}
	   * @description serialNumber
	   */
			this.serialNumber = (0, _pvutils.getParametersValue)(parameters, "serialNumber", IssuerAndSerialNumber.defaultValues("serialNumber"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(IssuerAndSerialNumber, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, IssuerAndSerialNumber.schema({
					names: {
						issuer: {
							names: {
								blockName: "issuer"
							}
						},
						serialNumber: "serialNumber"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for IssuerAndSerialNumber");
				//endregion
	
				//region Get internal properties from parsed schema
				this.issuer = new _RelativeDistinguishedNames2.default({ schema: asn1.result.issuer });
				this.serialNumber = asn1.result.serialNumber;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.issuer.toSchema(), this.serialNumber]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					issuer: this.issuer.toJSON(),
					serialNumber: this.serialNumber.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "issuer":
						return new _RelativeDistinguishedNames2.default();
					case "serialNumber":
						return new asn1js.Integer();
					default:
						throw new Error("Invalid member name for IssuerAndSerialNumber class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//IssuerAndSerialNumber ::= SEQUENCE {
				//    issuer Name,
				//    serialNumber CertificateSerialNumber }
				//
				//CertificateSerialNumber ::= INTEGER
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [issuer]
	    * @property {string} [serialNumber]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_RelativeDistinguishedNames2.default.schema(names.issuer || {}), new asn1js.Integer({ name: names.serialNumber || "" })]
				});
			}
		}]);
	
		return IssuerAndSerialNumber;
	}();
	//**************************************************************************************
	
	
	exports.default = IssuerAndSerialNumber;
	//# sourceMappingURL=IssuerAndSerialNumber.js.map

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _OriginatorIdentifierOrKey = __webpack_require__(442);
	
	var _OriginatorIdentifierOrKey2 = _interopRequireDefault(_OriginatorIdentifierOrKey);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RecipientEncryptedKeys = __webpack_require__(444);
	
	var _RecipientEncryptedKeys2 = _interopRequireDefault(_RecipientEncryptedKeys);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var KeyAgreeRecipientInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for KeyAgreeRecipientInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KeyAgreeRecipientInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KeyAgreeRecipientInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", KeyAgreeRecipientInfo.defaultValues("version"));
			/**
	   * @type {OriginatorIdentifierOrKey}
	   * @description originator
	   */
			this.originator = (0, _pvutils.getParametersValue)(parameters, "originator", KeyAgreeRecipientInfo.defaultValues("originator"));
	
			if ("ukm" in parameters)
				/**
	    * @type {OctetString}
	    * @description ukm
	    */
				this.ukm = (0, _pvutils.getParametersValue)(parameters, "ukm", KeyAgreeRecipientInfo.defaultValues("ukm"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyEncryptionAlgorithm
	   */
			this.keyEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "keyEncryptionAlgorithm", KeyAgreeRecipientInfo.defaultValues("keyEncryptionAlgorithm"));
			/**
	   * @type {RecipientEncryptedKeys}
	   * @description recipientEncryptedKeys
	   */
			this.recipientEncryptedKeys = (0, _pvutils.getParametersValue)(parameters, "recipientEncryptedKeys", KeyAgreeRecipientInfo.defaultValues("recipientEncryptedKeys"));
			/**
	   * @type {Certificate}
	   * @description recipientCertificate For some reasons we need to store recipient's certificate here
	   */
			this.recipientCertificate = (0, _pvutils.getParametersValue)(parameters, "recipientCertificate", KeyAgreeRecipientInfo.defaultValues("recipientCertificate"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(KeyAgreeRecipientInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({
					names: {
						version: "version",
						originator: {
							names: {
								blockName: "originator"
							}
						},
						ukm: "ukm",
						keyEncryptionAlgorithm: {
							names: {
								blockName: "keyEncryptionAlgorithm"
							}
						},
						recipientEncryptedKeys: {
							names: {
								blockName: "recipientEncryptedKeys"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for KeyAgreeRecipientInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.originator = new _OriginatorIdentifierOrKey2.default({ schema: asn1.result.originator });
	
				if ("ukm" in asn1.result) this.ukm = asn1.result.ukm;
	
				this.keyEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyEncryptionAlgorithm });
				this.recipientEncryptedKeys = new _RecipientEncryptedKeys2.default({ schema: asn1.result.recipientEncryptedKeys });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for final sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
				outputArray.push(new asn1js.Constructed({
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 0 // [0]
					},
					value: [this.originator.toSchema()]
				}));
	
				if ("ukm" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [this.ukm]
					}));
				}
	
				outputArray.push(this.keyEncryptionAlgorithm.toSchema());
				outputArray.push(this.recipientEncryptedKeys.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version,
					originator: this.originator.toJSON()
				};
	
				if ("ukm" in this) _object.ukm = this.ukm.toJSON();
	
				_object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();
				_object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "originator":
						return new _OriginatorIdentifierOrKey2.default();
					case "ukm":
						return new asn1js.OctetString();
					case "keyEncryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "recipientEncryptedKeys":
						return new _RecipientEncryptedKeys2.default();
					case "recipientCertificate":
						return new _Certificate2.default();
					default:
						throw new Error("Invalid member name for KeyAgreeRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === 0;
					case "originator":
						return memberValue.variant === -1 && "value" in memberValue === false;
					case "ukm":
						return memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues("ukm"));
					case "keyEncryptionAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "recipientEncryptedKeys":
						return memberValue.encryptedKeys.length === 0;
					case "recipientCertificate":
						return false; // For now leave it as is
					default:
						throw new Error("Invalid member name for KeyAgreeRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//KeyAgreeRecipientInfo ::= SEQUENCE {
				//    version CMSVersion,  -- always set to 3
				//    originator [0] EXPLICIT OriginatorIdentifierOrKey,
				//    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
				//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
				//    recipientEncryptedKeys RecipientEncryptedKeys }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [originator]
	    * @property {string} [ukm]
	    * @property {string} [keyEncryptionAlgorithm]
	    * @property {string} [recipientEncryptedKeys]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [_OriginatorIdentifierOrKey2.default.schema(names.originator || {})]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.OctetString({ name: names.ukm || "" })]
					}), _AlgorithmIdentifier2.default.schema(names.keyEncryptionAlgorithm || {}), _RecipientEncryptedKeys2.default.schema(names.recipientEncryptedKeys || {})]
				});
			}
		}]);
	
		return KeyAgreeRecipientInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = KeyAgreeRecipientInfo;
	//# sourceMappingURL=KeyAgreeRecipientInfo.js.map

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _OriginatorPublicKey = __webpack_require__(443);
	
	var _OriginatorPublicKey2 = _interopRequireDefault(_OriginatorPublicKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OriginatorIdentifierOrKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for OriginatorIdentifierOrKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OriginatorIdentifierOrKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OriginatorIdentifierOrKey);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description variant
	   */
			this.variant = (0, _pvutils.getParametersValue)(parameters, "variant", OriginatorIdentifierOrKey.defaultValues("variant"));
	
			if ("value" in parameters)
				/**
	    * @type {Array}
	    * @description values
	    */
				this.value = (0, _pvutils.getParametersValue)(parameters, "value", OriginatorIdentifierOrKey.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OriginatorIdentifierOrKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({
					names: {
						blockName: "blockName"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OriginatorIdentifierOrKey");
				//endregion
	
				//region Get internal properties from parsed schema
				if (asn1.result.blockName.idBlock.tagClass === 1) {
					this.variant = 1;
					this.value = new _IssuerAndSerialNumber2.default({ schema: asn1.result.blockName });
				} else {
					if (asn1.result.blockName.idBlock.tagNumber === 0) {
						//region Create "OCTETSTRING" from "ASN1_PRIMITIVE"
						asn1.result.blockName.idBlock.tagClass = 1; // UNIVERSAL
						asn1.result.blockName.idBlock.tagNumber = 4; // OCTETSTRING
						//endregion
	
						this.variant = 2;
						this.value = asn1.result.blockName;
					} else {
						//region Create "SEQUENCE" from "ASN1_CONSTRUCTED"
						asn1.result.blockName.idBlock.tagClass = 1; // UNIVERSAL
						asn1.result.blockName.idBlock.tagNumber = 16; // SEQUENCE
						//endregion
	
						this.variant = 3;
						this.value = new _OriginatorPublicKey2.default({ schema: asn1.result.blockName });
					}
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				switch (this.variant) {
					case 1:
						return this.value.toSchema();
					case 2:
						this.value.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
						this.value.idBlock.tagNumber = 0; // [0]
	
						return this.value;
					case 3:
						{
							var _schema = this.value.toSchema();
	
							_schema.idBlock.tagClass = 3; // CONTEXT-SPECIFIC
							_schema.idBlock.tagNumber = 1; // [1]
	
							return _schema;
						}
					default:
						return new asn1js.Any();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					variant: this.variant
				};
	
				if (this.variant === 1 || this.variant === 2 || this.variant === 3) _object.value = this.value.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "variant":
						return -1;
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for OriginatorIdentifierOrKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "variant":
						return memberValue === -1;
					case "value":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for OriginatorIdentifierOrKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OriginatorIdentifierOrKey ::= CHOICE {
				//    issuerAndSerialNumber IssuerAndSerialNumber,
				//    subjectKeyIdentifier [0] SubjectKeyIdentifier,
				//    originatorKey [1] OriginatorPublicKey }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					value: [_IssuerAndSerialNumber2.default.schema({
						names: {
							blockName: names.blockName || ""
						}
					}), new asn1js.Primitive({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						name: names.blockName || ""
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						name: names.blockName || "",
						value: _OriginatorPublicKey2.default.schema().valueBlock.value
					})]
				});
			}
		}]);
	
		return OriginatorIdentifierOrKey;
	}();
	//**************************************************************************************
	
	
	exports.default = OriginatorIdentifierOrKey;
	//# sourceMappingURL=OriginatorIdentifierOrKey.js.map

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OriginatorPublicKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for OriginatorPublicKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OriginatorPublicKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OriginatorPublicKey);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description algorithm
	   */
			this.algorithm = (0, _pvutils.getParametersValue)(parameters, "algorithm", OriginatorPublicKey.defaultValues("algorithm"));
			/**
	   * @type {BitString}
	   * @description publicKey
	   */
			this.publicKey = (0, _pvutils.getParametersValue)(parameters, "publicKey", OriginatorPublicKey.defaultValues("publicKey"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OriginatorPublicKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OriginatorPublicKey.schema({
					names: {
						algorithm: {
							names: {
								blockName: "algorithm"
							}
						},
						publicKey: "publicKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OriginatorPublicKey");
				//endregion
	
				//region Get internal properties from parsed schema
				this.algorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.algorithm });
				this.publicKey = asn1.result.publicKey;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.algorithm.toSchema(), this.publicKey]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					algorithm: this.algorithm.toJSON(),
					publicKey: this.publicKey.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "algorithm":
						return new _AlgorithmIdentifier2.default();
					case "publicKey":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for OriginatorPublicKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "algorithm":
					case "publicKey":
						return memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for OriginatorPublicKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OriginatorPublicKey ::= SEQUENCE {
				//    algorithm AlgorithmIdentifier,
				//    publicKey BIT STRING }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [algorithm]
	    * @property {string} [publicKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.algorithm || {}), new asn1js.BitString({ name: names.publicKey || "" })]
				});
			}
		}]);
	
		return OriginatorPublicKey;
	}();
	//**************************************************************************************
	
	
	exports.default = OriginatorPublicKey;
	//# sourceMappingURL=OriginatorPublicKey.js.map

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _RecipientEncryptedKey = __webpack_require__(445);
	
	var _RecipientEncryptedKey2 = _interopRequireDefault(_RecipientEncryptedKey);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RecipientEncryptedKeys = function () {
		//**********************************************************************************
		/**
	  * Constructor for RecipientEncryptedKeys class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RecipientEncryptedKeys() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RecipientEncryptedKeys);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<RecipientEncryptedKey>}
	   * @description encryptedKeys
	   */
			this.encryptedKeys = (0, _pvutils.getParametersValue)(parameters, "encryptedKeys", RecipientEncryptedKeys.defaultValues("encryptedKeys"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RecipientEncryptedKeys, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKeys.schema({
					names: {
						RecipientEncryptedKeys: "RecipientEncryptedKeys"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RecipientEncryptedKeys");
				//endregion
	
				//region Get internal properties from parsed schema
				this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, function (element) {
					return new _RecipientEncryptedKey2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: Array.from(this.encryptedKeys, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					encryptedKeys: Array.from(this.encryptedKeys, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "encryptedKeys":
						return [];
					default:
						throw new Error("Invalid member name for RecipientEncryptedKeys class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "encryptedKeys":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for RecipientEncryptedKeys class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [RecipientEncryptedKeys]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Repeated({
						name: names.RecipientEncryptedKeys || "",
						value: _RecipientEncryptedKey2.default.schema()
					})]
				});
			}
		}]);
	
		return RecipientEncryptedKeys;
	}();
	//**************************************************************************************
	
	
	exports.default = RecipientEncryptedKeys;
	//# sourceMappingURL=RecipientEncryptedKeys.js.map

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _KeyAgreeRecipientIdentifier = __webpack_require__(446);
	
	var _KeyAgreeRecipientIdentifier2 = _interopRequireDefault(_KeyAgreeRecipientIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RecipientEncryptedKey = function () {
		//**********************************************************************************
		/**
	  * Constructor for RecipientEncryptedKey class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RecipientEncryptedKey() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RecipientEncryptedKey);
	
			//region Internal properties of the object
			/**
	   * @type {KeyAgreeRecipientIdentifier}
	   * @description rid
	   */
			this.rid = (0, _pvutils.getParametersValue)(parameters, "rid", RecipientEncryptedKey.defaultValues("rid"));
			/**
	   * @type {OctetString}
	   * @description encryptedKey
	   */
			this.encryptedKey = (0, _pvutils.getParametersValue)(parameters, "encryptedKey", RecipientEncryptedKey.defaultValues("encryptedKey"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RecipientEncryptedKey, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKey.schema({
					names: {
						rid: {
							names: {
								blockName: "rid"
							}
						},
						encryptedKey: "encryptedKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RecipientEncryptedKey");
				//endregion
	
				//region Get internal properties from parsed schema
				this.rid = new _KeyAgreeRecipientIdentifier2.default({ schema: asn1.result.rid });
				this.encryptedKey = asn1.result.encryptedKey;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.rid.toSchema(), this.encryptedKey]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					rid: this.rid.toJSON(),
					encryptedKey: this.encryptedKey.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "rid":
						return new _KeyAgreeRecipientIdentifier2.default();
					case "encryptedKey":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for RecipientEncryptedKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "rid":
						return memberValue.variant === -1 && "value" in memberValue === false;
					case "encryptedKey":
						return memberValue.isEqual(RecipientEncryptedKey.defaultValues("encryptedKey"));
					default:
						throw new Error("Invalid member name for RecipientEncryptedKey class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RecipientEncryptedKey ::= SEQUENCE {
				//    rid KeyAgreeRecipientIdentifier,
				//    encryptedKey EncryptedKey }
				//
				//EncryptedKey ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [rid]
	    * @property {string} [encryptedKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_KeyAgreeRecipientIdentifier2.default.schema(names.rid || {}), new asn1js.OctetString({ name: names.encryptedKey || "" })]
				});
			}
		}]);
	
		return RecipientEncryptedKey;
	}();
	//**************************************************************************************
	
	
	exports.default = RecipientEncryptedKey;
	//# sourceMappingURL=RecipientEncryptedKey.js.map

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _RecipientKeyIdentifier = __webpack_require__(447);
	
	var _RecipientKeyIdentifier2 = _interopRequireDefault(_RecipientKeyIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var KeyAgreeRecipientIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for KeyAgreeRecipientIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KeyAgreeRecipientIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KeyAgreeRecipientIdentifier);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description variant
	   */
			this.variant = (0, _pvutils.getParametersValue)(parameters, "variant", KeyAgreeRecipientIdentifier.defaultValues("variant"));
			/**
	   * @type {*}
	   * @description values
	   */
			this.value = (0, _pvutils.getParametersValue)(parameters, "value", KeyAgreeRecipientIdentifier.defaultValues("value"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(KeyAgreeRecipientIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({
					names: {
						blockName: "blockName"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for KeyAgreeRecipientIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				if (asn1.result.blockName.idBlock.tagClass === 1) {
					this.variant = 1;
					this.value = new _IssuerAndSerialNumber2.default({ schema: asn1.result.blockName });
				} else {
					this.variant = 2;
	
					asn1.result.blockName.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.blockName.idBlock.tagNumber = 16; // SEQUENCE
	
					this.value = new _RecipientKeyIdentifier2.default({ schema: asn1.result.blockName });
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				switch (this.variant) {
					case 1:
						return this.value.toSchema();
					case 2:
						return new asn1js.Constructed({
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: this.value.toSchema().valueBlock.value
						});
					default:
						return new asn1js.Any();
				}
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					variant: this.variant
				};
	
				if (this.variant === 1 || this.variant === 2) _object.value = this.value.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "variant":
						return -1;
					case "value":
						return {};
					default:
						throw new Error("Invalid member name for KeyAgreeRecipientIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "variant":
						return memberValue === -1;
					case "value":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for KeyAgreeRecipientIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//KeyAgreeRecipientIdentifier ::= CHOICE {
				//    issuerAndSerialNumber IssuerAndSerialNumber,
				//    rKeyId [0] IMPLICIT RecipientKeyIdentifier }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [issuerAndSerialNumber]
	    * @property {string} [rKeyId]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Choice({
					value: [_IssuerAndSerialNumber2.default.schema(names.issuerAndSerialNumber || {
						names: {
							blockName: names.blockName || ""
						}
					}), new asn1js.Constructed({
						name: names.blockName || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: _RecipientKeyIdentifier2.default.schema(names.rKeyId || {
							names: {
								blockName: names.blockName || ""
							}
						}).valueBlock.value
					})]
				});
			}
		}]);
	
		return KeyAgreeRecipientIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = KeyAgreeRecipientIdentifier;
	//# sourceMappingURL=KeyAgreeRecipientIdentifier.js.map

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _OtherKeyAttribute = __webpack_require__(448);
	
	var _OtherKeyAttribute2 = _interopRequireDefault(_OtherKeyAttribute);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var RecipientKeyIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for RecipientKeyIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RecipientKeyIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RecipientKeyIdentifier);
	
			//region Internal properties of the object
			/**
	   * @type {OctetString}
	   * @description subjectKeyIdentifier
	   */
			this.subjectKeyIdentifier = (0, _pvutils.getParametersValue)(parameters, "subjectKeyIdentifier", RecipientKeyIdentifier.defaultValues("subjectKeyIdentifier"));
	
			if ("date" in parameters)
				/**
	    * @type {GeneralizedTime}
	    * @description date
	    */
				this.date = (0, _pvutils.getParametersValue)(parameters, "date", RecipientKeyIdentifier.defaultValues("date"));
	
			if ("other" in parameters)
				/**
	    * @type {OtherKeyAttribute}
	    * @description other
	    */
				this.other = (0, _pvutils.getParametersValue)(parameters, "other", RecipientKeyIdentifier.defaultValues("other"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RecipientKeyIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RecipientKeyIdentifier.schema({
					names: {
						subjectKeyIdentifier: "subjectKeyIdentifier",
						date: "date",
						other: {
							names: {
								blockName: "other"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RecipientKeyIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;
	
				if ("date" in asn1.result) this.date = asn1.result.date;
	
				if ("other" in asn1.result) this.other = new _OtherKeyAttribute2.default({ schema: asn1.result.other });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.subjectKeyIdentifier);
	
				if ("date" in this) outputArray.push(this.date);
	
				if ("other" in this) outputArray.push(this.other.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()
				};
	
				if ("date" in this) _object.date = this.date;
	
				if ("other" in this) _object.other = this.other.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "subjectKeyIdentifier":
						return new asn1js.OctetString();
					case "date":
						return new asn1js.GeneralizedTime();
					case "other":
						return new _OtherKeyAttribute2.default();
					default:
						throw new Error("Invalid member name for RecipientKeyIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "subjectKeyIdentifier":
						return memberValue.isEqual(RecipientKeyIdentifier.defaultValues("subjectKeyIdentifier"));
					case "date":
						return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
					case "other":
						return memberValue.keyAttrId === "" && "keyAttr" in memberValue === false;
					default:
						throw new Error("Invalid member name for RecipientKeyIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RecipientKeyIdentifier ::= SEQUENCE {
				//    subjectKeyIdentifier SubjectKeyIdentifier,
				//    date GeneralizedTime OPTIONAL,
				//    other OtherKeyAttribute OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.OctetString({ name: names.subjectKeyIdentifier || "" }), new asn1js.GeneralizedTime({
						optional: true,
						name: names.date || ""
					}), _OtherKeyAttribute2.default.schema(names.other || {})]
				});
			}
		}]);
	
		return RecipientKeyIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = RecipientKeyIdentifier;
	//# sourceMappingURL=RecipientKeyIdentifier.js.map

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OtherKeyAttribute = function () {
		//**********************************************************************************
		/**
	  * Constructor for OtherKeyAttribute class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OtherKeyAttribute() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OtherKeyAttribute);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description keyAttrId
	   */
			this.keyAttrId = (0, _pvutils.getParametersValue)(parameters, "keyAttrId", OtherKeyAttribute.defaultValues("keyAttrId"));
	
			if ("keyAttr" in parameters)
				/**
	    * @type {*}
	    * @description keyAttr
	    */
				this.keyAttr = (0, _pvutils.getParametersValue)(parameters, "keyAttr", OtherKeyAttribute.defaultValues("keyAttr"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OtherKeyAttribute, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({
					names: {
						keyAttrId: "keyAttrId",
						keyAttr: "keyAttr"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OtherKeyAttribute");
				//endregion
	
				//region Get internal properties from parsed schema
				this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();
	
				if ("keyAttr" in asn1.result) this.keyAttr = asn1.result.keyAttr;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));
	
				if ("keyAttr" in this) outputArray.push(this.keyAttr.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					keyAttrId: this.keyAttrId
				};
	
				if ("keyAttr" in this) _object.keyAttr = this.keyAttr.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyAttrId":
						return "";
					case "keyAttr":
						return {};
					default:
						throw new Error("Invalid member name for OtherKeyAttribute class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "keyAttrId":
						return memberValue === "";
					case "keyAttr":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for OtherKeyAttribute class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OtherKeyAttribute ::= SEQUENCE {
				//    keyAttrId OBJECT IDENTIFIER,
				//    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [optional]
	    * @property {string} [keyAttrId]
	    * @property {string} [keyAttr]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					optional: names.optional || true,
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.keyAttrId || "" }), new asn1js.Any({
						optional: true,
						name: names.keyAttr || ""
					})]
				});
			}
		}]);
	
		return OtherKeyAttribute;
	}();
	//**************************************************************************************
	
	
	exports.default = OtherKeyAttribute;
	//# sourceMappingURL=OtherKeyAttribute.js.map

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _KEKIdentifier = __webpack_require__(450);
	
	var _KEKIdentifier2 = _interopRequireDefault(_KEKIdentifier);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var KEKRecipientInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for KEKRecipientInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KEKRecipientInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KEKRecipientInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", KEKRecipientInfo.defaultValues("version"));
			/**
	   * @type {KEKIdentifier}
	   * @description kekid
	   */
			this.kekid = (0, _pvutils.getParametersValue)(parameters, "kekid", KEKRecipientInfo.defaultValues("kekid"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyEncryptionAlgorithm
	   */
			this.keyEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "keyEncryptionAlgorithm", KEKRecipientInfo.defaultValues("keyEncryptionAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description encryptedKey
	   */
			this.encryptedKey = (0, _pvutils.getParametersValue)(parameters, "encryptedKey", KEKRecipientInfo.defaultValues("encryptedKey"));
			/**
	   * @type {ArrayBuffer}
	   * @description preDefinedKEK KEK using to encrypt CEK
	   */
			this.preDefinedKEK = (0, _pvutils.getParametersValue)(parameters, "preDefinedKEK", KEKRecipientInfo.defaultValues("preDefinedKEK"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(KEKRecipientInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({
					names: {
						version: "version",
						kekid: {
							names: {
								blockName: "kekid"
							}
						},
						keyEncryptionAlgorithm: {
							names: {
								blockName: "keyEncryptionAlgorithm"
							}
						},
						encryptedKey: "encryptedKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for KEKRecipientInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.kekid = new _KEKIdentifier2.default({ schema: asn1.result.kekid });
				this.keyEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyEncryptionAlgorithm });
				this.encryptedKey = asn1.result.encryptedKey;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.Integer({ value: this.version }), this.kekid.toSchema(), this.keyEncryptionAlgorithm.toSchema(), this.encryptedKey]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					version: this.version,
					kekid: this.originator.toJSON(),
					keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
					encryptedKey: this.encryptedKey.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "kekid":
						return new _KEKIdentifier2.default();
					case "keyEncryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "encryptedKey":
						return new asn1js.OctetString();
					case "preDefinedKEK":
						return new ArrayBuffer(0);
					default:
						throw new Error("Invalid member name for KEKRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "KEKRecipientInfo":
						return memberValue === KEKRecipientInfo.defaultValues("version");
					case "kekid":
						return memberValue.compareWithDefault("keyIdentifier", memberValue.keyIdentifier) && "date" in memberValue === false && "other" in memberValue === false;
					case "keyEncryptionAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "encryptedKey":
						return memberValue.isEqual(KEKRecipientInfo.defaultValues("encryptedKey"));
					case "preDefinedKEK":
						return memberValue.byteLength === 0;
					default:
						throw new Error("Invalid member name for KEKRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//KEKRecipientInfo ::= SEQUENCE {
				//    version CMSVersion,  -- always set to 4
				//    kekid KEKIdentifier,
				//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
				//    encryptedKey EncryptedKey }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [kekid]
	    * @property {string} [keyEncryptionAlgorithm]
	    * @property {string} [encryptedKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), _KEKIdentifier2.default.schema(names.kekid || {}), _AlgorithmIdentifier2.default.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({ name: names.encryptedKey || "" })]
				});
			}
		}]);
	
		return KEKRecipientInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = KEKRecipientInfo;
	//# sourceMappingURL=KEKRecipientInfo.js.map

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _OtherKeyAttribute = __webpack_require__(448);
	
	var _OtherKeyAttribute2 = _interopRequireDefault(_OtherKeyAttribute);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var KEKIdentifier = function () {
		//**********************************************************************************
		/**
	  * Constructor for KEKIdentifier class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KEKIdentifier() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KEKIdentifier);
	
			//region Internal properties of the object
			/**
	   * @type {OctetString}
	   * @description keyIdentifier
	   */
			this.keyIdentifier = (0, _pvutils.getParametersValue)(parameters, "keyIdentifier", KEKIdentifier.defaultValues("keyIdentifier"));
	
			if ("date" in parameters)
				/**
	    * @type {GeneralizedTime}
	    * @description date
	    */
				this.date = (0, _pvutils.getParametersValue)(parameters, "date", KEKIdentifier.defaultValues("date"));
			if ("other" in parameters)
				/**
	    * @type {OtherKeyAttribute}
	    * @description other
	    */
				this.other = (0, _pvutils.getParametersValue)(parameters, "other", KEKIdentifier.defaultValues("other"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(KEKIdentifier, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, KEKIdentifier.schema({
					names: {
						keyIdentifier: "keyIdentifier",
						date: "date",
						other: {
							names: {
								blockName: "other"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for KEKIdentifier");
				//endregion
	
				//region Get internal properties from parsed schema
				this.keyIdentifier = asn1.result.keyIdentifier;
	
				if ("date" in asn1.result) this.date = asn1.result.date;
	
				if ("other" in asn1.result) this.other = new _OtherKeyAttribute2.default({ schema: asn1.result.other });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.keyIdentifier);
	
				if ("date" in this) outputArray.push(this.date);
	
				if ("other" in this) outputArray.push(this.other.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					keyIdentifier: this.keyIdentifier.toJSON()
				};
	
				if ("date" in this) _object.date = this.date;
	
				if ("other" in this) _object.other = this.other.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyIdentifier":
						return new asn1js.OctetString();
					case "date":
						return new asn1js.GeneralizedTime();
					case "other":
						return new _OtherKeyAttribute2.default();
					default:
						throw new Error("Invalid member name for KEKIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "keyIdentifier":
						return memberValue.isEqual(KEKIdentifier.defaultValues("keyIdentifier"));
					case "date":
						return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
					case "other":
						return memberValue.compareWithDefault("keyAttrId", memberValue.keyAttrId) && "keyAttr" in memberValue === false;
					default:
						throw new Error("Invalid member name for KEKIdentifier class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//KEKIdentifier ::= SEQUENCE {
				//    keyIdentifier OCTET STRING,
				//    date GeneralizedTime OPTIONAL,
				//    other OtherKeyAttribute OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyIdentifier]
	    * @property {string} [date]
	    * @property {string} [other]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.OctetString({ name: names.keyIdentifier || "" }), new asn1js.GeneralizedTime({
						optional: true,
						name: names.date || ""
					}), _OtherKeyAttribute2.default.schema(names.other || {})]
				});
			}
		}]);
	
		return KEKIdentifier;
	}();
	//**************************************************************************************
	
	
	exports.default = KEKIdentifier;
	//# sourceMappingURL=KEKIdentifier.js.map

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var PasswordRecipientinfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for PasswordRecipientinfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PasswordRecipientinfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PasswordRecipientinfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", PasswordRecipientinfo.defaultValues("version"));
	
			if ("keyDerivationAlgorithm" in parameters)
				/**
	    * @type {AlgorithmIdentifier}
	    * @description keyDerivationAlgorithm
	    */
				this.keyDerivationAlgorithm = (0, _pvutils.getParametersValue)(parameters, "keyDerivationAlgorithm", PasswordRecipientinfo.defaultValues("keyDerivationAlgorithm"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyEncryptionAlgorithm
	   */
			this.keyEncryptionAlgorithm = (0, _pvutils.getParametersValue)(parameters, "keyEncryptionAlgorithm", PasswordRecipientinfo.defaultValues("keyEncryptionAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description encryptedKey
	   */
			this.encryptedKey = (0, _pvutils.getParametersValue)(parameters, "encryptedKey", PasswordRecipientinfo.defaultValues("encryptedKey"));
			/**
	   * @type {ArrayBuffer}
	   * @description password Password to derive key from
	   */
			this.password = (0, _pvutils.getParametersValue)(parameters, "password", PasswordRecipientinfo.defaultValues("password"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PasswordRecipientinfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({
					names: {
						version: "version",
						keyDerivationAlgorithm: "keyDerivationAlgorithm",
						keyEncryptionAlgorithm: {
							names: {
								blockName: "keyEncryptionAlgorithm"
							}
						},
						encryptedKey: "encryptedKey"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PasswordRecipientinfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
	
				if ("keyDerivationAlgorithm" in asn1.result) {
					asn1.result.keyDerivationAlgorithm.idBlock.tagClass = 1; // UNIVERSAL
					asn1.result.keyDerivationAlgorithm.idBlock.tagNumber = 16; // SEQUENCE
	
					this.keyDerivationAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyDerivationAlgorithm });
				}
	
				this.keyEncryptionAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyEncryptionAlgorithm });
				this.encryptedKey = asn1.result.encryptedKey;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create output array for sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
	
				if ("keyDerivationAlgorithm" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: this.keyDerivationAlgorithm.toSchema().valueBlock.value
					}));
				}
	
				outputArray.push(this.keyEncryptionAlgorithm.toSchema());
				outputArray.push(this.encryptedKey);
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					version: this.version,
					keyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),
					keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
					encryptedKey: this.encryptedKey.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return -1;
					case "keyDerivationAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "keyEncryptionAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "encryptedKey":
						return new asn1js.OctetString();
					case "password":
						return new ArrayBuffer(0);
					default:
						throw new Error("Invalid member name for PasswordRecipientinfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === -1;
					case "keyDerivationAlgorithm":
					case "keyEncryptionAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "encryptedKey":
						return memberValue.isEqual(PasswordRecipientinfo.defaultValues("encryptedKey"));
					case "password":
						return memberValue.byteLength === 0;
					default:
						throw new Error("Invalid member name for PasswordRecipientinfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PasswordRecipientInfo ::= SEQUENCE {
				//    version CMSVersion,   -- Always set to 0
				//    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,
				//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
				//    encryptedKey EncryptedKey }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyDerivationAlgorithm]
	    * @property {string} [keyEncryptionAlgorithm]
	    * @property {string} [encryptedKey]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "" }), new asn1js.Constructed({
						name: names.keyDerivationAlgorithm || "",
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: _AlgorithmIdentifier2.default.schema().valueBlock.value
					}), _AlgorithmIdentifier2.default.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({ name: names.encryptedKey || "" })]
				});
			}
		}]);
	
		return PasswordRecipientinfo;
	}();
	//**************************************************************************************
	
	
	exports.default = PasswordRecipientinfo;
	//# sourceMappingURL=PasswordRecipientinfo.js.map

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OtherRecipientInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for OtherRecipientInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OtherRecipientInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OtherRecipientInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description oriType
	   */
			this.oriType = (0, _pvutils.getParametersValue)(parameters, "oriType", OtherRecipientInfo.defaultValues("oriType"));
			/**
	   * @type {*}
	   * @description oriValue
	   */
			this.oriValue = (0, _pvutils.getParametersValue)(parameters, "oriValue", OtherRecipientInfo.defaultValues("oriValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OtherRecipientInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OtherRecipientInfo.schema({
					names: {
						oriType: "oriType",
						oriValue: "oriValue"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OtherRecipientInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.oriType = asn1.result.oriType.valueBlock.toString();
				this.oriValue = asn1.result.oriValue;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.oriType }), this.oriValue]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					oriType: this.oriType
				};
	
				if (OtherRecipientInfo.compareWithDefault("oriValue", this.oriValue) === false) _object.oriValue = this.oriValue.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "oriType":
						return "";
					case "oriValue":
						return {};
					default:
						throw new Error("Invalid member name for OtherRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "oriType":
						return memberValue === "";
					case "oriValue":
						return Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for OtherRecipientInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OtherRecipientInfo ::= SEQUENCE {
				//    oriType OBJECT IDENTIFIER,
				//    oriValue ANY DEFINED BY oriType }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [oriType]
	    * @property {string} [oriValue]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.oriType || "" }), new asn1js.Any({ name: names.oriValue || "" })]
				});
			}
		}]);
	
		return OtherRecipientInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = OtherRecipientInfo;
	//# sourceMappingURL=OtherRecipientInfo.js.map

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3447
	 */
	var RSAESOAEPParams = function () {
		//**********************************************************************************
		/**
	  * Constructor for RSAESOAEPParams class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function RSAESOAEPParams() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, RSAESOAEPParams);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description hashAlgorithm
	   */
			this.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, "hashAlgorithm", RSAESOAEPParams.defaultValues("hashAlgorithm"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description maskGenAlgorithm
	   */
			this.maskGenAlgorithm = (0, _pvutils.getParametersValue)(parameters, "maskGenAlgorithm", RSAESOAEPParams.defaultValues("maskGenAlgorithm"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description pSourceAlgorithm
	   */
			this.pSourceAlgorithm = (0, _pvutils.getParametersValue)(parameters, "pSourceAlgorithm", RSAESOAEPParams.defaultValues("pSourceAlgorithm"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(RSAESOAEPParams, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, RSAESOAEPParams.schema({
					names: {
						hashAlgorithm: {
							names: {
								blockName: "hashAlgorithm"
							}
						},
						maskGenAlgorithm: {
							names: {
								blockName: "maskGenAlgorithm"
							}
						},
						pSourceAlgorithm: {
							names: {
								blockName: "pSourceAlgorithm"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for RSAESOAEPParams");
				//endregion
	
				//region Get internal properties from parsed schema
				if ("hashAlgorithm" in asn1.result) this.hashAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.hashAlgorithm });
	
				if ("maskGenAlgorithm" in asn1.result) this.maskGenAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.maskGenAlgorithm });
	
				if ("pSourceAlgorithm" in asn1.result) this.pSourceAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.pSourceAlgorithm });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues("hashAlgorithm"))) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.hashAlgorithm.toSchema()]
					}));
				}
	
				if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues("maskGenAlgorithm"))) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [this.maskGenAlgorithm.toSchema()]
					}));
				}
	
				if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues("pSourceAlgorithm"))) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: [this.pSourceAlgorithm.toSchema()]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {};
	
				if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues("hashAlgorithm"))) object.hashAlgorithm = this.hashAlgorithm.toJSON();
	
				if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues("maskGenAlgorithm"))) object.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
	
				if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues("pSourceAlgorithm"))) object.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "hashAlgorithm":
						return new _AlgorithmIdentifier2.default({
							algorithmId: "1.3.14.3.2.26", // SHA-1
							algorithmParams: new asn1js.Null()
						});
					case "maskGenAlgorithm":
						return new _AlgorithmIdentifier2.default({
							algorithmId: "1.2.840.113549.1.1.8", // MGF1
							algorithmParams: new _AlgorithmIdentifier2.default({
								algorithmId: "1.3.14.3.2.26", // SHA-1
								algorithmParams: new asn1js.Null()
							}).toSchema()
						});
					case "pSourceAlgorithm":
						return new _AlgorithmIdentifier2.default({
							algorithmId: "1.2.840.113549.1.1.9", // id-pSpecified
							algorithmParams: new asn1js.OctetString({ valueHex: new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09]).buffer }) // SHA-1 hash of empty string
						});
					default:
						throw new Error("Invalid member name for RSAESOAEPParams class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//RSAES-OAEP-params ::= SEQUENCE {
				//    hashAlgorithm     [0] HashAlgorithm    DEFAULT sha1,
				//    maskGenAlgorithm  [1] MaskGenAlgorithm DEFAULT mgf1SHA1,
				//    pSourceAlgorithm  [2] PSourceAlgorithm DEFAULT pSpecifiedEmpty
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [hashAlgorithm]
	    * @property {string} [maskGenAlgorithm]
	    * @property {string} [pSourceAlgorithm]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						optional: true,
						value: [_AlgorithmIdentifier2.default.schema(names.hashAlgorithm || {})]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						optional: true,
						value: [_AlgorithmIdentifier2.default.schema(names.maskGenAlgorithm || {})]
					}), new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						optional: true,
						value: [_AlgorithmIdentifier2.default.schema(names.pSourceAlgorithm || {})]
					})]
				});
			}
		}]);
	
		return RSAESOAEPParams;
	}();
	//**************************************************************************************
	
	
	exports.default = RSAESOAEPParams;
	//# sourceMappingURL=RSAESOAEPParams.js.map

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6318
	 */
	var ECCCMSSharedInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for ECCCMSSharedInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ECCCMSSharedInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ECCCMSSharedInfo);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description keyInfo
	   */
			this.keyInfo = (0, _pvutils.getParametersValue)(parameters, "keyInfo", ECCCMSSharedInfo.defaultValues("keyInfo"));
	
			if ("entityUInfo" in parameters)
				/**
	    * @type {OctetString}
	    * @description entityUInfo
	    */
				this.entityUInfo = (0, _pvutils.getParametersValue)(parameters, "entityUInfo", ECCCMSSharedInfo.defaultValues("entityUInfo"));
	
			/**
	   * @type {OctetString}
	   * @description suppPubInfo
	   */
			this.suppPubInfo = (0, _pvutils.getParametersValue)(parameters, "suppPubInfo", ECCCMSSharedInfo.defaultValues("suppPubInfo"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ECCCMSSharedInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ECCCMSSharedInfo.schema({
					names: {
						keyInfo: {
							names: {
								blockName: "keyInfo"
							}
						},
						entityUInfo: "entityUInfo",
						suppPubInfo: "suppPubInfo"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ECC_CMS_SharedInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.keyInfo = new _AlgorithmIdentifier2.default({ schema: asn1.result.keyInfo });
	
				if ("entityUInfo" in asn1.result) this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];
	
				this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create output array for sequence 
				var outputArray = [];
	
				outputArray.push(this.keyInfo.toSchema());
	
				if ("entityUInfo" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.entityUInfo]
					}));
				}
	
				outputArray.push(new asn1js.Constructed({
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: 2 // [2]
					},
					value: [this.suppPubInfo]
				}));
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					keyInfo: this.keyInfo.toJSON()
				};
	
				if ("entityUInfo" in this) _object.entityUInfo = this.entityUInfo.toJSON();
	
				_object.suppPubInfo = this.suppPubInfo.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "keyInfo":
						return new _AlgorithmIdentifier2.default();
					case "entityUInfo":
						return new asn1js.OctetString();
					case "suppPubInfo":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for ECCCMSSharedInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "keyInfo":
					case "entityUInfo":
					case "suppPubInfo":
						return memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for ECCCMSSharedInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//ECC-CMS-SharedInfo  ::=  SEQUENCE {
				//    keyInfo      AlgorithmIdentifier,
				//    entityUInfo  [0] EXPLICIT OCTET STRING OPTIONAL,
				//    suppPubInfo  [2] EXPLICIT OCTET STRING }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [keyInfo]
	    * @property {string} [entityUInfo]
	    * @property {string} [suppPubInfo]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.keyInfo || {}), new asn1js.Constructed({
						name: names.entityUInfo || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						optional: true,
						value: [new asn1js.OctetString()]
					}), new asn1js.Constructed({
						name: names.suppPubInfo || "",
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: [new asn1js.OctetString()]
					})]
				});
			}
		}]);
	
		return ECCCMSSharedInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = ECCCMSSharedInfo;
	//# sourceMappingURL=ECCCMSSharedInfo.js.map

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _ResponseData = __webpack_require__(456);
	
	var _ResponseData2 = _interopRequireDefault(_ResponseData);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _CertID = __webpack_require__(458);
	
	var _CertID2 = _interopRequireDefault(_CertID);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _CertificateChainValidationEngine = __webpack_require__(459);
	
	var _CertificateChainValidationEngine2 = _interopRequireDefault(_CertificateChainValidationEngine);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var BasicOCSPResponse = function () {
		//**********************************************************************************
		/**
	  * Constructor for BasicOCSPResponse class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function BasicOCSPResponse() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, BasicOCSPResponse);
	
			//region Internal properties of the object
			/**
	   * @type {ResponseData}
	   * @description tbsResponseData
	   */
			this.tbsResponseData = (0, _pvutils.getParametersValue)(parameters, "tbsResponseData", BasicOCSPResponse.defaultValues("tbsResponseData"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signatureAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", BasicOCSPResponse.defaultValues("signatureAlgorithm"));
			/**
	   * @type {BitString}
	   * @description signature
	   */
			this.signature = (0, _pvutils.getParametersValue)(parameters, "signature", BasicOCSPResponse.defaultValues("signature"));
	
			if ("certs" in parameters)
				/**
	    * @type {Array.<Certificate>}
	    * @description certs
	    */
				this.certs = (0, _pvutils.getParametersValue)(parameters, "certs", BasicOCSPResponse.defaultValues("certs"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(BasicOCSPResponse, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, BasicOCSPResponse.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OCSP_BASIC_RESPONSE");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbsResponseData = new _ResponseData2.default({ schema: asn1.result["BasicOCSPResponse.tbsResponseData"] });
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result["BasicOCSPResponse.signatureAlgorithm"] });
				this.signature = asn1.result["BasicOCSPResponse.signature"];
	
				if ("BasicOCSPResponse.certs" in asn1.result) this.certs = Array.from(asn1.result["BasicOCSPResponse.certs"], function (element) {
					return new _Certificate2.default({ schema: element });
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.tbsResponseData.toSchema());
				outputArray.push(this.signatureAlgorithm.toSchema());
				outputArray.push(this.signature);
	
				//region Create array of certificates
				if ("certs" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.certs, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
				//endregion
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					tbsResponseData: this.tbsResponseData.toJSON(),
					signatureAlgorithm: this.signatureAlgorithm.toJSON(),
					signature: this.signature.toJSON()
				};
	
				if ("certs" in this) _object.certs = Array.from(this.certs, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
	
			//**********************************************************************************
			/**
	   * Get OCSP response status for specific certificate
	   * @param {Certificate} certificate Certificate to be checked
	   * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked
	   * @returns {Promise}
	   */
	
		}, {
			key: "getCertificateStatus",
			value: function getCertificateStatus(certificate, issuerCertificate) {
				var _this = this;
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var result = {
					isForCertificate: false,
					status: 2 // 0 = good, 1 = revoked, 2 = unknown
				};
	
				var hashesObject = {};
	
				var certIDs = [];
				var certIDPromises = [];
				//endregion
	
				//region Create all "certIDs" for input certificates
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = this.tbsResponseData.responses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var response = _step.value;
	
						var hashAlgorithm = (0, _common.getAlgorithmByOID)(response.certID.hashAlgorithm.algorithmId);
						if ("name" in hashAlgorithm === false) return Promise.reject("Wrong CertID hashing algorithm: " + response.certID.hashAlgorithm.algorithmId);
	
						if (hashAlgorithm.name in hashesObject === false) {
							hashesObject[hashAlgorithm.name] = 1;
	
							var certID = new _CertID2.default();
	
							certIDs.push(certID);
							certIDPromises.push(certID.createForCertificate(certificate, {
								hashAlgorithm: hashAlgorithm.name,
								issuerCertificate: issuerCertificate
							}));
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				sequence = sequence.then(function () {
					return Promise.all(certIDPromises);
				});
				//endregion
	
				//region Compare all response's "certIDs" with identifiers for input certificate
				sequence = sequence.then(function () {
					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;
	
					try {
						for (var _iterator2 = _this.tbsResponseData.responses[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var response = _step2.value;
							var _iteratorNormalCompletion3 = true;
							var _didIteratorError3 = false;
							var _iteratorError3 = undefined;
	
							try {
								for (var _iterator3 = certIDs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
									var id = _step3.value;
	
									if (response.certID.isEqual(id)) {
										result.isForCertificate = true;
	
										try {
											switch (response.certStatus.idBlock.isConstructed) {
												case true:
													if (response.certStatus.idBlock.tagNumber === 1) result.status = 1; // revoked
	
													break;
												case false:
													switch (response.certStatus.idBlock.tagNumber) {
														case 0:
															// good
															result.status = 0;
															break;
														case 2:
															// unknown
															result.status = 2;
															break;
														default:
													}
	
													break;
												default:
											}
										} catch (ex) {}
	
										return result;
									}
								}
							} catch (err) {
								_didIteratorError3 = true;
								_iteratorError3 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion3 && _iterator3.return) {
										_iterator3.return();
									}
								} finally {
									if (_didIteratorError3) {
										throw _iteratorError3;
									}
								}
							}
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}
	
					return result;
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
			/**
	   * Make signature for current OCSP Basic Response
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   * @returns {Promise}
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey, hashAlgorithm) {
				var _this2 = this;
	
				//region Get a private key from function parameter
				if (typeof privateKey === "undefined") return Promise.reject("Need to provide a private key for signing");
				//endregion
	
				//region Get hashing algorithm
				if (typeof hashAlgorithm === "undefined") hashAlgorithm = "SHA-1";else {
					//region Simple check for supported algorithm
					var oid = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
					if (oid === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
					//endregion
				}
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.signatureAlgorithm.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								var hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.signatureAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				this.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(this.tbsResponseData.tbs)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this2.signature = new asn1js.BitString({ valueHex: result });
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Verify existing OCSP Basic Response
	   * @param {Object} parameters Additional parameters
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this3 = this;
	
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//region Check amount of certificates
				if ("certs" in this === false) return Promise.reject("No certificates attached to the BasicOCSPResponce");
				//endregion
	
				//region Global variables (used in "promises")
				var signerCert = null;
	
				var tbsView = new Uint8Array(this.tbsResponseData.tbs);
	
				var certIndex = -1;
	
				var sequence = Promise.resolve();
	
				var shaAlgorithm = "";
	
				var trustedCerts = [];
				//endregion
	
				//region Get input values
				if ("trustedCerts" in parameters) trustedCerts = parameters.trustedCerts;
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Find a correct hashing algorithm
				shaAlgorithm = (0, _common.getHashAlgorithm)(this.signatureAlgorithm);
				if (shaAlgorithm === "") return Promise.reject("Unsupported signature algorithm: " + this.signatureAlgorithm.algorithmId);
				//endregion
	
				//region Find correct value for "responderID"
				var responderType = 0;
				var responderId = {};
	
				if (this.tbsResponseData.responderID instanceof _RelativeDistinguishedNames2.default) // [1] Name
					{
						responderType = 0;
						responderId = this.tbsResponseData.responderID;
					} else {
					if (this.tbsResponseData.responderID instanceof asn1js.OctetString) // [2] KeyHash
						{
							responderType = 1;
							responderId = this.tbsResponseData.responderID;
						} else return Promise.reject("Wrong value for responderID");
				}
				//endregion
	
				//region Compare responderID with all certificates one-by-one
				if (responderType === 0) // By Name
					{
						sequence = sequence.then(function () {
							var _iteratorNormalCompletion4 = true;
							var _didIteratorError4 = false;
							var _iteratorError4 = undefined;
	
							try {
								for (var _iterator4 = _this3.certs.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
									var _step4$value = _slicedToArray(_step4.value, 2),
									    index = _step4$value[0],
									    certificate = _step4$value[1];
	
									if (certificate.subject.isEqual(responderId)) {
										certIndex = index;
										break;
									}
								}
							} catch (err) {
								_didIteratorError4 = true;
								_iteratorError4 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion4 && _iterator4.return) {
										_iterator4.return();
									}
								} finally {
									if (_didIteratorError4) {
										throw _iteratorError4;
									}
								}
							}
						});
					} else // By KeyHash
					{
						sequence = sequence.then(function () {
							return Promise.all(Array.from(_this3.certs, function (element) {
								return crypto.digest({ name: "sha-1" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));
							})).then(function (results) {
								var _iteratorNormalCompletion5 = true;
								var _didIteratorError5 = false;
								var _iteratorError5 = undefined;
	
								try {
									for (var _iterator5 = _this3.certs.entries()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
										var _step5$value = _slicedToArray(_step5.value, 2),
										    index = _step5$value[0],
										    certificate = _step5$value[1];
	
										if ((0, _pvutils.isEqualBuffer)(results[index], responderId.valueBlock.valueHex)) {
											certIndex = index;
											break;
										}
									}
								} catch (err) {
									_didIteratorError5 = true;
									_iteratorError5 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion5 && _iterator5.return) {
											_iterator5.return();
										}
									} finally {
										if (_didIteratorError5) {
											throw _iteratorError5;
										}
									}
								}
							});
						});
					}
				//endregion
	
				//region Make additional verification for signer's certificate
				/**
	    * Check CA flag for the certificate
	    * @param {Certificate} cert Certificate to find CA flag for
	    * @returns {*}
	    */
				function checkCA(cert) {
					//region Do not include signer's certificate
					if (cert.issuer.isEqual(signerCert.issuer) === true && cert.serialNumber.isEqual(signerCert.serialNumber) === true) return null;
					//endregion
	
					var isCA = false;
	
					var _iteratorNormalCompletion6 = true;
					var _didIteratorError6 = false;
					var _iteratorError6 = undefined;
	
					try {
						for (var _iterator6 = cert.extensions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
							var extension = _step6.value;
	
							if (extension.extnID === "2.5.29.19") // BasicConstraints
								{
									if ("cA" in extension.parsedValue) {
										if (extension.parsedValue.cA === true) isCA = true;
									}
								}
						}
					} catch (err) {
						_didIteratorError6 = true;
						_iteratorError6 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion6 && _iterator6.return) {
								_iterator6.return();
							}
						} finally {
							if (_didIteratorError6) {
								throw _iteratorError6;
							}
						}
					}
	
					if (isCA) return cert;
	
					return null;
				}
	
				sequence = sequence.then(function () {
					if (certIndex === -1) return Promise.reject("Correct certificate was not found in OCSP response");
	
					signerCert = _this3.certs[certIndex];
	
					return Promise.all(Array.from(_this3.certs, function (element) {
						return checkCA(element);
					})).then(function (promiseResults) {
						var additionalCerts = [];
						additionalCerts.push(signerCert);
	
						var _iteratorNormalCompletion7 = true;
						var _didIteratorError7 = false;
						var _iteratorError7 = undefined;
	
						try {
							for (var _iterator7 = promiseResults[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
								var promiseResult = _step7.value;
	
								if (promiseResult !== null) additionalCerts.push(promiseResult);
							}
						} catch (err) {
							_didIteratorError7 = true;
							_iteratorError7 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion7 && _iterator7.return) {
									_iterator7.return();
								}
							} finally {
								if (_didIteratorError7) {
									throw _iteratorError7;
								}
							}
						}
	
						var certChain = new _CertificateChainValidationEngine2.default({
							certs: additionalCerts,
							trustedCerts: trustedCerts
						});
	
						return certChain.verify().then(function (verificationResult) {
							if (verificationResult.result === true) return Promise.resolve();
	
							return Promise.reject("Validation of signer's certificate failed");
						}, function (error) {
							return Promise.reject("Validation of signer's certificate failed with error: " + (error instanceof Object ? error.resultMessage : error));
						});
					}, function (promiseError) {
						return Promise.reject("Error during checking certificates for CA flag: " + promiseError);
					});
				});
				//endregion
	
				//region Import public key from responder certificate
				sequence = sequence.then(function () {
					//region Get information about public key algorithm and default parameters for import
					var algorithmId = void 0;
					if (_this3.certs[certIndex].signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = _this3.certs[certIndex].signatureAlgorithm.algorithmId;else algorithmId = _this3.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmId;
	
					var algorithmObject = (0, _common.getAlgorithmByOID)(algorithmId);
					if ("name" in algorithmObject === false) return Promise.reject("Unsupported public key algorithm: " + algorithmId);
	
					var algorithmName = algorithmObject.name;
	
					var algorithm = (0, _common.getAlgorithmParameters)(algorithmName, "importkey");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmName === "ECDSA") {
						//region Get information about named curve
						if (_this3.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(_this3.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + _this3.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						//endregion
	
						algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
	
					var publicKeyInfoSchema = _this3.certs[certIndex].subjectPublicKeyInfo.toSchema();
					var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
					var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
	
					return crypto.importKey("spki", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);
				});
				//endregion
	
				//region Verifying TBS part of BasicOCSPResponce
				sequence = sequence.then(function (publicKey) {
					//region Get default algorithm parameters for verification
					var algorithm = (0, _common.getAlgorithmParameters)(publicKey.algorithm.name, "verify");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
					//endregion
	
					//region Special case for ECDSA signatures
					var signatureValue = _this3.signature.valueBlock.valueHex;
	
					if (publicKey.algorithm.name === "ECDSA") {
						var asn1 = asn1js.fromBER(signatureValue);
						signatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);
					}
					//endregion
	
					//region Special case for RSA-PSS
					if (publicKey.algorithm.name === "RSA-PSS") {
						var pssParameters = void 0;
	
						try {
							pssParameters = new _RSASSAPSSParams2.default({ schema: _this3.signatureAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject(ex);
						}
	
						if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
	
						var hashAlgo = "SHA-1";
	
						if ("hashAlgorithm" in pssParameters) {
							var hashAlgorithm = (0, _common.getAlgorithmByOID)(pssParameters.hashAlgorithm.algorithmId);
							if ("name" in hashAlgorithm === false) return Promise.reject("Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId);
	
							hashAlgo = hashAlgorithm.name;
						}
	
						algorithm.algorithm.hash.name = hashAlgo;
					}
					//endregion
	
					return crypto.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), tbsView);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbsResponseData":
						return new _ResponseData2.default();
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signature":
						return new asn1js.BitString();
					case "certs":
						return [];
					default:
						throw new Error("Invalid member name for BasicOCSPResponse class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "type":
						{
							var comparisonResult = _ResponseData2.default.compareWithDefault("tbs", memberValue.tbs) && _ResponseData2.default.compareWithDefault("responderID", memberValue.responderID) && _ResponseData2.default.compareWithDefault("producedAt", memberValue.producedAt) && _ResponseData2.default.compareWithDefault("responses", memberValue.responses);
	
							if ("responseExtensions" in memberValue) comparisonResult = comparisonResult && _ResponseData2.default.compareWithDefault("responseExtensions", memberValue.responseExtensions);
	
							return comparisonResult;
						}
					case "signatureAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "signature":
						return memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName));
					case "certs":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for BasicOCSPResponse class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//BasicOCSPResponse       ::= SEQUENCE {
				//    tbsResponseData      ResponseData,
				//    signatureAlgorithm   AlgorithmIdentifier,
				//    signature            BIT STRING,
				//    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [tbsResponseData]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signature]
	    * @property {string} [certs]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "BasicOCSPResponse",
					value: [_ResponseData2.default.schema(names.tbsResponseData || {
						names: {
							blockName: "BasicOCSPResponse.tbsResponseData"
						}
					}), _AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {
						names: {
							blockName: "BasicOCSPResponse.signatureAlgorithm"
						}
					}), new asn1js.BitString({ name: names.signature || "BasicOCSPResponse.signature" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: [new asn1js.Repeated({
								name: "BasicOCSPResponse.certs",
								value: _Certificate2.default.schema(names.certs || {})
							})]
						})]
					})]
				});
			}
		}]);
	
		return BasicOCSPResponse;
	}();
	//**************************************************************************************
	
	
	exports.default = BasicOCSPResponse;
	//# sourceMappingURL=BasicOCSPResponse.js.map

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _SingleResponse = __webpack_require__(457);
	
	var _SingleResponse2 = _interopRequireDefault(_SingleResponse);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var ResponseData = function () {
		//**********************************************************************************
		/**
	  * Constructor for ResponseData class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ResponseData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ResponseData);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description tbs
	   */
			this.tbs = (0, _pvutils.getParametersValue)(parameters, "tbs", ResponseData.defaultValues("tbs"));
			/**
	   * @type {Object}
	   * @description responderID
	   */
			this.responderID = (0, _pvutils.getParametersValue)(parameters, "responderID", ResponseData.defaultValues("responderID"));
			/**
	   * @type {Date}
	   * @description producedAt
	   */
			this.producedAt = (0, _pvutils.getParametersValue)(parameters, "producedAt", ResponseData.defaultValues("producedAt"));
			/**
	   * @type {Array.<SingleResponse>}
	   * @description responses
	   */
			this.responses = (0, _pvutils.getParametersValue)(parameters, "responses", ResponseData.defaultValues("responses"));
	
			if ("responseExtensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description responseExtensions
	    */
				this.responseExtensions = (0, _pvutils.getParametersValue)(parameters, "responseExtensions", ResponseData.defaultValues("responseExtensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ResponseData, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ocsp.ResponseData");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbs = asn1.result.ResponseData.valueBeforeDecode;
	
				if ("ResponseData.version" in asn1.result) this.version = asn1.result["ResponseData.version"].valueBlock.valueDec;
	
				if (asn1.result["ResponseData.responderID"].idBlock.tagNumber === 1) this.responderID = new _RelativeDistinguishedNames2.default({ schema: asn1.result["ResponseData.responderID"].valueBlock.value[0] });else this.responderID = asn1.result["ResponseData.responderID"].valueBlock.value[0]; // OCTETSTRING
	
				this.producedAt = asn1.result["ResponseData.producedAt"].toDate();
				this.responses = Array.from(asn1.result["ResponseData.responses"], function (element) {
					return new _SingleResponse2.default({ schema: element });
				});
	
				if ("ResponseData.responseExtensions" in asn1.result) this.responseExtensions = Array.from(asn1.result["ResponseData.responseExtensions"].valueBlock.value, function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Decode stored TBS value 
				var tbsSchema = void 0;
	
				if (encodeFlag === false) {
					if (this.tbs.length === 0) // No stored certificate TBS part
						return ResponseData.schema();
	
					tbsSchema = asn1js.fromBER(this.tbs).result;
				}
				//endregion 
				//region Create TBS schema via assembling from TBS parts
				else {
						var outputArray = [];
	
						if ("version" in this) {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 0 // [0]
								},
								value: [new asn1js.Integer({ value: this.version })]
							}));
						}
	
						if (this.responderID instanceof _RelativeDistinguishedNames2.default) {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: [this.responderID.toSchema()]
							}));
						} else {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 2 // [2]
								},
								value: [this.responderID]
							}));
						}
	
						outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));
	
						outputArray.push(new asn1js.Sequence({
							value: Array.from(this.responses, function (element) {
								return element.toSchema();
							})
						}));
	
						if ("responseExtensions" in this) {
							outputArray.push(new asn1js.Sequence({
								value: Array.from(this.responseExtensions, function (element) {
									return element.toSchema();
								})
							}));
						}
	
						tbsSchema = new asn1js.Sequence({
							value: outputArray
						});
					}
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return tbsSchema;
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {};
	
				if ("version" in this) _object.version = this.version;
	
				if ("responderID" in this) _object.responderID = this.responderID;
	
				if ("producedAt" in this) _object.producedAt = this.producedAt;
	
				if ("responses" in this) _object.responses = Array.from(this.responses, function (element) {
					return element.toJSON();
				});
	
				if ("responseExtensions" in this) _object.responseExtensions = Array.from(this.responseExtensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbs":
						return new ArrayBuffer(0);
					case "responderID":
						return {};
					case "producedAt":
						return new Date(0, 0, 0);
					case "responses":
					case "responseExtensions":
						return [];
					default:
						throw new Error("Invalid member name for ResponseData class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "tbs":
						return memberValue.byteLength === 0;
					case "responderID":
						return Object.keys(memberValue).length === 0;
					case "producedAt":
						return memberValue === ResponseData.defaultValues(memberName);
					case "responses":
					case "responseExtensions":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for ResponseData class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//ResponseData ::= SEQUENCE {
				//    version              [0] EXPLICIT Version DEFAULT v1,
				//    responderID              ResponderID,
				//    producedAt               GeneralizedTime,
				//    responses                SEQUENCE OF SingleResponse,
				//    responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [ResponseDataByName]
	    * @property {string} [ResponseDataByKey]
	    * @property {string} [producedAt]
	    * @property {string} [response]
	    * @property {string} [extensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "ResponseData",
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Integer({ name: names.version || "ResponseData.version" })]
					}), new asn1js.Choice({
						value: [new asn1js.Constructed({
							name: names.responderID || "ResponseData.responderID",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 1 // [1]
							},
							value: [_RelativeDistinguishedNames2.default.schema(names.ResponseDataByName || {
								names: {
									blockName: "ResponseData.byName"
								}
							})]
						}), new asn1js.Constructed({
							name: names.responderID || "ResponseData.responderID",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 2 // [2]
							},
							value: [new asn1js.OctetString({ name: names.ResponseDataByKey || "ResponseData.byKey" })]
						})]
					}), new asn1js.GeneralizedTime({ name: names.producedAt || "ResponseData.producedAt" }), new asn1js.Sequence({
						value: [new asn1js.Repeated({
							name: "ResponseData.responses",
							value: _SingleResponse2.default.schema(names.response || {})
						})]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [_Extensions2.default.schema(names.extensions || {
							names: {
								blockName: "ResponseData.responseExtensions"
							}
						})]
					}) // EXPLICIT SEQUENCE value
					]
				});
			}
		}]);
	
		return ResponseData;
	}();
	//**************************************************************************************
	
	
	exports.default = ResponseData;
	//# sourceMappingURL=ResponseData.js.map

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _CertID = __webpack_require__(458);
	
	var _CertID2 = _interopRequireDefault(_CertID);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var SingleResponse = function () {
		//**********************************************************************************
		/**
	  * Constructor for SingleResponse class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SingleResponse() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SingleResponse);
	
			//region Internal properties of the object
			/**
	   * @type {CertID}
	   * @description certID
	   */
			this.certID = (0, _pvutils.getParametersValue)(parameters, "certID", SingleResponse.defaultValues("certID"));
			/**
	   * @type {Object}
	   * @description certStatus
	   */
			this.certStatus = (0, _pvutils.getParametersValue)(parameters, "certStatus", SingleResponse.defaultValues("certStatus"));
			/**
	   * @type {Date}
	   * @description thisUpdate
	   */
			this.thisUpdate = (0, _pvutils.getParametersValue)(parameters, "thisUpdate", SingleResponse.defaultValues("thisUpdate"));
	
			if ("nextUpdate" in parameters)
				/**
	    * @type {Date}
	    * @description nextUpdate
	    */
				this.nextUpdate = (0, _pvutils.getParametersValue)(parameters, "nextUpdate", SingleResponse.defaultValues("nextUpdate"));
	
			if ("singleExtensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description singleExtensions
	    */
				this.singleExtensions = (0, _pvutils.getParametersValue)(parameters, "singleExtensions", SingleResponse.defaultValues("singleExtensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SingleResponse, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SingleResponse.schema({
					names: {
						certID: {
							names: {
								blockName: "certID"
							}
						},
						certStatus: "certStatus",
						thisUpdate: "thisUpdate",
						nextUpdate: "nextUpdate",
						singleExtensions: {
							names: {
								blockName: "singleExtensions"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SingleResponse");
				//endregion
	
				//region Get internal properties from parsed schema
				this.certID = new _CertID2.default({ schema: asn1.result.certID });
				this.certStatus = asn1.result.certStatus;
				this.thisUpdate = asn1.result.thisUpdate.toDate();
				if ("nextUpdate" in asn1.result) this.nextUpdate = asn1.result.nextUpdate.toDate();
	
				if ("singleExtensions" in asn1.result) this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create value array for output sequence
				var outputArray = [];
	
				outputArray.push(this.certID.toSchema());
				outputArray.push(this.certStatus);
				outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));
				if ("nextUpdate" in this) outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.nextUpdate }));
	
				if ("singleExtensions" in this) {
					outputArray.push(new asn1js.Sequence({
						value: Array.from(this.singleExtensions, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					certID: this.certID.toJSON(),
					certStatus: this.certStatus.toJSON(),
					thisUpdate: this.thisUpdate
				};
	
				if ("nextUpdate" in this) _object.nextUpdate = this.nextUpdate;
	
				if ("singleExtensions" in this) _object.singleExtensions = Array.from(this.singleExtensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "certID":
						return new _CertID2.default();
					case "certStatus":
						return {};
					case "thisUpdate":
					case "nextUpdate":
						return new Date(0, 0, 0);
					case "singleExtensions":
						return [];
					default:
						throw new Error("Invalid member name for SingleResponse class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "certID":
						return _CertID2.default.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && _CertID2.default.compareWithDefault("issuerNameHash", memberValue.issuerNameHash) && _CertID2.default.compareWithDefault("issuerKeyHash", memberValue.issuerKeyHash) && _CertID2.default.compareWithDefault("serialNumber", memberValue.serialNumber);
					case "certStatus":
						return Object.keys(memberValue).length === 0;
					case "thisUpdate":
					case "nextUpdate":
						return memberValue === SingleResponse.defaultValues(memberName);
					default:
						throw new Error("Invalid member name for SingleResponse class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SingleResponse ::= SEQUENCE {
				//    certID                       CertID,
				//    certStatus                   CertStatus,
				//    thisUpdate                   GeneralizedTime,
				//    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
				//    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
				//
				//CertStatus ::= CHOICE {
				//    good        [0]     IMPLICIT NULL,
				//    revoked     [1]     IMPLICIT RevokedInfo,
				//    unknown     [2]     IMPLICIT UnknownInfo }
				//
				//RevokedInfo ::= SEQUENCE {
				//    revocationTime              GeneralizedTime,
				//    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
				//
				//UnknownInfo ::= NULL
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [certID]
	    * @property {string} [certStatus]
	    * @property {string} [thisUpdate]
	    * @property {string} [nextUpdate]
	    * @property {string} [singleExtensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_CertID2.default.schema(names.certID || {}), new asn1js.Choice({
						value: [new asn1js.Primitive({
							name: names.certStatus || "",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							lenBlockLength: 1 // The length contains one byte 0x00
						}), // IMPLICIT NULL (no "value_block")
						new asn1js.Constructed({
							name: names.certStatus || "",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 1 // [1]
							},
							value: [new asn1js.GeneralizedTime(), new asn1js.Constructed({
								optional: true,
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 0 // [0]
								},
								value: [new asn1js.Enumerated()]
							})]
						}), new asn1js.Primitive({
							name: names.certStatus || "",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 2 // [2]
							},
							lenBlock: { length: 1 }
						}) // IMPLICIT NULL (no "value_block")
						]
					}), new asn1js.GeneralizedTime({ name: names.thisUpdate || "" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.GeneralizedTime({ name: names.nextUpdate || "" })]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [_Extensions2.default.schema(names.singleExtensions || {})]
					}) // EXPLICIT SEQUENCE value
					]
				});
			}
		}]);
	
		return SingleResponse;
	}();
	//**************************************************************************************
	
	
	exports.default = SingleResponse;
	//# sourceMappingURL=SingleResponse.js.map

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var CertID = function () {
		//**********************************************************************************
		/**
	  * Constructor for CertID class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertID() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertID);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description hashAlgorithm
	   */
			this.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, "hashAlgorithm", CertID.defaultValues("hashAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description issuerNameHash
	   */
			this.issuerNameHash = (0, _pvutils.getParametersValue)(parameters, "issuerNameHash", CertID.defaultValues("issuerNameHash"));
			/**
	   * @type {OctetString}
	   * @description issuerKeyHash
	   */
			this.issuerKeyHash = (0, _pvutils.getParametersValue)(parameters, "issuerKeyHash", CertID.defaultValues("issuerKeyHash"));
			/**
	   * @type {Integer}
	   * @description serialNumber
	   */
			this.serialNumber = (0, _pvutils.getParametersValue)(parameters, "serialNumber", CertID.defaultValues("serialNumber"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertID, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CertID.schema({
					names: {
						hashAlgorithm: "hashAlgorithm",
						issuerNameHash: "issuerNameHash",
						issuerKeyHash: "issuerKeyHash",
						serialNumber: "serialNumber"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CertID");
				//endregion
	
				//region Get internal properties from parsed schema
				this.hashAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.hashAlgorithm });
				this.issuerNameHash = asn1.result.issuerNameHash;
				this.issuerKeyHash = asn1.result.issuerKeyHash;
				this.serialNumber = asn1.result.serialNumber;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.hashAlgorithm.toSchema(), this.issuerNameHash, this.issuerKeyHash, this.serialNumber]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					hashAlgorithm: this.hashAlgorithm.toJSON(),
					issuerNameHash: this.issuerNameHash.toJSON(),
					issuerKeyHash: this.issuerKeyHash.toJSON(),
					serialNumber: this.serialNumber.toJSON()
				};
			}
	
			//**********************************************************************************
			/**
	   * Check that two "CertIDs" are equal
	   * @param {CertID} certificateID Identifier of the certificate to be checked
	   * @returns {boolean}
	   */
	
		}, {
			key: "isEqual",
			value: function isEqual(certificateID) {
				//region Check "hashAlgorithm"
				if (!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId) return false;
				//endregion
	
				//region Check "issuerNameHash"
				if ((0, _pvutils.isEqualBuffer)(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false) return false;
				//endregion
	
				//region Check "issuerKeyHash"
				if ((0, _pvutils.isEqualBuffer)(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false) return false;
				//endregion
	
				//region Check "serialNumber"
				if (!this.serialNumber.isEqual(certificateID.serialNumber)) return false;
				//endregion
	
				return true;
			}
	
			//**********************************************************************************
			/**
	   * Making OCSP certificate identifier for specific certificate
	   * @param {Certificate} certificate Certificate making OCSP Request for
	   * @param {Object} parameters Additional parameters
	   * @returns {Promise}
	   */
	
		}, {
			key: "createForCertificate",
			value: function createForCertificate(certificate, parameters) {
				var _this = this;
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var issuerCertificate = void 0;
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Check input parameters
				if ("hashAlgorithm" in parameters === false) return Promise.reject("Parameter \"hashAlgorithm\" is mandatory for \"OCSP_REQUEST.createForCertificate\"");
	
				var hashOID = (0, _common.getOIDByAlgorithm)({ name: parameters.hashAlgorithm });
				if (hashOID === "") return Promise.reject("Incorrect \"hashAlgorithm\": " + this.hashAlgorithm);
	
				this.hashAlgorithm = new _AlgorithmIdentifier2.default({
					algorithmId: hashOID,
					algorithmParams: new asn1js.Null()
				});
	
				if ("issuerCertificate" in parameters) issuerCertificate = parameters.issuerCertificate;else return Promise.reject("Parameter \"issuerCertificate\" is mandatory for \"OCSP_REQUEST.createForCertificate\"");
				//endregion
	
				//region Initialize "serialNumber" field
				this.serialNumber = certificate.serialNumber;
				//endregion
	
				//region Create "issuerNameHash"
				sequence = sequence.then(function () {
					return crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				//region Create "issuerKeyHash"
				sequence = sequence.then(function (result) {
					_this.issuerNameHash = new asn1js.OctetString({ valueHex: result });
	
					var issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;
	
					return crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);
				}, function (error) {
					return Promise.reject(error);
				}).then(function (result) {
					_this.issuerKeyHash = new asn1js.OctetString({ valueHex: result });
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "hashAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "issuerNameHash":
					case "issuerKeyHash":
						return new asn1js.OctetString();
					case "serialNumber":
						return new asn1js.Integer();
					default:
						throw new Error("Invalid member name for CertID class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "hashAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "issuerNameHash":
					case "issuerKeyHash":
					case "serialNumber":
						return memberValue.isEqual(CertID.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for CertID class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CertID          ::=     SEQUENCE {
				//    hashAlgorithm       AlgorithmIdentifier,
				//    issuerNameHash      OCTET STRING, -- Hash of issuer's DN
				//    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key
				//    serialNumber        CertificateSerialNumber }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [hashAlgorithm]
	    * @property {string} [hashAlgorithmObject]
	    * @property {string} [issuerNameHash]
	    * @property {string} [issuerKeyHash]
	    * @property {string} [serialNumber]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.hashAlgorithmObject || {
						names: {
							blockName: names.hashAlgorithm || ""
						}
					}), new asn1js.OctetString({ name: names.issuerNameHash || "" }), new asn1js.OctetString({ name: names.issuerKeyHash || "" }), new asn1js.Integer({ name: names.serialNumber || "" })]
				});
			}
		}]);
	
		return CertID;
	}();
	//**************************************************************************************
	
	
	exports.default = CertID;
	//# sourceMappingURL=CertID.js.map

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _CertificateRevocationList = __webpack_require__(429);
	
	var _CertificateRevocationList2 = _interopRequireDefault(_CertificateRevocationList);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _GeneratorsDriver = __webpack_require__(460);
	
	var _GeneratorsDriver2 = _interopRequireDefault(_GeneratorsDriver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	var CertificateChainValidationEngine = function () {
		//**********************************************************************************
		/**
	  * Constructor for CertificateChainValidationEngine class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertificateChainValidationEngine() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertificateChainValidationEngine);
	
			//region Internal properties of the object
			/**
	   * @type {Array.<Certificate>}
	   * @description Array of pre-defined trusted (by user) certificates
	   */
			this.trustedCerts = (0, _pvutils.getParametersValue)(parameters, "trustedCerts", CertificateChainValidationEngine.defaultValues("trustedCerts"));
			/**
	   * @type {Array.<Certificate>}
	   * @description Array with certificate chain. Could be only one end-user certificate in there!
	   */
			this.certs = (0, _pvutils.getParametersValue)(parameters, "certs", CertificateChainValidationEngine.defaultValues("certs"));
			/**
	   * @type {Array.<CertificateRevocationList>}
	   * @description Array of all CRLs for all certificates from certificate chain
	   */
			this.crls = (0, _pvutils.getParametersValue)(parameters, "crls", CertificateChainValidationEngine.defaultValues("crls"));
			/**
	   * @type {Array}
	   * @description Array of all OCSP responses
	   */
			this.ocsps = (0, _pvutils.getParametersValue)(parameters, "ocsps", CertificateChainValidationEngine.defaultValues("ocsps"));
			/**
	   * @type {Date}
	   * @description The date at which the check would be
	   */
			this.checkDate = (0, _pvutils.getParametersValue)(parameters, "checkDate", CertificateChainValidationEngine.defaultValues("checkDate"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertificateChainValidationEngine, [{
			key: "sort",
	
			//**********************************************************************************
			value: function sort() {
				var _marked = [findIssuer, buildPath, findCRL, findOCSP, checkForCA, basicCheck].map(regeneratorRuntime.mark);
	
				//region Initial variables
				var localCerts = [];
				var _this = this;
				//endregion
	
				//region Finding certificate issuer
				function findIssuer(certificate, index) {
					var result, verificationResult, i, _verificationResult;
	
					return regeneratorRuntime.wrap(function findIssuer$(_context) {
						while (1) {
							switch (_context.prev = _context.next) {
								case 0:
									result = [];
	
									//region Speed-up searching in case of self-signed certificates
	
									if (!certificate.subject.isEqual(certificate.issuer)) {
										_context.next = 12;
										break;
									}
	
									_context.prev = 2;
									_context.next = 5;
									return certificate.verify();
	
								case 5:
									verificationResult = _context.sent;
	
									if (!(verificationResult === true)) {
										_context.next = 8;
										break;
									}
	
									return _context.abrupt("return", [index]);
	
								case 8:
									_context.next = 12;
									break;
	
								case 10:
									_context.prev = 10;
									_context.t0 = _context["catch"](2);
	
								case 12:
									i = 0;
	
								case 13:
									if (!(i < localCerts.length)) {
										_context.next = 26;
										break;
									}
	
									_context.prev = 14;
									_context.next = 17;
									return certificate.verify(localCerts[i]);
	
								case 17:
									_verificationResult = _context.sent;
	
									if (_verificationResult === true) result.push(i);
									_context.next = 23;
									break;
	
								case 21:
									_context.prev = 21;
									_context.t1 = _context["catch"](14);
	
								case 23:
									i++;
									_context.next = 13;
									break;
	
								case 26:
									return _context.abrupt("return", result.length ? result : [-1]);
	
								case 27:
								case "end":
									return _context.stop();
							}
						}
					}, _marked[0], this, [[2, 10], [14, 21]]);
				}
				//endregion
	
				//region Building certificate path
				function buildPath(certificate, index) {
					var result, checkUnique, findIssuerResult, buildPathResult, i, copy, _i, _buildPathResult, j, _copy;
	
					return regeneratorRuntime.wrap(function buildPath$(_context2) {
						while (1) {
							switch (_context2.prev = _context2.next) {
								case 0:
									checkUnique = function checkUnique(array) {
										var unique = true;
	
										for (var i = 0; i < array.length; i++) {
											for (var j = 0; j < array.length; j++) {
												if (j === i) continue;
	
												if (array[i] === array[j]) {
													unique = false;
													break;
												}
											}
	
											if (!unique) break;
										}
	
										return unique;
									};
	
									result = [];
	
									//region Aux function checking array for unique elements
	
									_context2.next = 4;
									return findIssuer(certificate, index);
	
								case 4:
									findIssuerResult = _context2.sent;
	
									if (!(findIssuerResult.length === 1 && findIssuerResult[0] === -1)) {
										_context2.next = 7;
										break;
									}
	
									throw new Error("Incorrect result");
	
								case 7:
									if (!(findIssuerResult.length === 1)) {
										_context2.next = 17;
										break;
									}
	
									if (!(findIssuerResult[0] === index)) {
										_context2.next = 11;
										break;
									}
	
									result.push(findIssuerResult);
									return _context2.abrupt("return", result);
	
								case 11:
									_context2.next = 13;
									return buildPath(localCerts[findIssuerResult[0]], findIssuerResult[0]);
	
								case 13:
									buildPathResult = _context2.sent;
	
	
									for (i = 0; i < buildPathResult.length; i++) {
										copy = buildPathResult[i].slice();
	
										copy.splice(0, 0, findIssuerResult[0]);
	
										if (checkUnique(copy)) result.push(copy);else result.push(buildPathResult[i]);
									}
									_context2.next = 29;
									break;
	
								case 17:
									_i = 0;
	
								case 18:
									if (!(_i < findIssuerResult.length)) {
										_context2.next = 29;
										break;
									}
	
									if (!(findIssuerResult[_i] === index)) {
										_context2.next = 22;
										break;
									}
	
									result.push([findIssuerResult[_i]]);
									return _context2.abrupt("continue", 26);
	
								case 22:
									_context2.next = 24;
									return buildPath(localCerts[findIssuerResult[_i]], findIssuerResult[_i]);
	
								case 24:
									_buildPathResult = _context2.sent;
	
	
									for (j = 0; j < _buildPathResult.length; j++) {
										_copy = _buildPathResult[j].slice();
	
										_copy.splice(0, 0, findIssuerResult[_i]);
	
										if (checkUnique(_copy)) result.push(_copy);else result.push(_buildPathResult[j]);
									}
	
								case 26:
									_i++;
									_context2.next = 18;
									break;
	
								case 29:
									return _context2.abrupt("return", result);
	
								case 30:
								case "end":
									return _context2.stop();
							}
						}
					}, _marked[1], this);
				}
	
				//endregion
	
				//region Find CRL for specific certificate
				function findCRL(certificate) {
					var issuerCertificates, crls, crlsAndCertificates, i, j, result;
					return regeneratorRuntime.wrap(function findCRL$(_context3) {
						while (1) {
							switch (_context3.prev = _context3.next) {
								case 0:
									//region Initial variables
									issuerCertificates = [];
									crls = [];
									crlsAndCertificates = [];
									//endregion
	
									//region Find all possible CRL issuers
	
									issuerCertificates.push.apply(issuerCertificates, _toConsumableArray(localCerts.filter(function (element) {
										return certificate.issuer.isEqual(element.subject);
									})));
	
									if (!(issuerCertificates.length === 0)) {
										_context3.next = 6;
										break;
									}
	
									return _context3.abrupt("return", {
										status: 1,
										statusMessage: "No certificate's issuers"
									});
	
								case 6:
									//endregion
	
									//region Find all CRLs for crtificate's issuer
									crls.push.apply(crls, _toConsumableArray(_this.crls.filter(function (element) {
										return element.issuer.isEqual(certificate.issuer);
									})));
	
									if (!(crls.length === 0)) {
										_context3.next = 9;
										break;
									}
	
									return _context3.abrupt("return", {
										status: 1,
										statusMessage: "No CRLs for specific certificate issuer"
									});
	
								case 9:
									i = 0;
	
								case 10:
									if (!(i < crls.length)) {
										_context3.next = 32;
										break;
									}
	
									if (!(crls[i].nextUpdate.value < _this.checkDate)) {
										_context3.next = 13;
										break;
									}
	
									return _context3.abrupt("continue", 29);
	
								case 13:
									j = 0;
	
								case 14:
									if (!(j < issuerCertificates.length)) {
										_context3.next = 29;
										break;
									}
	
									_context3.prev = 15;
									_context3.next = 18;
									return crls[i].verify({ issuerCertificate: issuerCertificates[j] });
	
								case 18:
									result = _context3.sent;
	
									if (!result) {
										_context3.next = 22;
										break;
									}
	
									crlsAndCertificates.push({
										crl: crls[i],
										certificate: issuerCertificates[j]
									});
	
									return _context3.abrupt("break", 29);
	
								case 22:
									_context3.next = 26;
									break;
	
								case 24:
									_context3.prev = 24;
									_context3.t0 = _context3["catch"](15);
	
								case 26:
									j++;
									_context3.next = 14;
									break;
	
								case 29:
									i++;
									_context3.next = 10;
									break;
	
								case 32:
									if (!crlsAndCertificates.length) {
										_context3.next = 34;
										break;
									}
	
									return _context3.abrupt("return", {
										status: 0,
										statusMessage: "",
										result: crlsAndCertificates
									});
	
								case 34:
									return _context3.abrupt("return", {
										status: 1,
										statusMessage: "No valid CRLs found"
									});
	
								case 35:
								case "end":
									return _context3.stop();
							}
						}
					}, _marked[2], this, [[15, 24]]);
				}
	
				//endregion
	
				//region Find OCSP for specific certificate
				function findOCSP(certificate, issuerCertificate) {
					var hashAlgorithm, i, result;
					return regeneratorRuntime.wrap(function findOCSP$(_context4) {
						while (1) {
							switch (_context4.prev = _context4.next) {
								case 0:
									//region Get hash algorithm from certificate
									hashAlgorithm = (0, _common.getAlgorithmByOID)(certificate.signatureAlgorithm.algorithmId);
	
									if (!("name" in hashAlgorithm === false)) {
										_context4.next = 3;
										break;
									}
	
									return _context4.abrupt("return", 1);
	
								case 3:
									if (!("hash" in hashAlgorithm === false)) {
										_context4.next = 5;
										break;
									}
	
									return _context4.abrupt("return", 1);
	
								case 5:
									i = 0;
	
								case 6:
									if (!(i < _this.ocsps.length)) {
										_context4.next = 17;
										break;
									}
	
									_context4.next = 9;
									return _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);
	
								case 9:
									result = _context4.sent;
	
									if (!result.isForCertificate) {
										_context4.next = 14;
										break;
									}
	
									if (!(result.status === 0)) {
										_context4.next = 13;
										break;
									}
	
									return _context4.abrupt("return", 0);
	
								case 13:
									return _context4.abrupt("return", 1);
	
								case 14:
									i++;
									_context4.next = 6;
									break;
	
								case 17:
									return _context4.abrupt("return", 2);
	
								case 18:
								case "end":
									return _context4.stop();
							}
						}
					}, _marked[3], this);
				}
	
				//endregion
	
				//region Check for certificate to be CA
				function checkForCA(certificate) {
					var needToCheckCRL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
					var isCA, mustBeCA, keyUsagePresent, cRLSign, j, view;
					return regeneratorRuntime.wrap(function checkForCA$(_context5) {
						while (1) {
							switch (_context5.prev = _context5.next) {
								case 0:
									//region Initial variables
									isCA = false;
									mustBeCA = false;
									keyUsagePresent = false;
									cRLSign = false;
									//endregion
	
									if (!("extensions" in certificate)) {
										_context5.next = 20;
										break;
									}
	
									j = 0;
	
								case 6:
									if (!(j < certificate.extensions.length)) {
										_context5.next = 14;
										break;
									}
	
									if (!(certificate.extensions[j].critical === true && "parsedValue" in certificate.extensions[j] === false)) {
										_context5.next = 9;
										break;
									}
	
									return _context5.abrupt("return", {
										result: false,
										resultCode: 6,
										resultMessage: "Unable to parse critical certificate extension: " + certificate.extensions[j].extnID
									});
	
								case 9:
	
									if (certificate.extensions[j].extnID === "2.5.29.15") // KeyUsage
										{
											keyUsagePresent = true;
	
											view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);
	
	
											if ((view[0] & 0x04) === 0x04) // Set flag "keyCertSign"
												mustBeCA = true;
	
											if ((view[0] & 0x02) === 0x02) // Set flag "cRLSign"
												cRLSign = true;
										}
	
									if (certificate.extensions[j].extnID === "2.5.29.19") // BasicConstraints
										{
											if ("cA" in certificate.extensions[j].parsedValue) {
												if (certificate.extensions[j].parsedValue.cA === true) isCA = true;
											}
										}
	
								case 11:
									j++;
									_context5.next = 6;
									break;
	
								case 14:
									if (!(mustBeCA === true && isCA === false)) {
										_context5.next = 16;
										break;
									}
	
									return _context5.abrupt("return", {
										result: false,
										resultCode: 3,
										resultMessage: "Unable to build certificate chain - using \"keyCertSign\" flag set without BasicConstaints"
									});
	
								case 16:
									if (!(keyUsagePresent === true && isCA === true && mustBeCA === false)) {
										_context5.next = 18;
										break;
									}
	
									return _context5.abrupt("return", {
										result: false,
										resultCode: 4,
										resultMessage: "Unable to build certificate chain - \"keyCertSign\" flag was not set"
									});
	
								case 18:
									if (!(isCA === true && keyUsagePresent === true && needToCheckCRL && cRLSign === false)) {
										_context5.next = 20;
										break;
									}
	
									return _context5.abrupt("return", {
										result: false,
										resultCode: 5,
										resultMessage: "Unable to build certificate chain - intermediate certificate must have \"cRLSign\" key usage flag"
									});
	
								case 20:
									if (!(isCA === false)) {
										_context5.next = 22;
										break;
									}
	
									return _context5.abrupt("return", {
										result: false,
										resultCode: 7,
										resultMessage: "Unable to build certificate chain - more than one possible end-user certificate"
									});
	
								case 22:
									return _context5.abrupt("return", {
										result: true,
										resultCode: 0,
										resultMessage: ""
									});
	
								case 23:
								case "end":
									return _context5.stop();
							}
						}
					}, _marked[4], this);
				}
	
				//endregion
	
				//region Basic check for certificate path
				function basicCheck(path, checkDate) {
					var i, _i2, _i3, ocspResult, crlResult, j, isCertificateRevoked, isCertificateCA, _i4, result;
	
					return regeneratorRuntime.wrap(function basicCheck$(_context6) {
						while (1) {
							switch (_context6.prev = _context6.next) {
								case 0:
									i = 0;
	
								case 1:
									if (!(i < path.length)) {
										_context6.next = 7;
										break;
									}
	
									if (!(path[i].notBefore.value > checkDate || path[i].notAfter.value < checkDate)) {
										_context6.next = 4;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 8,
										resultMessage: "Certificate validity period is out of checking date"
									});
	
								case 4:
									i++;
									_context6.next = 1;
									break;
	
								case 7:
									if (!(path.length < 2)) {
										_context6.next = 9;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 9,
										resultMessage: "Too short certificate path"
									});
	
								case 9:
									_i2 = path.length - 2;
	
								case 10:
									if (!(_i2 >= 0)) {
										_context6.next = 17;
										break;
									}
	
									if (!(path[_i2].issuer.isEqual(path[_i2].subject) === false)) {
										_context6.next = 14;
										break;
									}
	
									if (!(path[_i2].issuer.isEqual(path[_i2 + 1].subject) === false)) {
										_context6.next = 14;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 10,
										resultMessage: "Incorrect name chaining"
									});
	
								case 14:
									_i2--;
									_context6.next = 10;
									break;
	
								case 17:
									if (!(_this.crls.length !== 0 || _this.ocsps.length !== 0)) {
										_context6.next = 58;
										break;
									}
	
									_i3 = 0;
	
								case 19:
									if (!(_i3 < path.length - 2)) {
										_context6.next = 58;
										break;
									}
	
									//region Initial variables
									ocspResult = void 0;
									crlResult = void 0;
									//endregion
	
									//region Check OCSPs first
	
									if (!(_this.ocsps.length !== 0)) {
										_context6.next = 32;
										break;
									}
	
									_context6.next = 25;
									return findOCSP(path[_i3], path[_i3 + 1]);
	
								case 25:
									ocspResult = _context6.sent;
									_context6.t0 = ocspResult;
									_context6.next = _context6.t0 === 0 ? 29 : _context6.t0 === 1 ? 30 : _context6.t0 === 2 ? 31 : 32;
									break;
	
								case 29:
									return _context6.abrupt("continue", 55);
	
								case 30:
									return _context6.abrupt("return", {
										result: false,
										resultCode: 12,
										resultMessage: "One of certificates was revoked via OCSP response"
									});
	
								case 31:
									return _context6.abrupt("break", 32);
	
								case 32:
									if (!(_this.crls.length !== 0)) {
										_context6.next = 53;
										break;
									}
	
									_context6.next = 35;
									return findCRL(path[_i3]);
	
								case 35:
									crlResult = _context6.sent;
	
									if (!crlResult.status) {
										_context6.next = 38;
										break;
									}
	
									throw {
										result: false,
										resultCode: 11,
										resultMessage: "No revocation values found for one of certificates: " + crlResult.statusMessage
									};
	
								case 38:
									j = 0;
	
								case 39:
									if (!(j < crlResult.result.length)) {
										_context6.next = 51;
										break;
									}
	
									//region Check that the CRL issuer certificate have not been revoked
									isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[_i3]);
	
									if (!isCertificateRevoked) {
										_context6.next = 43;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 12,
										resultMessage: "One of certificates had been revoked"
									});
	
								case 43:
									_context6.next = 45;
									return checkForCA(crlResult.result[j].certificate, true);
	
								case 45:
									isCertificateCA = _context6.sent;
	
									if (!(isCertificateCA.result === false)) {
										_context6.next = 48;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 13,
										resultMessage: "CRL issuer certificate is not a CA certificate or does not have crlSign flag"
									});
	
								case 48:
									j++;
									_context6.next = 39;
									break;
	
								case 51:
									_context6.next = 55;
									break;
	
								case 53:
									if (!(ocspResult === 2)) {
										_context6.next = 55;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 11,
										resultMessage: "No revocation values found for one of certificates"
									});
	
								case 55:
									_i3++;
									_context6.next = 19;
									break;
	
								case 58:
									_i4 = 1;
	
								case 59:
									if (!(_i4 < path.length)) {
										_context6.next = 68;
										break;
									}
	
									_context6.next = 62;
									return checkForCA(path[_i4]);
	
								case 62:
									result = _context6.sent;
	
									if (!(result.result === false)) {
										_context6.next = 65;
										break;
									}
	
									return _context6.abrupt("return", {
										result: false,
										resultCode: 14,
										resultMessage: "One of intermediate certificates is not a CA certificate"
									});
	
								case 65:
									_i4++;
									_context6.next = 59;
									break;
	
								case 68:
									return _context6.abrupt("return", {
										result: true
									});
	
								case 69:
								case "end":
									return _context6.stop();
							}
						}
					}, _marked[5], this);
				}
				//endregion
	
				return (0, _GeneratorsDriver2.default)(regeneratorRuntime.mark(function generatorFunction() {
					var i, j, result, certificatePath, _i5, found, _j, certificate, k, shortestLength, shortestIndex, _i6, _i7;
	
					return regeneratorRuntime.wrap(function generatorFunction$(_context7) {
						while (1) {
							switch (_context7.prev = _context7.next) {
								case 0:
									//region Initialize "localCerts" by value of "_this.certs" + "_this.trustedCerts" arrays
									localCerts.push.apply(localCerts, _toConsumableArray(_this.trustedCerts));
									localCerts.push.apply(localCerts, _toConsumableArray(_this.certs));
									//endregion
	
									//region Check all certificates for been unique
									i = 0;
	
								case 3:
									if (!(i < localCerts.length)) {
										_context7.next = 18;
										break;
									}
	
									j = 0;
	
								case 5:
									if (!(j < localCerts.length)) {
										_context7.next = 15;
										break;
									}
	
									if (!(i === j)) {
										_context7.next = 8;
										break;
									}
	
									return _context7.abrupt("continue", 12);
	
								case 8:
									if (!(0, _pvutils.isEqualBuffer)(localCerts[i].tbs, localCerts[j].tbs)) {
										_context7.next = 12;
										break;
									}
	
									localCerts.splice(j, 1);
									i = 0;
									return _context7.abrupt("break", 15);
	
								case 12:
									j++;
									_context7.next = 5;
									break;
	
								case 15:
									i++;
									_context7.next = 3;
									break;
	
								case 18:
									//endregion
	
									//region Initial variables
									result = void 0;
									certificatePath = [localCerts[localCerts.length - 1]]; // The "end entity" certificate must be the least in "certs" array
									//endregion
	
									//region Build path for "end entity" certificate
	
									_context7.next = 22;
									return buildPath(localCerts[localCerts.length - 1], localCerts.length - 1);
	
								case 22:
									result = _context7.sent;
	
									if (!(result.length === 0)) {
										_context7.next = 25;
										break;
									}
	
									return _context7.abrupt("return", {
										result: false,
										resultCode: 60,
										resultMessage: "Unable to find certificate path"
									});
	
								case 25:
									_i5 = 0;
	
								case 26:
									if (!(_i5 < result.length)) {
										_context7.next = 48;
										break;
									}
	
									found = false;
									_j = 0;
	
								case 29:
									if (!(_j < result[_i5].length)) {
										_context7.next = 44;
										break;
									}
	
									certificate = localCerts[result[_i5][_j]];
									k = 0;
	
								case 32:
									if (!(k < _this.trustedCerts.length)) {
										_context7.next = 39;
										break;
									}
	
									if (!(0, _pvutils.isEqualBuffer)(certificate.tbs, _this.trustedCerts[k].tbs)) {
										_context7.next = 36;
										break;
									}
	
									found = true;
									return _context7.abrupt("break", 39);
	
								case 36:
									k++;
									_context7.next = 32;
									break;
	
								case 39:
									if (!found) {
										_context7.next = 41;
										break;
									}
	
									return _context7.abrupt("break", 44);
	
								case 41:
									_j++;
									_context7.next = 29;
									break;
	
								case 44:
	
									if (!found) {
										result.splice(_i5, 1);
										_i5 = 0;
									}
	
								case 45:
									_i5++;
									_context7.next = 26;
									break;
	
								case 48:
									if (!(result.length === 0)) {
										_context7.next = 50;
										break;
									}
	
									throw {
										result: false,
										resultCode: 97,
										resultMessage: "No valid certificate paths found"
									};
	
								case 50:
									//endregion
	
									//region Find shortest certificate path (for the moment it is the only criteria)
									shortestLength = result[0].length;
									shortestIndex = 0;
	
	
									for (_i6 = 0; _i6 < result.length; _i6++) {
										if (result[_i6].length < shortestLength) {
											shortestLength = result[_i6].length;
											shortestIndex = _i6;
										}
									}
									//endregion
	
									//region Create certificate path for basic check
									for (_i7 = 0; _i7 < result[shortestIndex].length; _i7++) {
										certificatePath.push(localCerts[result[shortestIndex][_i7]]);
									} //endregion
	
									//region Perform basic checking for all certificates in the path
									_context7.next = 56;
									return basicCheck(certificatePath, _this.checkDate);
	
								case 56:
									result = _context7.sent;
	
									if (!(result.result === false)) {
										_context7.next = 59;
										break;
									}
	
									throw result;
	
								case 59:
									return _context7.abrupt("return", certificatePath);
	
								case 60:
								case "end":
									return _context7.stop();
							}
						}
					}, generatorFunction, this);
				}));
			}
			//**********************************************************************************
			/**
	   * Major verification function for certificate chain.
	   * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this2 = this;
	
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//region Initial checks
				if (this.certs.length === 0) return Promise.reject("Empty certificate array");
				//endregion
	
				//region Initial variables
				var sequence = Promise.resolve();
				//endregion
	
				//region Get input variables
				var initialPolicySet = [];
				initialPolicySet.push("2.5.29.32.0"); // "anyPolicy"
	
				var initialExplicitPolicy = false;
				var initialPolicyMappingInhibit = false;
				var initialInhibitPolicy = false;
	
				var initialPermittedSubtreesSet = []; // Array of "simpl.x509.GeneralSubtree"
				var initialExcludedSubtreesSet = []; // Array of "simpl.x509.GeneralSubtree"
				var initialRequiredNameForms = []; // Array of "simpl.x509.GeneralSubtree"
	
				if ("initialPolicySet" in parameters) initialPolicySet = parameters.initialPolicySet;
	
				if ("initialExplicitPolicy" in parameters) initialExplicitPolicy = parameters.initialExplicitPolicy;
	
				if ("initialPolicyMappingInhibit" in parameters) initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;
	
				if ("initialInhibitPolicy" in parameters) initialInhibitPolicy = parameters.initialInhibitPolicy;
	
				if ("initialPermittedSubtreesSet" in parameters) initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;
	
				if ("initialExcludedSubtreesSet" in parameters) initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;
	
				if ("initialRequiredNameForms" in parameters) initialRequiredNameForms = parameters.initialRequiredNameForms;
	
				var explicitPolicyIndicator = initialExplicitPolicy;
				var policyMappingInhibitIndicator = initialPolicyMappingInhibit;
				var inhibitAnyPolicyIndicator = initialInhibitPolicy;
	
				var pendingConstraints = new Array(3);
				pendingConstraints[0] = false; // For "explicitPolicyPending"
				pendingConstraints[1] = false; // For "policyMappingInhibitPending"
				pendingConstraints[2] = false; // For "inhibitAnyPolicyPending"
	
				var explicitPolicyPending = 0;
				var policyMappingInhibitPending = 0;
				var inhibitAnyPolicyPending = 0;
	
				var permittedSubtrees = initialPermittedSubtreesSet;
				var excludedSubtrees = initialExcludedSubtreesSet;
				var requiredNameForms = initialRequiredNameForms;
	
				var pathDepth = 1;
				//endregion
	
				//region Sorting certificates in the chain array
				sequence = this.sort().then(function (sortedCerts) {
					_this2.certs = sortedCerts;
				});
				//endregion
	
				//region Work with policies
				sequence = sequence.then(function () {
					//region Support variables
					var allPolicies = []; // Array of all policies (string values)
					allPolicies.push("2.5.29.32.0"); // Put "anyPolicy" at first place
	
					var policiesAndCerts = []; // In fact "array of array" where rows are for each specific policy, column for each certificate and value is "true/false"
	
					var anyPolicyArray = new Array(_this2.certs.length - 1); // Minus "trusted anchor"
					for (var ii = 0; ii < _this2.certs.length - 1; ii++) {
						anyPolicyArray[ii] = true;
					}policiesAndCerts.push(anyPolicyArray);
	
					var policyMappings = new Array(_this2.certs.length - 1); // Array of "PolicyMappings" for each certificate
					var certPolicies = new Array(_this2.certs.length - 1); // Array of "CertificatePolicies" for each certificate
	
					var explicitPolicyStart = explicitPolicyIndicator ? _this2.certs.length - 1 : -1;
					//endregion
	
					//region Gather all neccessary information from certificate chain
					for (var i = _this2.certs.length - 2; i >= 0; i--, pathDepth++) {
						if ("extensions" in _this2.certs[i]) {
							//region Get information about certificate extensions
							for (var j = 0; j < _this2.certs[i].extensions.length; j++) {
								//region CertificatePolicies
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.32") {
									certPolicies[i] = _this2.certs[i].extensions[j].parsedValue;
	
									//region Remove entry from "anyPolicies" for the certificate
									for (var s = 0; s < allPolicies.length; s++) {
										if (allPolicies[s] === "2.5.29.32.0") {
											delete policiesAndCerts[s][i];
											break;
										}
									}
									//endregion
	
									for (var k = 0; k < _this2.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++) {
										var policyIndex = -1;
	
										//region Try to find extension in "allPolicies" array
										for (var _s = 0; _s < allPolicies.length; _s++) {
											if (_this2.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[_s]) {
												policyIndex = _s;
												break;
											}
										}
										//endregion
	
										if (policyIndex === -1) {
											allPolicies.push(_this2.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);
	
											var certArray = new Array(_this2.certs.length - 1);
											certArray[i] = true;
	
											policiesAndCerts.push(certArray);
										} else policiesAndCerts[policyIndex][i] = true;
									}
								}
								//endregion
	
								//region PolicyMappings
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.33") {
									if (policyMappingInhibitIndicator) {
										return {
											result: false,
											resultCode: 98,
											resultMessage: "Policy mapping prohibited"
										};
									}
	
									policyMappings[i] = _this2.certs[i].extensions[j].parsedValue;
								}
								//endregion
	
								//region PolicyConstraints
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.36") {
									if (explicitPolicyIndicator === false) {
										//region requireExplicitPolicy
										if (_this2.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0) {
											explicitPolicyIndicator = true;
											explicitPolicyStart = i;
										} else {
											if (pendingConstraints[0] === false) {
												pendingConstraints[0] = true;
												explicitPolicyPending = _this2.certs[i].extensions[j].parsedValue.requireExplicitPolicy;
											} else explicitPolicyPending = explicitPolicyPending > _this2.certs[i].extensions[j].parsedValue.requireExplicitPolicy ? _this2.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;
										}
										//endregion
	
										//region inhibitPolicyMapping
										if (_this2.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;else {
											if (pendingConstraints[1] === false) {
												pendingConstraints[1] = true;
												policyMappingInhibitPending = _this2.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;
											} else policyMappingInhibitPending = policyMappingInhibitPending > _this2.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 ? _this2.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;
										}
										//endregion
									}
								}
								//endregion
	
								//region InhibitAnyPolicy
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.54") {
									if (inhibitAnyPolicyIndicator === false) {
										if (_this2.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;else {
											if (pendingConstraints[2] === false) {
												pendingConstraints[2] = true;
												inhibitAnyPolicyPending = _this2.certs[i].extensions[j].parsedValue.valueBlock.valueDec;
											} else inhibitAnyPolicyPending = inhibitAnyPolicyPending > _this2.certs[i].extensions[j].parsedValue.valueBlock.valueDec ? _this2.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;
										}
									}
								}
								//endregion
							}
							//endregion
	
							//region Check "inhibitAnyPolicyIndicator"
							if (inhibitAnyPolicyIndicator === true) {
								var _policyIndex = -1;
	
								//region Find "anyPolicy" index
								for (var searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {
									if (allPolicies[searchAnyPolicy] === "2.5.29.32.0") {
										_policyIndex = searchAnyPolicy;
										break;
									}
								}
								//endregion
	
								if (_policyIndex !== -1) delete policiesAndCerts[0][i]; // Unset value to "undefined" for "anyPolicies" value for current certificate
							}
							//endregion
	
							//region Process with "pending constraints"
							if (explicitPolicyIndicator === false) {
								if (pendingConstraints[0] === true) {
									explicitPolicyPending--;
									if (explicitPolicyPending === 0) {
										explicitPolicyIndicator = true;
										explicitPolicyStart = i;
	
										pendingConstraints[0] = false;
									}
								}
							}
	
							if (policyMappingInhibitIndicator === false) {
								if (pendingConstraints[1] === true) {
									policyMappingInhibitPending--;
									if (policyMappingInhibitPending === 0) {
										policyMappingInhibitIndicator = true;
										pendingConstraints[1] = false;
									}
								}
							}
	
							if (inhibitAnyPolicyIndicator === false) {
								if (pendingConstraints[2] === true) {
									inhibitAnyPolicyPending--;
									if (inhibitAnyPolicyPending === 0) {
										inhibitAnyPolicyIndicator = true;
										pendingConstraints[2] = false;
									}
								}
							}
							//endregion
						}
					}
					//endregion
	
					//region Working with policy mappings
					for (var _i8 = 0; _i8 < _this2.certs.length - 1; _i8++) {
						//region Check that there is "policy mapping" for level "i + 1"
						if (_i8 < _this2.certs.length - 2 && typeof policyMappings[_i8 + 1] !== "undefined") {
							for (var _k = 0; _k < policyMappings[_i8 + 1].mappings.length; _k++) {
								//region Check that we do not have "anyPolicy" in current mapping
								if (policyMappings[_i8 + 1].mappings[_k].issuerDomainPolicy === "2.5.29.32.0" || policyMappings[_i8 + 1].mappings[_k].subjectDomainPolicy === "2.5.29.32.0") {
									return {
										result: false,
										resultCode: 99,
										resultMessage: "The \"anyPolicy\" should not be a part of policy mapping scheme"
									};
								}
								//endregion
	
								//region Initial variables
								var issuerDomainPolicyIndex = -1;
								var subjectDomainPolicyIndex = -1;
								//endregion
	
								//region Search for index of policies indedes
								for (var n = 0; n < allPolicies.length; n++) {
									if (allPolicies[n] === policyMappings[_i8 + 1].mappings[_k].issuerDomainPolicy) issuerDomainPolicyIndex = n;
	
									if (allPolicies[n] === policyMappings[_i8 + 1].mappings[_k].subjectDomainPolicy) subjectDomainPolicyIndex = n;
								}
								//endregion
	
								//region Delete existing "issuerDomainPolicy" because on the level we mapped the policy to another one
								if (typeof policiesAndCerts[issuerDomainPolicyIndex][_i8] !== "undefined") delete policiesAndCerts[issuerDomainPolicyIndex][_i8];
								//endregion
	
								//region Check all policies for the certificate
								for (var _j2 = 0; _j2 < certPolicies[_i8].certificatePolicies.length; _j2++) {
									if (policyMappings[_i8 + 1].mappings[_k].subjectDomainPolicy === certPolicies[_i8].certificatePolicies[_j2].policyIdentifier) {
										//region Set mapped policy for current certificate
										if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {
											for (var m = 0; m <= _i8; m++) {
												if (typeof policiesAndCerts[subjectDomainPolicyIndex][m] !== "undefined") {
													policiesAndCerts[issuerDomainPolicyIndex][m] = true;
													delete policiesAndCerts[subjectDomainPolicyIndex][m];
												}
											}
										}
										//endregion
									}
								}
								//endregion
							}
						}
						//endregion
					}
					//endregion
	
					//region Working with "explicitPolicyIndicator" and "anyPolicy"
					for (var _i9 = 0; _i9 < allPolicies.length; _i9++) {
						if (allPolicies[_i9] === "2.5.29.32.0") {
							for (var _j3 = 0; _j3 < explicitPolicyStart; _j3++) {
								delete policiesAndCerts[_i9][_j3];
							}
						}
					}
					//endregion
	
					//region Create "set of authorities-constrained policies"
					var authConstrPolicies = [];
	
					for (var _i10 = 0; _i10 < policiesAndCerts.length; _i10++) {
						var found = true;
	
						for (var _j4 = 0; _j4 < _this2.certs.length - 1; _j4++) {
							var anyPolicyFound = false;
	
							if (_j4 < explicitPolicyStart && allPolicies[_i10] === "2.5.29.32.0" && allPolicies.length > 1) {
								found = false;
								break;
							}
	
							if (typeof policiesAndCerts[_i10][_j4] === "undefined") {
								if (_j4 >= explicitPolicyStart) {
									//region Search for "anyPolicy" in the policy set
									for (var _k2 = 0; _k2 < allPolicies.length; _k2++) {
										if (allPolicies[_k2] === "2.5.29.32.0") {
											if (policiesAndCerts[_k2][_j4] === true) anyPolicyFound = true;
	
											break;
										}
									}
									//endregion
								}
	
								if (!anyPolicyFound) {
									found = false;
									break;
								}
							}
						}
	
						if (found === true) authConstrPolicies.push(allPolicies[_i10]);
					}
					//endregion
	
					//region Create "set of user-constrained policies"
					var userConstrPolicies = [];
	
					if (initialPolicySet.length === 1 && initialPolicySet[0] === "2.5.29.32.0" && explicitPolicyIndicator === false) userConstrPolicies = initialPolicySet;else {
						if (authConstrPolicies.length === 1 && authConstrPolicies[0] === "2.5.29.32.0") userConstrPolicies = initialPolicySet;else {
							for (var _i11 = 0; _i11 < authConstrPolicies.length; _i11++) {
								for (var _j5 = 0; _j5 < initialPolicySet.length; _j5++) {
									if (initialPolicySet[_j5] === authConstrPolicies[_i11] || initialPolicySet[_j5] === "2.5.29.32.0") {
										userConstrPolicies.push(authConstrPolicies[_i11]);
										break;
									}
								}
							}
						}
					}
					//endregion
	
					//region Combine output object
					return {
						result: userConstrPolicies.length > 0,
						resultCode: 0,
						resultMessage: userConstrPolicies.length > 0 ? "" : "Zero \"userConstrPolicies\" array, no intersections with \"authConstrPolicies\"",
						authConstrPolicies: authConstrPolicies,
						userConstrPolicies: userConstrPolicies,
						explicitPolicyIndicator: explicitPolicyIndicator,
						policyMappings: policyMappings
					};
					//endregion
				});
				//endregion
	
				//region Work with name constraints
				sequence = sequence.then(function (policyResult) {
					//region Auxiliary functions for name constraints checking
					function compareDNSName(name, constraint) {
						/// <summary>Compare two dNSName values</summary>
						/// <param name="name" type="String">DNS from name</param>
						/// <param name="constraint" type="String">Constraint for DNS from name</param>
						/// <returns type="Boolean">Boolean result - valid or invalid the "name" against the "constraint"</returns>
	
						//region Make a "string preparation" for both name and constrain
						var namePrepared = (0, _common.stringPrep)(name);
						var constraintPrepared = (0, _common.stringPrep)(constraint);
						//endregion
	
						//region Make a "splitted" versions of "constraint" and "name"
						var nameSplitted = namePrepared.split(".");
						var constraintSplitted = constraintPrepared.split(".");
						//endregion
	
						//region Length calculation and additional check
						var nameLen = nameSplitted.length;
						var constrLen = constraintSplitted.length;
	
						if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) return false;
						//endregion
	
						//region Check that no part of "name" has zero length
						for (var i = 0; i < nameLen; i++) {
							if (nameSplitted[i].length === 0) return false;
						}
						//endregion
	
						//region Check that no part of "constraint" has zero length
						for (var _i12 = 0; _i12 < constrLen; _i12++) {
							if (constraintSplitted[_i12].length === 0) {
								if (_i12 === 0) {
									if (constrLen === 1) return false;
	
									continue;
								}
	
								return false;
							}
						}
						//endregion
	
						//region Check that "name" has a tail as "constraint"
	
						for (var _i13 = 0; _i13 < constrLen; _i13++) {
							if (constraintSplitted[constrLen - 1 - _i13].length === 0) continue;
	
							if (nameSplitted[nameLen - 1 - _i13].localeCompare(constraintSplitted[constrLen - 1 - _i13]) !== 0) return false;
						}
						//endregion
	
						return true;
					}
	
					function compareRFC822Name(name, constraint) {
						/// <summary>Compare two rfc822Name values</summary>
						/// <param name="name" type="String">E-mail address from name</param>
						/// <param name="constraint" type="String">Constraint for e-mail address from name</param>
						/// <returns type="Boolean">Boolean result - valid or invalid the "name" against the "constraint"</returns>
	
						//region Make a "string preparation" for both name and constrain
						var namePrepared = (0, _common.stringPrep)(name);
						var constraintPrepared = (0, _common.stringPrep)(constraint);
						//endregion
	
						//region Make a "splitted" versions of "constraint" and "name"
						var nameSplitted = namePrepared.split("@");
						var constraintSplitted = constraintPrepared.split("@");
						//endregion
	
						//region Splitted array length checking
						if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false;
						//endregion
	
						if (constraintSplitted.length === 1) {
							var result = compareDNSName(nameSplitted[1], constraintSplitted[0]);
	
							if (result) {
								//region Make a "splitted" versions of domain name from "constraint" and "name"
								var ns = nameSplitted[1].split(".");
								var cs = constraintSplitted[0].split(".");
								//endregion
	
								if (cs[0].length === 0) return true;
	
								return ns.length === cs.length;
							}
	
							return false;
						}
	
						return namePrepared.localeCompare(constraintPrepared) === 0;
					}
	
					function compareUniformResourceIdentifier(name, constraint) {
						/// <summary>Compare two uniformResourceIdentifier values</summary>
						/// <param name="name" type="String">uniformResourceIdentifier from name</param>
						/// <param name="constraint" type="String">Constraint for uniformResourceIdentifier from name</param>
						/// <returns type="Boolean">Boolean result - valid or invalid the "name" against the "constraint"</returns>
	
						//region Make a "string preparation" for both name and constrain
						var namePrepared = (0, _common.stringPrep)(name);
						var constraintPrepared = (0, _common.stringPrep)(constraint);
						//endregion
	
						//region Find out a major URI part to compare with
						var ns = namePrepared.split("/");
						var cs = constraintPrepared.split("/");
	
						if (cs.length > 1) // Malformed constraint
							return false;
	
						if (ns.length > 1) // Full URI string
							{
								for (var i = 0; i < ns.length; i++) {
									if (ns[i].length > 0 && ns[i].charAt(ns[i].length - 1) !== ":") {
										var nsPort = ns[i].split(":");
										namePrepared = nsPort[0];
										break;
									}
								}
							}
						//endregion
	
						var result = compareDNSName(namePrepared, constraintPrepared);
	
						if (result) {
							//region Make a "splitted" versions of "constraint" and "name"
							var nameSplitted = namePrepared.split(".");
							var constraintSplitted = constraintPrepared.split(".");
							//endregion
	
							if (constraintSplitted[0].length === 0) return true;
	
							return nameSplitted.length === constraintSplitted.length;
						}
	
						return false;
					}
	
					function compareIPAddress(name, constraint) {
						/// <summary>Compare two iPAddress values</summary>
						/// <param name="name" type="in_window.org.pkijs.asn1.OCTETSTRING">iPAddress from name</param>
						/// <param name="constraint" type="in_window.org.pkijs.asn1.OCTETSTRING">Constraint for iPAddress from name</param>
						/// <returns type="Boolean">Boolean result - valid or invalid the "name" against the "constraint"</returns>
	
						//region Common variables
						var nameView = new Uint8Array(name.valueBlock.valueHex);
						var constraintView = new Uint8Array(constraint.valueBlock.valueHex);
						//endregion
	
						//region Work with IPv4 addresses
						if (nameView.length === 4 && constraintView.length === 8) {
							for (var i = 0; i < 4; i++) {
								if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4]) return false;
							}
	
							return true;
						}
						//endregion
	
						//region Work with IPv6 addresses
						if (nameView.length === 16 && constraintView.length === 32) {
							for (var _i14 = 0; _i14 < 16; _i14++) {
								if ((nameView[_i14] ^ constraintView[_i14]) & constraintView[_i14 + 16]) return false;
							}
	
							return true;
						}
						//endregion
	
						return false;
					}
	
					function compareDirectoryName(name, constraint) {
						/// <summary>Compare two directoryName values</summary>
						/// <param name="name" type="in_window.org.pkijs.simpl.RDN">directoryName from name</param>
						/// <param name="constraint" type="in_window.org.pkijs.simpl.RDN">Constraint for directoryName from name</param>
						/// <param name="any" type="Boolean">Boolean flag - should be comparision interrupted after first match or we need to match all "constraints" parts</param>
						/// <returns type="Boolean">Boolean result - valid or invalid the "name" against the "constraint"</returns>
	
						//region Initial check
						if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;
	
						if (name.typesAndValues.length < constraint.typesAndValues.length) return false;
						//endregion
	
						//region Initial variables
						var result = true;
						var nameStart = 0;
						//endregion
	
						for (var i = 0; i < constraint.typesAndValues.length; i++) {
							var localResult = false;
	
							for (var j = nameStart; j < name.typesAndValues.length; j++) {
								localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);
	
								if (name.typesAndValues[j].type === constraint.typesAndValues[i].type) result = result && localResult;
	
								if (localResult === true) {
									if (nameStart === 0 || nameStart === j) {
										nameStart = j + 1;
										break;
									} else // Structure of "name" must be the same with "constraint"
										return false;
								}
							}
	
							if (localResult === false) return false;
						}
	
						return nameStart === 0 ? false : result;
					}
	
					//endregion
	
					//region Check a result from "policy checking" part
					if (policyResult.result === false) return policyResult;
					//endregion
	
					//region Check all certificates, excluding "trust anchor"
					pathDepth = 1;
	
					for (var i = _this2.certs.length - 2; i >= 0; i--, pathDepth++) {
						//region Support variables
						var subjectAltNames = [];
	
						var certPermittedSubtrees = [];
						var certExcludedSubtrees = [];
						//endregion
	
						if ("extensions" in _this2.certs[i]) {
							for (var j = 0; j < _this2.certs[i].extensions.length; j++) {
								//region NameConstraints
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.30") {
									if ("permittedSubtrees" in _this2.certs[i].extensions[j].parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(_this2.certs[i].extensions[j].parsedValue.permittedSubtrees);
	
									if ("excludedSubtrees" in _this2.certs[i].extensions[j].parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(_this2.certs[i].extensions[j].parsedValue.excludedSubtrees);
								}
								//endregion
	
								//region SubjectAltName
								if (_this2.certs[i].extensions[j].extnID === "2.5.29.17") subjectAltNames = subjectAltNames.concat(_this2.certs[i].extensions[j].parsedValue.altNames);
								//endregion
							}
						}
	
						//region Checking for "required name forms"
						var formFound = requiredNameForms.length <= 0;
	
						for (var _j6 = 0; _j6 < requiredNameForms.length; _j6++) {
							switch (requiredNameForms[_j6].base.type) {
								case 4:
									// directoryName
									{
										if (requiredNameForms[_j6].base.value.typesAndValues.length !== _this2.certs[i].subject.typesAndValues.length) continue;
	
										formFound = true;
	
										for (var k = 0; k < _this2.certs[i].subject.typesAndValues.length; k++) {
											if (_this2.certs[i].subject.typesAndValues[k].type !== requiredNameForms[_j6].base.value.typesAndValues[k].type) {
												formFound = false;
												break;
											}
										}
	
										if (formFound === true) break;
									}
									break;
								default: // ??? Probably here we should reject the certificate ???
							}
						}
	
						if (formFound === false) {
							policyResult.result = false;
							policyResult.resultCode = 21;
							policyResult.resultMessage = "No neccessary name form found";
	
							return Promise.reject(policyResult);
						}
						//endregion
	
						//region Checking for "permited sub-trees"
						//region Make groups for all types of constraints
						var constrGroups = []; // Array of array for groupped constraints
						constrGroups[0] = []; // rfc822Name
						constrGroups[1] = []; // dNSName
						constrGroups[2] = []; // directoryName
						constrGroups[3] = []; // uniformResourceIdentifier
						constrGroups[4] = []; // iPAddress
	
						for (var _j7 = 0; _j7 < permittedSubtrees.length; _j7++) {
							switch (permittedSubtrees[_j7].base.type) {
								//region rfc822Name
								case 1:
									constrGroups[0].push(permittedSubtrees[_j7]);
									break;
								//endregion
								//region dNSName
								case 2:
									constrGroups[1].push(permittedSubtrees[_j7]);
									break;
								//endregion
								//region directoryName
								case 4:
									constrGroups[2].push(permittedSubtrees[_j7]);
									break;
								//endregion
								//region uniformResourceIdentifier
								case 6:
									constrGroups[3].push(permittedSubtrees[_j7]);
									break;
								//endregion
								//region iPAddress
								case 7:
									constrGroups[4].push(permittedSubtrees[_j7]);
									break;
								//endregion
								//region default
								default:
								//endregion
							}
						}
						//endregion
	
						//region Check name constraints groupped by type, one-by-one
						for (var p = 0; p < 5; p++) {
							var groupPermitted = false;
							var valueExists = false;
							var group = constrGroups[p];
	
							for (var _j8 = 0; _j8 < group.length; _j8++) {
								switch (p) {
									//region rfc822Name
									case 0:
										if (subjectAltNames.length > 0) {
											for (var _k3 = 0; _k3 < subjectAltNames.length; _k3++) {
												if (subjectAltNames[_k3].type === 1) // rfc822Name
													{
														valueExists = true;
														groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[_k3].value, group[_j8].base.value);
													}
											}
										} else // Try to find out "emailAddress" inside "subject"
											{
												for (var _k4 = 0; _k4 < _this2.certs[i].subject.typesAndValues.length; _k4++) {
													if (_this2.certs[i].subject.typesAndValues[_k4].type === "1.2.840.113549.1.9.1" || // PKCS#9 e-mail address
													_this2.certs[i].subject.typesAndValues[_k4].type === "0.9.2342.19200300.100.1.3") // RFC1274 "rfc822Mailbox" e-mail address
														{
															valueExists = true;
															groupPermitted = groupPermitted || compareRFC822Name(_this2.certs[i].subject.typesAndValues[_k4].value.valueBlock.value, group[_j8].base.value);
														}
												}
											}
										break;
									//endregion
									//region dNSName
									case 1:
										if (subjectAltNames.length > 0) {
											for (var _k5 = 0; _k5 < subjectAltNames.length; _k5++) {
												if (subjectAltNames[_k5].type === 2) // dNSName
													{
														valueExists = true;
														groupPermitted = groupPermitted || compareDNSName(subjectAltNames[_k5].value, group[_j8].base.value);
													}
											}
										}
										break;
									//endregion
									//region directoryName
									case 2:
										valueExists = true;
										groupPermitted = compareDirectoryName(_this2.certs[i].subject, group[_j8].base.value);
										break;
									//endregion
									//region uniformResourceIdentifier
									case 3:
										if (subjectAltNames.length > 0) {
											for (var _k6 = 0; _k6 < subjectAltNames.length; _k6++) {
												if (subjectAltNames[_k6].type === 6) // uniformResourceIdentifier
													{
														valueExists = true;
														groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[_k6].value, group[_j8].base.value);
													}
											}
										}
										break;
									//endregion
									//region iPAddress
									case 4:
										if (subjectAltNames.length > 0) {
											for (var _k7 = 0; _k7 < subjectAltNames.length; _k7++) {
												if (subjectAltNames[_k7].type === 7) // iPAddress
													{
														valueExists = true;
														groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[_k7].value, group[_j8].base.value);
													}
											}
										}
										break;
									//endregion
									//region default
									default:
									//endregion
								}
	
								if (groupPermitted) break;
							}
	
							if (groupPermitted === false && group.length > 0 && valueExists) {
								policyResult.result = false;
								policyResult.resultCode = 41;
								policyResult.resultMessage = "Failed to meet \"permitted sub-trees\" name constraint";
	
								return Promise.reject(policyResult);
							}
						}
						//endregion
						//endregion
	
						//region Checking for "excluded sub-trees"
						var excluded = false;
	
						for (var _j9 = 0; _j9 < excludedSubtrees.length; _j9++) {
							switch (excludedSubtrees[_j9].base.type) {
								//region rfc822Name
								case 1:
									if (subjectAltNames.length >= 0) {
										for (var _k8 = 0; _k8 < subjectAltNames.length; _k8++) {
											if (subjectAltNames[_k8].type === 1) // rfc822Name
												excluded = excluded || compareRFC822Name(subjectAltNames[_k8].value, excludedSubtrees[_j9].base.value);
										}
									} else // Try to find out "emailAddress" inside "subject"
										{
											for (var _k9 = 0; _k9 < _this2.subject.typesAndValues.length; _k9++) {
												if (_this2.subject.typesAndValues[_k9].type === "1.2.840.113549.1.9.1" || // PKCS#9 e-mail address
												_this2.subject.typesAndValues[_k9].type === "0.9.2342.19200300.100.1.3") // RFC1274 "rfc822Mailbox" e-mail address
													excluded = excluded || compareRFC822Name(_this2.subject.typesAndValues[_k9].value.valueBlock.value, excludedSubtrees[_j9].base.value);
											}
										}
									break;
								//endregion
								//region dNSName
								case 2:
									if (subjectAltNames.length > 0) {
										for (var _k10 = 0; _k10 < subjectAltNames.length; _k10++) {
											if (subjectAltNames[_k10].type === 2) // dNSName
												excluded = excluded || compareDNSName(subjectAltNames[_k10].value, excludedSubtrees[_j9].base.value);
										}
									}
									break;
								//endregion
								//region directoryName
								case 4:
									excluded = excluded || compareDirectoryName(_this2.certs[i].subject, excludedSubtrees[_j9].base.value);
									break;
								//endregion
								//region uniformResourceIdentifier
								case 6:
									if (subjectAltNames.length > 0) {
										for (var _k11 = 0; _k11 < subjectAltNames.length; _k11++) {
											if (subjectAltNames[_k11].type === 6) // uniformResourceIdentifier
												excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[_k11].value, excludedSubtrees[_j9].base.value);
										}
									}
									break;
								//endregion
								//region iPAddress
								case 7:
									if (subjectAltNames.length > 0) {
										for (var _k12 = 0; _k12 < subjectAltNames.length; _k12++) {
											if (subjectAltNames[_k12].type === 7) // iPAddress
												excluded = excluded || compareIPAddress(subjectAltNames[_k12].value, excludedSubtrees[_j9].base.value);
										}
									}
									break;
								//endregion
								//region default
								default: // No action, but probably here we need to create a warning for "malformed constraint"
								//endregion
							}
	
							if (excluded) break;
						}
	
						if (excluded === true) {
							policyResult.result = false;
							policyResult.resultCode = 42;
							policyResult.resultMessage = "Failed to meet \"excluded sub-trees\" name constraint";
	
							return Promise.reject(policyResult);
						}
						//endregion
	
						//region Append "cert_..._subtrees" to "..._subtrees"
						permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);
						excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);
						//endregion
					}
					//endregion
	
					return policyResult;
				});
				//endregion
	
				//region Error handling stub
				sequence = sequence.then(function (result) {
					return result;
				}, function (error) {
					if (error instanceof Object) {
						if ("resultMessage" in error) return error;
	
						if ("message" in error) {
							return {
								result: false,
								resultCode: -1,
								resultMessage: error.message
							};
						}
					}
	
					return {
						result: false,
						resultCode: -1,
						resultMessage: error
					};
				});
				//endregion
	
				return sequence;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "trustedCerts":
						return [];
					case "certs":
						return [];
					case "crls":
						return [];
					case "ocsps":
						return [];
					case "checkDate":
						return new Date();
					default:
						throw new Error("Invalid member name for CertificateChainValidationEngine class: " + memberName);
				}
			}
		}]);
	
		return CertificateChainValidationEngine;
	}();
	//**************************************************************************************
	
	
	exports.default = CertificateChainValidationEngine;
	//# sourceMappingURL=CertificateChainValidationEngine.js.map

/***/ }),
/* 460 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = generatorsDriver;
	//**************************************************************************************
	//region Aux functions
	//**************************************************************************************
	var isGenerator = function isGenerator(generator) {
		if (typeof generator === "undefined") return false;
	
		return typeof generator.next === "function" && typeof generator.throw === "function";
	};
	//**************************************************************************************
	var isGeneratorFunction = function isGeneratorFunction(generator) {
		if (typeof generator === "undefined") return false;
	
		var constructor = generator.constructor;
	
		if (!constructor) return false;
	
		if (constructor.name === "GeneratorFunction" || constructor.displayName === "GeneratorFunction") return true;
	
		return isGenerator(generator);
	};
	//**************************************************************************************
	//endregion
	//**************************************************************************************
	/**
	 * Simple "generator's driver" inspired by "https://github.com/tj/co".
	 * @param {Generator|GeneratorFunction} generatorInstance
	 * @returns {Promise}
	 */
	function generatorsDriver(generatorInstance) {
		//region Check that we do have instance of "Generator" as input
		if (!isGenerator(generatorInstance)) {
			if (isGeneratorFunction(generatorInstance)) generatorInstance = generatorInstance();else throw new Error("Only generator instance of generator function is a valid input");
		}
		//endregion
	
		return new Promise(function (resolve, reject) {
			/**
	   * Driver function called on "reject" status in Promises
	   * @param {*} error
	   * @returns {*}
	   */
			var onReject = function onReject(error) {
				var result = void 0;
	
				try {
					result = generatorInstance.throw(error);
				} catch (ex) {
					return reject(ex);
				}
	
				return callback(result);
			};
	
			/**
	   * Main driver function
	   * @param {*} [result]
	   * @returns {*}
	   */
			var callback = function callback(result) {
				/**
	    * @type Object
	    * @property {boolean} done
	    * @property {*} value
	    */
				var generatorResult = void 0;
	
				try {
					generatorResult = generatorInstance.next(result);
				} catch (ex) {
					return reject(ex);
				}
	
				switch (true) {
					case generatorResult.value instanceof Promise:
						return generatorResult.done ? resolve(generatorResult.value) : generatorResult.value.then(callback, onReject);
					case isGeneratorFunction(generatorResult.value):
					case isGenerator(generatorResult.value):
						return generatorResult.done ? generatorsDriver(generatorResult.value).then(function (driverResult) {
							resolve(driverResult);
						}, onReject) : generatorsDriver(generatorResult.value).then(callback, onReject);
					case typeof generatorResult.value === "function":
						generatorResult.value = generatorResult.value();
					default:
						return generatorResult.done ? resolve(generatorResult.value) : callback(generatorResult.value);
				}
			};
	
			callback();
		});
	}
	//**************************************************************************************
	//# sourceMappingURL=GeneratorsDriver.js.map

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _PublicKeyInfo = __webpack_require__(382);
	
	var _PublicKeyInfo2 = _interopRequireDefault(_PublicKeyInfo);
	
	var _RelativeDistinguishedNames = __webpack_require__(392);
	
	var _RelativeDistinguishedNames2 = _interopRequireDefault(_RelativeDistinguishedNames);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	function CertificationRequestInfo() {
		var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
		//CertificationRequestInfo ::= SEQUENCE {
		//    version       INTEGER { v1(0) } (v1,...),
		//    subject       Name,
		//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
		//    attributes    [0] Attributes{{ CRIAttributes }}
		//}
	
		/**
	  * @type {Object}
	  * @property {string} [blockName]
	  * @property {string} [CertificationRequestInfo]
	  * @property {string} [CertificationRequestInfoVersion]
	  * @property {string} [subject]
	  * @property {string} [CertificationRequestInfoAttributes]
	  * @property {string} [attributes]
	  */
		var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
		return new asn1js.Sequence({
			name: names.CertificationRequestInfo || "CertificationRequestInfo",
			value: [new asn1js.Integer({ name: names.CertificationRequestInfoVersion || "CertificationRequestInfo.version" }), _RelativeDistinguishedNames2.default.schema(names.subject || {
				names: {
					blockName: "CertificationRequestInfo.subject"
				}
			}), _PublicKeyInfo2.default.schema({
				names: {
					blockName: "CertificationRequestInfo.subjectPublicKeyInfo"
				}
			}), new asn1js.Constructed({
				optional: true,
				idBlock: {
					tagClass: 3, // CONTEXT-SPECIFIC
					tagNumber: 0 // [0]
				},
				value: [new asn1js.Repeated({
					optional: true, // Because OpenSSL makes wrong "attributes" field
					name: names.CertificationRequestInfoAttributes || "CertificationRequestInfo.attributes",
					value: _Attribute2.default.schema(names.attributes || {})
				})]
			})]
		});
	}
	//**************************************************************************************
	/**
	 * Class from RFC2986
	 */
	
	var CertificationRequest = function () {
		//**********************************************************************************
		/**
	  * Constructor for Attribute class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function CertificationRequest() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, CertificationRequest);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description tbs
	   */
			this.tbs = (0, _pvutils.getParametersValue)(parameters, "tbs", CertificationRequest.defaultValues("tbs"));
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", CertificationRequest.defaultValues("version"));
			/**
	   * @type {RelativeDistinguishedNames}
	   * @description subject
	   */
			this.subject = (0, _pvutils.getParametersValue)(parameters, "subject", CertificationRequest.defaultValues("subject"));
			/**
	   * @type {PublicKeyInfo}
	   * @description subjectPublicKeyInfo
	   */
			this.subjectPublicKeyInfo = (0, _pvutils.getParametersValue)(parameters, "subjectPublicKeyInfo", CertificationRequest.defaultValues("subjectPublicKeyInfo"));
	
			if ("attributes" in parameters)
				/**
	    * @type {Array.<Attribute>}
	    * @description attributes
	    */
				this.attributes = (0, _pvutils.getParametersValue)(parameters, "attributes", CertificationRequest.defaultValues("attributes"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signatureAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", CertificationRequest.defaultValues("signatureAlgorithm"));
			/**
	   * @type {BitString}
	   * @description signatureAlgorithm
	   */
			this.signatureValue = (0, _pvutils.getParametersValue)(parameters, "signatureValue", CertificationRequest.defaultValues("signatureValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(CertificationRequest, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PKCS10");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;
	
				this.version = asn1.result["CertificationRequestInfo.version"].valueBlock.valueDec;
				this.subject = new _RelativeDistinguishedNames2.default({ schema: asn1.result["CertificationRequestInfo.subject"] });
				this.subjectPublicKeyInfo = new _PublicKeyInfo2.default({ schema: asn1.result["CertificationRequestInfo.subjectPublicKeyInfo"] });
				if ("CertificationRequestInfo.attributes" in asn1.result) this.attributes = Array.from(asn1.result["CertificationRequestInfo.attributes"], function (element) {
					return new _Attribute2.default({ schema: element });
				});
	
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });
				this.signatureValue = asn1.result.signatureValue;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Aux function making ASN1js Sequence from current TBS
	   * @returns {Sequence}
	   */
	
		}, {
			key: "encodeTBS",
			value: function encodeTBS() {
				//region Create array for output sequence
				var outputArray = [new asn1js.Integer({ value: this.version }), this.subject.toSchema(), this.subjectPublicKeyInfo.toSchema()];
	
				if ("attributes" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: Array.from(this.attributes, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
	
				return new asn1js.Sequence({
					value: outputArray
				});
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Decode stored TBS value
				var tbsSchema = void 0;
	
				if (encodeFlag === false) {
					if (this.tbs.length === 0) // No stored TBS part
						return CertificationRequest.schema();
	
					tbsSchema = asn1js.fromBER(this.tbs).result;
				}
				//endregion
				//region Create TBS schema via assembling from TBS parts
				else tbsSchema = this.encodeTBS();
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					tbs: (0, _pvutils.bufferToHexCodes)(this.tbs, 0, this.tbs.byteLength),
					version: this.version,
					subject: this.subject.toJSON(),
					subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
					signatureAlgorithm: this.signatureAlgorithm.toJSON(),
					signatureValue: this.signatureValue.toJSON()
				};
	
				if ("attributes" in this) object.attributes = Array.from(this.attributes, function (element) {
					return element.toJSON();
				});
	
				return object;
			}
	
			//**********************************************************************************
			/**
	   * Makes signature for currect certification request
	   * @param {Object} privateKey WebCrypto private key
	   * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey) {
				var _this = this;
	
				var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "SHA-1";
	
				//region Get a private key from function parameter
				if (typeof privateKey === "undefined") return Promise.reject("Need to provide a private key for signing");
				//endregion
	
				//region Get hashing algorithm
				var oid = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
				if (oid === "") return Promise.reject("Unsupported hash algorithm: {$hashAlgorithm}");
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.signatureAlgorithm.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								var hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.signatureAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				this.tbs = this.encodeTBS().toBER(false);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(this.tbs)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this.signatureValue = new asn1js.BitString({ valueHex: result });
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Verify existing certification request signature
	   * @returns {*}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this2 = this;
	
				//region Global variables
				var sequence = Promise.resolve();
	
				var subjectPublicKeyInfo = this.subjectPublicKeyInfo;
				var signature = this.signatureValue;
				var tbs = this.tbs;
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Find a correct hashing algorithm
				var shaAlgorithm = (0, _common.getHashAlgorithm)(this.signatureAlgorithm);
				if (shaAlgorithm === "") return Promise.reject("Unsupported signature algorithm: " + this.signatureAlgorithm.algorithmId);
				//endregion
	
				//region Importing public key
				sequence = sequence.then(function () {
					//region Get information about public key algorithm and default parameters for import
					var algorithmId = void 0;
					if (_this2.signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = _this2.signatureAlgorithm.algorithmId;else algorithmId = _this2.subjectPublicKeyInfo.algorithm.algorithmId;
	
					var algorithmObject = (0, _common.getAlgorithmByOID)(algorithmId);
					if ("name" in algorithmObject === false) return Promise.reject("Unsupported public key algorithm: " + algorithmId);
	
					var algorithmName = algorithmObject.name;
	
					var algorithm = (0, _common.getAlgorithmParameters)(algorithmName, "importkey");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmObject.name === "ECDSA") {
						// #region Get information about named curve
						var algorithmParamsChecked = false;
	
						if ("algorithmParams" in subjectPublicKeyInfo.algorithm === true) {
							if ("idBlock" in subjectPublicKeyInfo.algorithm.algorithmParams) {
								if (subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
							}
						}
	
						if (algorithmParamsChecked === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						// #endregion
	
						algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
	
					var publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();
					var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
					var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
	
					return crypto.importKey("spki", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);
				});
				//endregion
	
				//region Verify signature
				sequence = sequence.then(function (publicKey) {
					//region Get default algorithm parameters for verification
					var algorithm = (0, _common.getAlgorithmParameters)(publicKey.algorithm.name, "verify");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
					//endregion
	
					//region Special case for ECDSA signatures
					var signatureValue = signature.valueBlock.valueHex;
	
					if (publicKey.algorithm.name === "ECDSA") {
						var asn1 = asn1js.fromBER(signatureValue);
						signatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);
					}
					//endregion
	
					//region Special case for RSA-PSS
					if (publicKey.algorithm.name === "RSA-PSS") {
						var pssParameters = void 0;
	
						try {
							pssParameters = new _RSASSAPSSParams2.default({ schema: _this2.signatureAlgorithm.algorithmParams });
						} catch (ex) {
							return Promise.reject(ex);
						}
	
						if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
	
						var hashAlgo = "SHA-1";
	
						if ("hashAlgorithm" in pssParameters) {
							var hashAlgorithm = (0, _common.getAlgorithmByOID)(pssParameters.hashAlgorithm.algorithmId);
							if ("name" in hashAlgorithm === false) return Promise.reject("Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId);
	
							hashAlgo = hashAlgorithm.name;
						}
	
						algorithm.algorithm.hash.name = hashAlgo;
					}
					//endregion
	
					return crypto.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(tbs));
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbs":
						return new ArrayBuffer(0);
					case "version":
						return 0;
					case "subject":
						return new _RelativeDistinguishedNames2.default();
					case "subjectPublicKeyInfo":
						return new _PublicKeyInfo2.default();
					case "attributes":
						return [];
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signatureValue":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for CertificationRequest class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//CertificationRequest ::= SEQUENCE {
				//    certificationRequestInfo CertificationRequestInfo,
				//    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},
				//    signature                BIT STRING
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [certificationRequestInfo]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signatureValue]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					value: [CertificationRequestInfo(names.certificationRequestInfo || {}), new asn1js.Sequence({
						name: names.signatureAlgorithm || "signatureAlgorithm",
						value: [new asn1js.ObjectIdentifier(), new asn1js.Any({ optional: true })]
					}), new asn1js.BitString({ name: names.signatureValue || "signatureValue" })]
				});
			}
		}]);
	
		return CertificationRequest;
	}();
	//**************************************************************************************
	
	
	exports.default = CertificationRequest;
	//# sourceMappingURL=CertificationRequest.js.map

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3447
	 */
	var DigestInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for DigestInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function DigestInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, DigestInfo);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description digestAlgorithm
	   */
			this.digestAlgorithm = (0, _pvutils.getParametersValue)(parameters, "digestAlgorithm", DigestInfo.defaultValues("digestAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description digest
	   */
			this.digest = (0, _pvutils.getParametersValue)(parameters, "digest", DigestInfo.defaultValues("digest"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(DigestInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, DigestInfo.schema({
					names: {
						digestAlgorithm: {
							names: {
								blockName: "digestAlgorithm"
							}
						},
						digest: "digest"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for DigestInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.digestAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.digestAlgorithm });
				this.digest = asn1.result.digest;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.digestAlgorithm.toSchema(), this.digest]
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					digestAlgorithm: this.digestAlgorithm.toJSON(),
					digest: this.digest.toJSON()
				};
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "digestAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "digest":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for DigestInfo class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "digestAlgorithm":
						return _AlgorithmIdentifier2.default.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
					case "digest":
						return memberValue.isEqual(this.constructor.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for DigestInfo class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//DigestInfo ::= SEQUENCE {
				//    digestAlgorithm DigestAlgorithmIdentifier,
				//    digest Digest }
	
				//Digest ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.digestAlgorithm || {
						names: {
							blockName: "digestAlgorithm"
						}
					}), new asn1js.OctetString({ name: names.digest || "digest" })]
				});
			}
		}]);
	
		return DigestInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = DigestInfo;
	//# sourceMappingURL=DigestInfo.js.map

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var EncapsulatedContentInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for EncapsulatedContentInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function EncapsulatedContentInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, EncapsulatedContentInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description eContentType
	   */
			this.eContentType = (0, _pvutils.getParametersValue)(parameters, "eContentType", EncapsulatedContentInfo.defaultValues("eContentType"));
	
			if ("eContent" in parameters) {
				/**
	    * @type {OctetString}
	    * @description eContent
	    */
				this.eContent = (0, _pvutils.getParametersValue)(parameters, "eContent", EncapsulatedContentInfo.defaultValues("eContent"));
				if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {
					// #region Divide OCTETSTRING value down to small pieces
					if (this.eContent.idBlock.isConstructed === false) {
						var constrString = new asn1js.OctetString({
							idBlock: { isConstructed: true },
							isConstructed: true
						});
	
						var offset = 0;
						var length = this.eContent.valueBlock.valueHex.byteLength;
	
						while (length > 0) {
							var pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, offset + 65536 > this.eContent.valueBlock.valueHex.byteLength ? this.eContent.valueBlock.valueHex.byteLength - offset : 65536);
							var _array = new ArrayBuffer(pieceView.length);
							var _view = new Uint8Array(_array);
	
							for (var i = 0; i < _view.length; i++) {
								_view[i] = pieceView[i];
							}constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));
	
							length -= pieceView.length;
							offset += pieceView.length;
						}
	
						this.eContent = constrString;
					}
					// #endregion
				}
			}
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(EncapsulatedContentInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({
					names: {
						eContentType: "eContentType",
						eContent: "eContent"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for EncapsulatedContentInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				this.eContentType = asn1.result.eContentType.valueBlock.toString();
				if ("eContent" in asn1.result) this.eContent = asn1.result.eContent;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence 
				var outputArray = [];
	
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));
				if ("eContent" in this) {
					if (EncapsulatedContentInfo.compareWithDefault("eContent", this.eContent) === false) {
						outputArray.push(new asn1js.Constructed({
							optional: true,
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [this.eContent]
						}));
					}
				}
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					eContentType: this.eContentType
				};
	
				if ("eContent" in this) {
					if (EncapsulatedContentInfo.compareWithDefault("eContent", this.eContent) === false) _object.eContent = this.eContent.toJSON();
				}
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "eContentType":
						return "";
					case "eContent":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for EncapsulatedContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "eContentType":
						return memberValue === "";
					case "eContent":
						return memberValue.isEqual(EncapsulatedContentInfo.defaultValues("eContent"));
					default:
						throw new Error("Invalid member name for EncapsulatedContentInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//EncapsulatedContentInfo ::= SEQUENCE {
				//    eContentType ContentType,
				//    eContent [0] EXPLICIT OCTET STRING OPTIONAL } // Changed it to ANY, as in PKCS#7
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.eContentType || "" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Any({ name: names.eContent || "" }) // In order to aling this with PKCS#7 and CMS as well
						]
					})]
				});
			}
		}]);
	
		return EncapsulatedContentInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = EncapsulatedContentInfo;
	//# sourceMappingURL=EncapsulatedContentInfo.js.map

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _PrivateKeyInfo2 = __webpack_require__(385);
	
	var _PrivateKeyInfo3 = _interopRequireDefault(_PrivateKeyInfo2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	//**************************************************************************************
	/**
	 * Class from RFC5208
	 */
	var KeyBag = function (_PrivateKeyInfo) {
		_inherits(KeyBag, _PrivateKeyInfo);
	
		//**********************************************************************************
		/**
	  * Constructor for Attribute class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function KeyBag() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, KeyBag);
	
			return _possibleConstructorReturn(this, (KeyBag.__proto__ || Object.getPrototypeOf(KeyBag)).call(this, parameters));
		}
		//**********************************************************************************
	
	
		return KeyBag;
	}(_PrivateKeyInfo3.default);
	//**************************************************************************************
	
	
	exports.default = KeyBag;
	//# sourceMappingURL=KeyBag.js.map

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _DigestInfo = __webpack_require__(462);
	
	var _DigestInfo2 = _interopRequireDefault(_DigestInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var MacData = function () {
		//**********************************************************************************
		/**
	  * Constructor for MacData class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function MacData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, MacData);
	
			//region Internal properties of the object
			/**
	   * @type {DigestInfo}
	   * @description mac
	   */
			this.mac = (0, _pvutils.getParametersValue)(parameters, "mac", MacData.defaultValues("mac"));
			/**
	   * @type {OctetString}
	   * @description macSalt
	   */
			this.macSalt = (0, _pvutils.getParametersValue)(parameters, "macSalt", MacData.defaultValues("macSalt"));
	
			if ("iterations" in parameters)
				/**
	    * @type {number}
	    * @description iterations
	    */
				this.iterations = (0, _pvutils.getParametersValue)(parameters, "iterations", MacData.defaultValues("iterations"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(MacData, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, MacData.schema({
					names: {
						mac: {
							names: {
								blockName: "mac"
							}
						},
						macSalt: "macSalt",
						iterations: "iterations"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for MacData");
				//endregion
	
				//region Get internal properties from parsed schema
				this.mac = new _DigestInfo2.default({ schema: asn1.result.mac });
				this.macSalt = asn1.result.macSalt;
	
				if ("iterations" in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec;
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				var outputArray = [this.mac.toSchema(), this.macSalt];
	
				if ("iterations" in this) outputArray.push(new asn1js.Integer({ value: this.iterations }));
	
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var output = {
					mac: this.mac.toJSON(),
					macSalt: this.macSalt.toJSON()
				};
	
				if ("iterations" in this) output.iterations = this.iterations.toJSON();
	
				return output;
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "mac":
						return new _DigestInfo2.default();
					case "macSalt":
						return new asn1js.OctetString();
					case "iterations":
						return 1;
					default:
						throw new Error("Invalid member name for MacData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "mac":
						return _DigestInfo2.default.compareWithDefault("digestAlgorithm", memberValue.digestAlgorithm) && _DigestInfo2.default.compareWithDefault("digest", memberValue.digest);
					case "macSalt":
						return memberValue.isEqual(MacData.defaultValues(memberName));
					case "iterations":
						return memberValue === MacData.defaultValues(memberName);
					default:
						throw new Error("Invalid member name for MacData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//MacData ::= SEQUENCE {
				//    mac 		DigestInfo,
				//    macSalt       OCTET STRING,
				//    iterations	INTEGER DEFAULT 1
				//    -- Note: The default is for historical reasons and its use is
				//    -- deprecated. A higher value, like 1024 is recommended.
				//    }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [optional]
	    * @property {string} [mac]
	    * @property {string} [macSalt]
	    * @property {string} [iterations]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					optional: names.optional || true,
					value: [_DigestInfo2.default.schema(names.mac || {
						names: {
							blockName: "mac"
						}
					}), new asn1js.OctetString({ name: names.macSalt || "macSalt" }), new asn1js.Integer({
						optional: true,
						name: names.iterations || "iterations"
					})]
				});
			}
		}]);
	
		return MacData;
	}();
	//**************************************************************************************
	
	
	exports.default = MacData;
	//# sourceMappingURL=MacData.js.map

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var MessageImprint = function () {
		//**********************************************************************************
		/**
	  * Constructor for MessageImprint class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function MessageImprint() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, MessageImprint);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description hashAlgorithm
	   */
			this.hashAlgorithm = (0, _pvutils.getParametersValue)(parameters, "hashAlgorithm", MessageImprint.defaultValues("hashAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description hashedMessage
	   */
			this.hashedMessage = (0, _pvutils.getParametersValue)(parameters, "hashedMessage", MessageImprint.defaultValues("hashedMessage"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(MessageImprint, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, MessageImprint.schema({
					names: {
						hashAlgorithm: {
							names: {
								blockName: "hashAlgorithm"
							}
						},
						hashedMessage: "hashedMessage"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for MessageImprint");
				//endregion
	
				//region Get internal properties from parsed schema
				this.hashAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.hashAlgorithm });
				this.hashedMessage = asn1.result.hashedMessage;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [this.hashAlgorithm.toSchema(), this.hashedMessage]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					hashAlgorithm: this.hashAlgorithm.toJSON(),
					hashedMessage: this.hashedMessage.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "hashAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "hashedMessage":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for MessageImprint class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "hashAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "hashedMessage":
						return memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0;
					default:
						throw new Error("Invalid member name for MessageImprint class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//MessageImprint ::= SEQUENCE  {
				//    hashAlgorithm                AlgorithmIdentifier,
				//    hashedMessage                OCTET STRING  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [hashAlgorithm]
	    * @property {string} [hashedMessage]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.hashAlgorithm || {}), new asn1js.OctetString({ name: names.hashedMessage || "" })]
				});
			}
		}]);
	
		return MessageImprint;
	}();
	//**************************************************************************************
	
	
	exports.default = MessageImprint;
	//# sourceMappingURL=MessageImprint.js.map

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _TBSRequest = __webpack_require__(468);
	
	var _TBSRequest2 = _interopRequireDefault(_TBSRequest);
	
	var _Signature = __webpack_require__(470);
	
	var _Signature2 = _interopRequireDefault(_Signature);
	
	var _Request = __webpack_require__(469);
	
	var _Request2 = _interopRequireDefault(_Request);
	
	var _CertID = __webpack_require__(458);
	
	var _CertID2 = _interopRequireDefault(_CertID);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var OCSPRequest = function () {
		//**********************************************************************************
		/**
	  * Constructor for OCSPRequest class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OCSPRequest() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OCSPRequest);
	
			//region Internal properties of the object
			/**
	   * @type {TBSRequest}
	   * @description tbsRequest
	   */
			this.tbsRequest = (0, _pvutils.getParametersValue)(parameters, "tbsRequest", OCSPRequest.defaultValues("tbsRequest"));
	
			if ("optionalSignature" in parameters)
				/**
	    * @type {Signature}
	    * @description optionalSignature
	    */
				this.optionalSignature = (0, _pvutils.getParametersValue)(parameters, "optionalSignature", OCSPRequest.defaultValues("optionalSignature"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OCSPRequest, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OCSP_REQUEST");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbsRequest = new _TBSRequest2.default({ schema: asn1.result.tbsRequest });
				if ("optionalSignature" in asn1.result) this.optionalSignature = new _Signature2.default({ schema: asn1.result.optionalSignature });
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.tbsRequest.toSchema(encodeFlag));
				if ("optionalSignature" in this) outputArray.push(this.optionalSignature.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					tbsRequest: this.tbsRequest.toJSON()
				};
	
				if ("optionalSignature" in this) _object.optionalSignature = this.optionalSignature.toJSON();
	
				return _object;
			}
	
			//**********************************************************************************
			/**
	   * Making OCSP Request for specific certificate
	   * @param {Certificate} certificate Certificate making OCSP Request for
	   * @param {Object} parameters Additional parameters
	   * @returns {Promise}
	   */
	
		}, {
			key: "createForCertificate",
			value: function createForCertificate(certificate, parameters) {
				var _this = this;
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var certID = new _CertID2.default();
				//endregion
	
				//region Create OCSP certificate identifier for the certificate
				sequence = sequence.then(function () {
					return certID.createForCertificate(certificate, parameters);
				});
				//endregion
	
				//region Make final request data
				sequence = sequence.then(function () {
					_this.tbsRequest = new _TBSRequest2.default({
						requestList: [new _Request2.default({
							reqCert: certID
						})]
					});
				}, function (error) {
					return Promise.reject(error);
				});
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
			/**
	   * Make signature for current OCSP Request
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   * @returns {Promise}
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey, hashAlgorithm) {
				var _this2 = this;
	
				//region Get a private key from function parameter
				if (typeof privateKey === "undefined") return Promise.reject("Need to provide a private key for signing");
				//endregion
	
				//region Get hashing algorithm
				if (typeof hashAlgorithm === "undefined") hashAlgorithm = "SHA-1";else {
					//region Simple check for supported algorithm
					var oid = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
					if (oid === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
					//endregion
				}
				//endregion
	
				//region Check that "optionalSignature" exists in the current request
				if ("optionalSignature" in this === false) return Promise.reject("Need to create \"optionalSignature\" field before signing");
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.optionalSignature.signatureAlgorithm.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								var hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.optionalSignature.signatureAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				var tbs = this.tbsRequest.toSchema(true).toBER(false);
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(tbs)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this2.optionalSignature.signature = new asn1js.BitString({ valueHex: result });
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
	
		}, {
			key: "verify",
			value: function verify() {}
			// TODO: Create the function
	
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbsRequest":
						return new _TBSRequest2.default();
					case "optionalSignature":
						return new _Signature2.default();
					default:
						throw new Error("Invalid member name for OCSPRequest class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "tbsRequest":
						return _TBSRequest2.default.compareWithDefault("tbs", memberValue.tbs) && _TBSRequest2.default.compareWithDefault("version", memberValue.version) && _TBSRequest2.default.compareWithDefault("requestorName", memberValue.requestorName) && _TBSRequest2.default.compareWithDefault("requestList", memberValue.requestList) && _TBSRequest2.default.compareWithDefault("requestExtensions", memberValue.requestExtensions);
					case "optionalSignature":
						return _Signature2.default.compareWithDefault("signatureAlgorithm", memberValue.signatureAlgorithm) && _Signature2.default.compareWithDefault("signature", memberValue.signature) && _Signature2.default.compareWithDefault("certs", memberValue.certs);
					default:
						throw new Error("Invalid member name for OCSPRequest class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OCSPRequest     ::=     SEQUENCE {
				//    tbsRequest                  TBSRequest,
				//    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [tbsRequest]
	    * @property {string} [optionalSignature]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "OCSPRequest",
					value: [_TBSRequest2.default.schema(names.tbsRequest || {
						names: {
							blockName: "tbsRequest"
						}
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [_Signature2.default.schema(names.optionalSignature || {
							names: {
								blockName: "optionalSignature"
							}
						})]
					})]
				});
			}
		}]);
	
		return OCSPRequest;
	}();
	//**************************************************************************************
	
	
	exports.default = OCSPRequest;
	//# sourceMappingURL=OCSPRequest.js.map

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	var _Request = __webpack_require__(469);
	
	var _Request2 = _interopRequireDefault(_Request);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	var _Extensions = __webpack_require__(427);
	
	var _Extensions2 = _interopRequireDefault(_Extensions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var TBSRequest = function () {
		//**********************************************************************************
		/**
	  * Constructor for TBSRequest class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function TBSRequest() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TBSRequest);
	
			//region Internal properties of the object
			/**
	   * @type {ArrayBuffer}
	   * @description tbs
	   */
			this.tbs = (0, _pvutils.getParametersValue)(parameters, "tbs", TBSRequest.defaultValues("tbs"));
	
			if ("version" in parameters)
				/**
	    * @type {number}
	    * @description version
	    */
				this.version = (0, _pvutils.getParametersValue)(parameters, "version", TBSRequest.defaultValues("version"));
	
			if ("requestorName" in parameters)
				/**
	    * @type {GeneralName}
	    * @description requestorName
	    */
				this.requestorName = (0, _pvutils.getParametersValue)(parameters, "requestorName", TBSRequest.defaultValues("requestorName"));
	
			/**
	   * @type {Array.<Request>}
	   * @description requestList
	   */
			this.requestList = (0, _pvutils.getParametersValue)(parameters, "requestList", TBSRequest.defaultValues("requestList"));
	
			if ("requestExtensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description requestExtensions
	    */
				this.requestExtensions = (0, _pvutils.getParametersValue)(parameters, "requestExtensions", TBSRequest.defaultValues("requestExtensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(TBSRequest, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, TBSRequest.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for TBSRequest");
				//endregion
	
				//region Get internal properties from parsed schema
				this.tbs = asn1.result.TBSRequest.valueBeforeDecode;
	
				if ("TBSRequest.version" in asn1.result) this.version = asn1.result["TBSRequest.version"].valueBlock.valueDec;
				if ("TBSRequest.requestorName" in asn1.result) this.requestorName = new _GeneralName2.default({ schema: asn1.result["TBSRequest.requestorName"] });
	
				this.requestList = Array.from(asn1.result["TBSRequest.requests"], function (element) {
					return new _Request2.default({ schema: element });
				});
	
				if ("TBSRequest.requestExtensions" in asn1.result) this.requestExtensions = Array.from(asn1.result["TBSRequest.requestExtensions"].valueBlock.value, function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Decode stored TBS value
				var tbsSchema = void 0;
	
				if (encodeFlag === false) {
					if (this.tbs.byteLength === 0) // No stored TBS part
						return TBSRequest.schema();
	
					tbsSchema = asn1js.fromBER(this.tbs).result;
				}
				//endregion
				//region Create TBS schema via assembling from TBS parts
				else {
						var outputArray = [];
	
						if ("version" in this) {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 0 // [0]
								},
								value: [new asn1js.Integer({ value: this.version })]
							}));
						}
	
						if ("requestorName" in this) {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 1 // [1]
								},
								value: [this.requestorName.toSchema()]
							}));
						}
	
						outputArray.push(new asn1js.Sequence({
							value: Array.from(this.requestList, function (element) {
								return element.toSchema();
							})
						}));
	
						if ("requestExtensions" in this) {
							outputArray.push(new asn1js.Constructed({
								idBlock: {
									tagClass: 3, // CONTEXT-SPECIFIC
									tagNumber: 2 // [2]
								},
								value: [new asn1js.Sequence({
									value: Array.from(this.requestExtensions, function (element) {
										return element.toSchema();
									})
								})]
							}));
						}
	
						tbsSchema = new asn1js.Sequence({
							value: outputArray
						});
					}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return tbsSchema;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {};
	
				if ("version" in this) _object.version = this.version;
	
				if ("requestorName" in this) _object.requestorName = this.requestorName.toJSON();
	
				_object.requestList = Array.from(this.requestList, function (element) {
					return element.toJSON();
				});
	
				if ("requestExtensions" in this) _object.requestExtensions = Array.from(this.requestExtensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "tbs":
						return new ArrayBuffer(0);
					case "version":
						return 0;
					case "requestorName":
						return new _GeneralName2.default();
					case "requestList":
					case "requestExtensions":
						return [];
					default:
						throw new Error("Invalid member name for TBSRequest class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "tbs":
						return memberValue.byteLength === 0;
					case "version":
						return memberValue === TBSRequest.defaultValues(memberName);
					case "requestorName":
						return memberValue.type === _GeneralName2.default.defaultValues("type") && Object.keys(memberValue.value).length === 0;
					case "requestList":
					case "requestExtensions":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for TBSRequest class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//TBSRequest      ::=     SEQUENCE {
				//    version             [0]     EXPLICIT Version DEFAULT v1,
				//    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
				//    requestList                 SEQUENCE OF Request,
				//    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [TBSRequestVersion]
	    * @property {string} [requestorName]
	    * @property {string} [requestList]
	    * @property {string} [requests]
	    * @property {string} [requestNames]
	    * @property {string} [extensions]
	    * @property {string} [requestExtensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "TBSRequest",
					value: [new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Integer({ name: names.TBSRequestVersion || "TBSRequest.version" })]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [_GeneralName2.default.schema(names.requestorName || {
							names: {
								blockName: "TBSRequest.requestorName"
							}
						})]
					}), new asn1js.Sequence({
						name: names.requestList || "TBSRequest.requestList",
						value: [new asn1js.Repeated({
							name: names.requests || "TBSRequest.requests",
							value: _Request2.default.schema(names.requestNames || {})
						})]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 2 // [2]
						},
						value: [_Extensions2.default.schema(names.extensions || {
							names: {
								blockName: names.requestExtensions || "TBSRequest.requestExtensions"
							}
						})]
					})]
				});
			}
		}]);
	
		return TBSRequest;
	}();
	//**************************************************************************************
	
	
	exports.default = TBSRequest;
	//# sourceMappingURL=TBSRequest.js.map

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _CertID = __webpack_require__(458);
	
	var _CertID2 = _interopRequireDefault(_CertID);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var Request = function () {
		//**********************************************************************************
		/**
	  * Constructor for Request class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Request() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Request);
	
			//region Internal properties of the object
			/**
	   * @type {CertID}
	   * @description reqCert
	   */
			this.reqCert = (0, _pvutils.getParametersValue)(parameters, "reqCert", Request.defaultValues("reqCert"));
	
			if ("singleRequestExtensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description singleRequestExtensions
	    */
				this.singleRequestExtensions = (0, _pvutils.getParametersValue)(parameters, "singleRequestExtensions", Request.defaultValues("singleRequestExtensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Request, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Request.schema({
					names: {
						reqCert: {
							names: {
								blockName: "reqCert"
							}
						},
						singleRequestExtensions: {
							names: {
								blockName: "singleRequestExtensions"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for Request");
				//endregion
	
				//region Get internal properties from parsed schema
				this.reqCert = new _CertID2.default({ schema: asn1.result.reqCert });
	
				if ("singleRequestExtensions" in asn1.result) this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.reqCert.toSchema());
	
				if ("singleRequestExtensions" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.singleRequestExtensions, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					reqCert: this.reqCert.toJSON()
				};
	
				if ("singleRequestExtensions" in this) _object.singleRequestExtensions = Array.from(this.singleRequestExtensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "reqCert":
						return new _CertID2.default();
					case "singleRequestExtensions":
						return [];
					default:
						throw new Error("Invalid member name for Request class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "reqCert":
						return memberValue.isEqual(Request.defaultValues(memberName));
					case "singleRequestExtensions":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for Request class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//Request         ::=     SEQUENCE {
				//    reqCert                     CertID,
				//    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [reqCert]
	    * @property {string} [extensions]
	    * @property {string} [singleRequestExtensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_CertID2.default.schema(names.reqCert || {}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [_Extension2.default.schema(names.extensions || {
							names: {
								blockName: names.singleRequestExtensions || ""
							}
						})]
					})]
				});
			}
		}]);
	
		return Request;
	}();
	//**************************************************************************************
	
	
	exports.default = Request;
	//# sourceMappingURL=Request.js.map

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var Signature = function () {
		//**********************************************************************************
		/**
	  * Constructor for Signature class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function Signature() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, Signature);
	
			//region Internal properties of the object
			/**
	   * @type {AlgorithmIdentifier}
	   * @description signatureAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", Signature.defaultValues("signatureAlgorithm"));
			/**
	   * @type {BitString}
	   * @description signature
	   */
			this.signature = (0, _pvutils.getParametersValue)(parameters, "signature", Signature.defaultValues("signature"));
	
			if ("certs" in parameters)
				/**
	    * @type {Array.<Certificate>}
	    * @description certs
	    */
				this.certs = (0, _pvutils.getParametersValue)(parameters, "certs", Signature.defaultValues("certs"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(Signature, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, Signature.schema({
					names: {
						signatureAlgorithm: {
							names: {
								blockName: "signatureAlgorithm"
							}
						},
						signature: "signature",
						certs: "certs"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ocsp.Signature");
				//endregion
	
				//region Get internal properties from parsed schema
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result.signatureAlgorithm });
				this.signature = asn1.result.signature;
	
				if ("certs" in asn1.result) this.certs = Array.from(asn1.result.certs, function (element) {
					return new _Certificate2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array of output sequence
				var outputArray = [];
	
				outputArray.push(this.signatureAlgorithm.toSchema());
				outputArray.push(this.signature);
	
				if ("certs" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: Array.from(this.certs, function (element) {
								return element.toSchema();
							})
						})]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					signatureAlgorithm: this.signatureAlgorithm.toJSON(),
					signature: this.signature.toJSON()
				};
	
				if ("certs" in this) _object.certs = Array.from(this.certs, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signature":
						return new asn1js.BitString();
					case "certs":
						return [];
					default:
						throw new Error("Invalid member name for Signature class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "signatureAlgorithm":
						return memberValue.algorithmId === "" && "algorithmParams" in memberValue === false;
					case "signature":
						return memberValue.isEqual(Signature.defaultValues(memberName));
					case "certs":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for Signature class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//Signature       ::=     SEQUENCE {
				//    signatureAlgorithm      AlgorithmIdentifier,
				//    signature               BIT STRING,
				//    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signature]
	    * @property {string} [certs]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [_AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {}), new asn1js.BitString({ name: names.signature || "" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Sequence({
							value: [new asn1js.Repeated({
								name: names.certs || "",
								value: _Certificate2.default.schema(names.certs || {})
							})]
						})]
					})]
				});
			}
		}]);
	
		return Signature;
	}();
	//**************************************************************************************
	
	
	exports.default = Signature;
	//# sourceMappingURL=Signature.js.map

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _ResponseBytes = __webpack_require__(472);
	
	var _ResponseBytes2 = _interopRequireDefault(_ResponseBytes);
	
	var _BasicOCSPResponse = __webpack_require__(455);
	
	var _BasicOCSPResponse2 = _interopRequireDefault(_BasicOCSPResponse);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var OCSPResponse = function () {
		//**********************************************************************************
		/**
	  * Constructor for OCSPResponse class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OCSPResponse() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OCSPResponse);
	
			//region Internal properties of the object
			/**
	   * @type {Enumerated}
	   * @description responseStatus
	   */
			this.responseStatus = (0, _pvutils.getParametersValue)(parameters, "responseStatus", OCSPResponse.defaultValues("responseStatus"));
	
			if ("responseBytes" in parameters)
				/**
	    * @type {ResponseBytes}
	    * @description responseBytes
	    */
				this.responseBytes = (0, _pvutils.getParametersValue)(parameters, "responseBytes", OCSPResponse.defaultValues("responseBytes"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OCSPResponse, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OCSP_RESPONSE");
				//endregion
	
				//region Get internal properties from parsed schema
				this.responseStatus = asn1.result.responseStatus;
				if ("responseBytes" in asn1.result) this.responseBytes = new _ResponseBytes2.default({ schema: asn1.result.responseBytes });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.responseStatus);
				if ("responseBytes" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.responseBytes.toSchema()]
					}));
				}
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					responseStatus: this.responseStatus.toJSON()
				};
	
				if ("responseBytes" in this) _object.responseBytes = this.responseBytes.toJSON();
	
				return _object;
			}
			//**********************************************************************************
			/**
	   * Get OCSP response status for specific certificate
	   * @param {Certificate} certificate
	   * @param {Certificate} issuerCertificate
	   * @returns {*}
	   */
	
		}, {
			key: "getCertificateStatus",
			value: function getCertificateStatus(certificate, issuerCertificate) {
				//region Initial variables
				var basicResponse = void 0;
	
				var result = {
					isForCertificate: false,
					status: 2 // 0 = good, 1 = revoked, 2 = unknown
				};
				//endregion
	
				//region Check that "ResponseBytes" contain "OCSP_BASIC_RESPONSE"
				if ("responseBytes" in this === false) return result;
	
				if (this.responseBytes.responseType !== "1.3.6.1.5.5.7.48.1.1") // id-pkix-ocsp-basic
					return result;
	
				try {
					var asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);
					basicResponse = new _BasicOCSPResponse2.default({ schema: asn1Basic.result });
				} catch (ex) {
					return result;
				}
				//endregion
	
				return basicResponse.getCertificateStatus(certificate, issuerCertificate);
			}
			//**********************************************************************************
			/**
	   * Make a signature for current OCSP Response
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   * @returns {Promise}
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey, hashAlgorithm) {
				//region Check that ResponseData has type BasicOCSPResponse and sign it
				if (this.responseBytes.responseType === "1.3.6.1.5.5.7.48.1.1") {
					var asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);
					var basicResponse = new _BasicOCSPResponse2.default({ schema: asn1.result });
	
					return basicResponse.sign(privateKey, hashAlgorithm);
				}
	
				return Promise.reject("Unknown ResponseBytes type: " + this.responseBytes.responseType);
				//endregion
			}
			//**********************************************************************************
			/**
	   * Verify current OCSP Response
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				//region Check that ResponseBytes exists in the object
				if ("responseBytes" in this === false) return Promise.reject("Empty ResponseBytes field");
				//endregion
	
				//region Check that ResponceData has type BasicOCSPResponse and verify it
				if (this.responseBytes.responseType === "1.3.6.1.5.5.7.48.1.1") {
					var asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);
					var basicResponse = new _BasicOCSPResponse2.default({ schema: asn1.result });
	
					return basicResponse.verify();
				}
	
				return Promise.reject("Unknown ResponseBytes type: " + this.responseBytes.responseType);
				//endregion
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "responseStatus":
						return new asn1js.Enumerated();
					case "responseBytes":
						return new _ResponseBytes2.default();
					default:
						throw new Error("Invalid member name for OCSPResponse class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "responseStatus":
						return memberValue.isEqual(OCSPResponse.defaultValues(memberName));
					case "responseBytes":
						return _ResponseBytes2.default.compareWithDefault("responseType", memberValue.responseType) && _ResponseBytes2.default.compareWithDefault("response", memberValue.response);
					default:
						throw new Error("Invalid member name for OCSPResponse class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OCSPResponse ::= SEQUENCE {
				//    responseStatus         OCSPResponseStatus,
				//    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
				//
				//OCSPResponseStatus ::= ENUMERATED {
				//    successful            (0),  -- Response has valid confirmations
				//    malformedRequest      (1),  -- Illegal confirmation request
				//    internalError         (2),  -- Internal error in issuer
				//    tryLater              (3),  -- Try again later
				//    -- (4) is not used
				//    sigRequired           (5),  -- Must sign the request
				//    unauthorized          (6)   -- Request unauthorized
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [responseStatus]
	    * @property {string} [responseBytes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "OCSPResponse",
					value: [new asn1js.Enumerated({ name: names.responseStatus || "responseStatus" }), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [_ResponseBytes2.default.schema(names.responseBytes || {
							names: {
								blockName: "responseBytes"
							}
						})]
					})]
				});
			}
		}]);
	
		return OCSPResponse;
	}();
	//**************************************************************************************
	
	
	exports.default = OCSPResponse;
	//# sourceMappingURL=OCSPResponse.js.map

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC6960
	 */
	var ResponseBytes = function () {
		//**********************************************************************************
		/**
	  * Constructor for ResponseBytes class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function ResponseBytes() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, ResponseBytes);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description responseType
	   */
			this.responseType = (0, _pvutils.getParametersValue)(parameters, "responseType", ResponseBytes.defaultValues("responseType"));
			/**
	   * @type {OctetString}
	   * @description response
	   */
			this.response = (0, _pvutils.getParametersValue)(parameters, "response", ResponseBytes.defaultValues("response"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(ResponseBytes, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, ResponseBytes.schema({
					names: {
						responseType: "responseType",
						response: "response"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for ResponseBytes");
				//endregion
	
				//region Get internal properties from parsed schema
				this.responseType = asn1.result.responseType.valueBlock.toString();
				this.response = asn1.result.response;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.responseType }), this.response]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				return {
					responseType: this.responseType,
					response: this.response.toJSON()
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "responseType":
						return "";
					case "response":
						return new asn1js.OctetString();
					default:
						throw new Error("Invalid member name for ResponseBytes class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "responseType":
						return memberValue === "";
					case "response":
						return memberValue.isEqual(ResponseBytes.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for ResponseBytes class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//ResponseBytes ::=       SEQUENCE {
				//    responseType   OBJECT IDENTIFIER,
				//    response       OCTET STRING }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [responseType]
	    * @property {string} [response]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.responseType || "" }), new asn1js.OctetString({ name: names.response || "" })]
				});
			}
		}]);
	
		return ResponseBytes;
	}();
	//**************************************************************************************
	
	
	exports.default = ResponseBytes;
	//# sourceMappingURL=ResponseBytes.js.map

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var OtherCertificateFormat = function () {
		//**********************************************************************************
		/**
	  * Constructor for OtherCertificateFormat class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function OtherCertificateFormat() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, OtherCertificateFormat);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description otherCertFormat
	   */
			this.otherCertFormat = (0, _pvutils.getParametersValue)(parameters, "otherCertFormat", OtherCertificateFormat.defaultValues("otherCertFormat"));
			/**
	   * @type {Any}
	   * @description otherCert
	   */
			this.otherCert = (0, _pvutils.getParametersValue)(parameters, "otherCert", OtherCertificateFormat.defaultValues("otherCert"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(OtherCertificateFormat, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, OtherCertificateFormat.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for OtherCertificateFormat");
				//endregion
	
				//region Get internal properties from parsed schema
				this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();
				this.otherCert = asn1.result.otherCert;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: [new asn1js.ObjectIdentifier({ value: this.otherCertFormat }), this.otherCert]
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var object = {
					otherCertFormat: this.otherCertFormat
				};
	
				if (!(this.otherCert instanceof asn1js.Any)) object.otherCert = this.otherCert.toJSON();
	
				return object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "otherCertFormat":
						return "";
					case "otherCert":
						return new asn1js.Any();
					default:
						throw new Error("Invalid member name for OtherCertificateFormat class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//OtherCertificateFormat ::= SEQUENCE {
				//    otherCertFormat OBJECT IDENTIFIER,
				//    otherCert ANY DEFINED BY otherCertFormat }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [otherCertFormat]
	    * @property {string} [otherCert]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.ObjectIdentifier({ name: names.otherCertFormat || "otherCertFormat" }), new asn1js.Any({ name: names.otherCert || "otherCert" })]
				});
			}
		}]);
	
		return OtherCertificateFormat;
	}();
	//**************************************************************************************
	
	
	exports.default = OtherCertificateFormat;
	//# sourceMappingURL=OtherCertificateFormat.js.map

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _ContentInfo = __webpack_require__(397);
	
	var _ContentInfo2 = _interopRequireDefault(_ContentInfo);
	
	var _MacData = __webpack_require__(465);
	
	var _MacData2 = _interopRequireDefault(_MacData);
	
	var _DigestInfo = __webpack_require__(462);
	
	var _DigestInfo2 = _interopRequireDefault(_DigestInfo);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _SignedData = __webpack_require__(475);
	
	var _SignedData2 = _interopRequireDefault(_SignedData);
	
	var _EncapsulatedContentInfo = __webpack_require__(463);
	
	var _EncapsulatedContentInfo2 = _interopRequireDefault(_EncapsulatedContentInfo);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _SignerInfo = __webpack_require__(476);
	
	var _SignerInfo2 = _interopRequireDefault(_SignerInfo);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _SignedAndUnsignedAttributes = __webpack_require__(477);
	
	var _SignedAndUnsignedAttributes2 = _interopRequireDefault(_SignedAndUnsignedAttributes);
	
	var _AuthenticatedSafe = __webpack_require__(396);
	
	var _AuthenticatedSafe2 = _interopRequireDefault(_AuthenticatedSafe);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC7292
	 */
	var PFX = function () {
		//**********************************************************************************
		/**
	  * Constructor for PFX class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PFX() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PFX);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", PFX.defaultValues("version"));
			/**
	   * @type {ContentInfo}
	   * @description authSafe
	   */
			this.authSafe = (0, _pvutils.getParametersValue)(parameters, "authSafe", PFX.defaultValues("authSafe"));
	
			if ("macData" in parameters)
				/**
	    * @type {MacData}
	    * @description macData
	    */
				this.macData = (0, _pvutils.getParametersValue)(parameters, "macData", PFX.defaultValues("macData"));
	
			if ("parsedValue" in parameters)
				/**
	    * @type {*}
	    * @description parsedValue
	    */
				this.parsedValue = (0, _pvutils.getParametersValue)(parameters, "parsedValue", PFX.defaultValues("parsedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PFX, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PFX.schema({
					names: {
						version: "version",
						authSafe: {
							names: {
								blockName: "authSafe"
							}
						},
						macData: {
							names: {
								blockName: "macData"
							}
						}
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PFX");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result.version.valueBlock.valueDec;
				this.authSafe = new _ContentInfo2.default({ schema: asn1.result.authSafe });
	
				if ("macData" in asn1.result) this.macData = new _MacData2.default({ schema: asn1.result.macData });
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Construct and return new ASN.1 schema for this object
				var outputArray = [new asn1js.Integer({ value: this.version }), this.authSafe.toSchema()];
	
				if ("macData" in this) outputArray.push(this.macData.toSchema());
	
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var output = {
					version: this.version,
					authSafe: this.authSafe.toJSON()
				};
	
				if ("macData" in this) output.macData = this.macData.toJSON();
	
				return output;
			}
	
			//**********************************************************************************
			/**
	   * Making ContentInfo from "parsedValue" object
	   * @param {Object} parameters Parameters, specific to each "integrity mode"
	   */
	
		}, {
			key: "makeInternalValues",
			value: function makeInternalValues() {
				var _this = this;
	
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//region Check mandatory parameter
				if (parameters instanceof Object === false) return Promise.reject("The \"parameters\" must has \"Object\" type");
	
				if ("parsedValue" in this === false) return Promise.reject("Please call \"parseValues\" function first in order to make \"parsedValue\" data");
	
				if ("integrityMode" in this.parsedValue === false) return Promise.reject("Absent mandatory parameter \"integrityMode\" inside \"parsedValue\"");
				//endregion
	
				//region Initial variables
				var sequence = Promise.resolve();
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Makes values for each particular integrity mode
				//region Check that we do have neccessary fields in "parsedValue" object
				if ("authenticatedSafe" in this.parsedValue === false) return Promise.reject("Absent mandatory parameter \"authenticatedSafe\" in \"parsedValue\"");
				//endregion
	
				switch (this.parsedValue.integrityMode) {
					//region HMAC-based integrity
					case 0:
						{
							//region Check additional mandatory parameters
							if ("iterations" in parameters === false) return Promise.reject("Absent mandatory parameter \"iterations\"");
	
							if ("pbkdf2HashAlgorithm" in parameters === false) return Promise.reject("Absent mandatory parameter \"pbkdf2HashAlgorithm\"");
	
							if ("hmacHashAlgorithm" in parameters === false) return Promise.reject("Absent mandatory parameter \"hmacHashAlgorithm\"");
	
							if ("password" in parameters === false) return Promise.reject("Absent mandatory parameter \"password\"");
							//endregion
	
							//region Initial variables
							var saltBuffer = new ArrayBuffer(64);
							var saltView = new Uint8Array(saltBuffer);
	
							(0, _common.getRandomValues)(saltView);
	
							var length = void 0;
	
							//region Choose correct length for HMAC key
							switch (parameters.hmacHashAlgorithm.toLowerCase()) {
								case "sha-1":
									length = 160;
									break;
								case "sha-256":
									length = 256;
									break;
								case "sha-384":
									length = 384;
									break;
								case "sha-512":
									length = 512;
									break;
								default:
									return Promise.reject("Incorrect \"parameters.hmacHashAlgorithm\" parameter: " + parameters.hmacHashAlgorithm);
							}
							//endregion
	
							var hmacAlgorithm = {
								name: "HMAC",
								length: length,
								hash: {
									name: parameters.hmacHashAlgorithm
								}
							};
							//endregion
	
							//region Generate HMAC key using PBKDF2
							//region Derive PBKDF2 key from "password" buffer
							sequence = sequence.then(function () {
								var passwordView = new Uint8Array(parameters.password);
	
								return crypto.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
							}, function (error) {
								return Promise.reject(error);
							});
							//endregion
	
							//region Derive key for HMAC
							sequence = sequence.then(function (result) {
								return crypto.deriveKey({
									name: "PBKDF2",
									hash: {
										name: parameters.pbkdf2HashAlgorithm
									},
									salt: saltView,
									iterations: parameters.iterations
								}, result, hmacAlgorithm, false, ["sign"]);
							}, function (error) {
								return Promise.reject(error);
							});
							//endregion
							//endregion
	
							//region Make final "MacData" value
							//region Make signed HMAC value
							sequence = sequence.then(function (result) {
								_this.authSafe = new _ContentInfo2.default({
									contentType: "1.2.840.113549.1.7.1",
									content: new asn1js.OctetString({ valueHex: _this.parsedValue.authenticatedSafe.toSchema().toBER(false) })
								});
	
								var data = _this.authSafe.content.toBER(false);
								var view = new Uint8Array(data);
	
								return crypto.sign(hmacAlgorithm, result, view);
							}, function (error) {
								return Promise.reject(error);
							});
							//endregion
	
							//region Make "MacData" values
							sequence = sequence.then(function (result) {
								_this.macData = new _MacData2.default({
									mac: new _DigestInfo2.default({
										digestAlgorithm: new _AlgorithmIdentifier2.default({
											algorithmId: (0, _common.getOIDByAlgorithm)({ name: parameters.hmacHashAlgorithm })
										}),
										digest: new asn1js.OctetString({ valueHex: result })
									}),
									macSalt: new asn1js.OctetString({ valueHex: saltBuffer }),
									iterations: parameters.iterations
								});
							}, function (error) {
								return Promise.reject(error);
							});
							//endregion
							//endregion
						}
						break;
					//endregion
					//region publicKey-based integrity
					case 1:
						{
							//region Check additional mandatory parameters
							if ("signingCertificate" in parameters === false) return Promise.reject("Absent mandatory parameter \"signingCertificate\"");
	
							if ("privateKey" in parameters === false) return Promise.reject("Absent mandatory parameter \"privateKey\"");
	
							if ("hashAlgorithm" in parameters === false) return Promise.reject("Absent mandatory parameter \"hashAlgorithm\"");
							//endregion
	
							//region Making data to be signed
							// NOTE: all internal data for "authenticatedSafe" must be already prepared.
							// Thus user must call "makeValues" for all internal "SafeContent" value with appropriate parameters.
							// Or user can choose to use values from initial parsing of existing PKCS#12 data.
	
							var toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);
							//endregion
	
							//region Initial variables
							var cmsSigned = new _SignedData2.default({
								version: 1,
								encapContentInfo: new _EncapsulatedContentInfo2.default({
									eContentType: "1.2.840.113549.1.7.1", // "data" content type
									eContent: new asn1js.OctetString({ valueHex: toBeSigned })
								}),
								certificates: [parameters.signingCertificate]
							});
							//endregion
	
							//region Making additional attributes for CMS Signed Data
							//region Create a message digest
							sequence = sequence.then(function () {
								return crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));
							});
							//endregion
	
							//region Combine all signed extensions
							sequence = sequence.then(function (result) {
								//region Initial variables
								var signedAttr = [];
								//endregion
	
								//region contentType
								signedAttr.push(new _Attribute2.default({
									type: "1.2.840.113549.1.9.3",
									values: [new asn1js.ObjectIdentifier({ value: "1.2.840.113549.1.7.1" })]
								}));
								//endregion
								//region signingTime
								signedAttr.push(new _Attribute2.default({
									type: "1.2.840.113549.1.9.5",
									values: [new asn1js.UTCTime({ valueDate: new Date() })]
								}));
								//endregion
								//region messageDigest
								signedAttr.push(new _Attribute2.default({
									type: "1.2.840.113549.1.9.4",
									values: [new asn1js.OctetString({ valueHex: result })]
								}));
								//endregion
	
								//region Making final value for "SignerInfo" type
								cmsSigned.signerInfos.push(new _SignerInfo2.default({
									version: 1,
									sid: new _IssuerAndSerialNumber2.default({
										issuer: parameters.signingCertificate.issuer,
										serialNumber: parameters.signingCertificate.serialNumber
									}),
									signedAttrs: new _SignedAndUnsignedAttributes2.default({
										type: 0,
										attributes: signedAttr
									})
								}));
								//endregion
							}, function (error) {
								return Promise.reject("Error during making digest for message: " + error);
							});
							//endregion
							//endregion
	
							//region Signing CMS Signed Data
							sequence = sequence.then(function () {
								return cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm);
							});
							//endregion
	
							//region Making final CMS_CONTENT_INFO type
							sequence = sequence.then(function () {
								_this.authSafe = new _ContentInfo2.default({
									contentType: "1.2.840.113549.1.7.2",
									content: cmsSigned.toSchema(true)
								});
							}, function (error) {
								return Promise.reject("Error during making signature: " + error);
							});
							//endregion
						}
						break;
					//endregion
					//region default
					default:
						return Promise.reject("Parameter \"integrityMode\" has unknown value: " + parameters.integrityMode);
					//endregion
				}
				//endregion
	
				return sequence;
			}
	
			//**********************************************************************************
	
		}, {
			key: "parseInternalValues",
			value: function parseInternalValues(parameters) {
				var _this2 = this;
	
				//region Check input data from "parameters" 
				if (parameters instanceof Object === false) return Promise.reject("The \"parameters\" must has \"Object\" type");
	
				if ("checkIntegrity" in parameters === false) parameters.checkIntegrity = true;
				//endregion 
	
				//region Initial variables 
				var sequence = Promise.resolve();
				//endregion 
	
				//region Get a "crypto" extension 
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion 
	
				//region Create value for "this.parsedValue.authenticatedSafe" and check integrity 
				this.parsedValue = {};
	
				switch (this.authSafe.contentType) {
					//region data 
					case "1.2.840.113549.1.7.1":
						{
							//region Check additional mandatory parameters
							if ("password" in parameters === false) return Promise.reject("Absent mandatory parameter \"password\"");
							//endregion
	
							//region Integrity based on HMAC
							this.parsedValue.integrityMode = 0;
							//endregion
	
							//region Check that we do have OCTETSTRING as "content"
							if (this.authSafe.content instanceof asn1js.OctetString === false) return Promise.reject("Wrong type of \"this.authSafe.content\"");
							//endregion
	
							//region Parse internal ASN.1 data
							var asn1 = asn1js.fromBER(this.authSafe.content.valueBlock.valueHex);
							if (asn1.offset === -1) return Promise.reject("Error during parsing of ASN.1 data inside \"this.authSafe.content\"");
							//endregion
	
							//region Set "authenticatedSafe" value
							this.parsedValue.authenticatedSafe = new _AuthenticatedSafe2.default({ schema: asn1.result });
							//endregion
	
							//region Check integrity
							if (parameters.checkIntegrity) {
								//region Check that "MacData" exists
								if ("macData" in this === false) return Promise.reject("Absent \"macData\" value, can not check PKCS# data integrity");
								//endregion
	
								//region Initial variables
								var hashAlgorithm = (0, _common.getAlgorithmByOID)(this.macData.mac.digestAlgorithm.algorithmId);
								if ("name" in hashAlgorithm === false) return Promise.reject("Unsupported digest algorithm: " + this.macData.mac.digestAlgorithm.algorithmId);
	
								var length = void 0;
	
								//region Choose correct length for HMAC key
								switch (hashAlgorithm.name.toLowerCase()) {
									case "sha-1":
										length = 160;
										break;
									case "sha-256":
										length = 256;
										break;
									case "sha-384":
										length = 384;
										break;
									case "sha-512":
										length = 512;
										break;
									default:
										return Promise.reject("Incorrect \"hashAlgorithm\": " + hashAlgorithm.name);
								}
								//endregion
	
								var hmacAlgorithm = {
									name: "HMAC",
									length: length,
									hash: {
										name: hashAlgorithm.name
									}
								};
								//endregion
	
								//region Generate HMAC key using PBKDF2
								//region Derive PBKDF2 key from "password" buffer
								sequence = sequence.then(function () {
									var passwordView = new Uint8Array(parameters.password);
	
									return crypto.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
								}, function (error) {
									return Promise.reject(error);
								});
								//endregion
	
								//region Derive key for HMAC
								sequence = sequence.then(function (result) {
									return crypto.deriveKey({
										name: "PBKDF2",
										hash: {
											name: hashAlgorithm.name
										},
										salt: new Uint8Array(_this2.macData.macSalt.valueBlock.valueHex),
										iterations: _this2.macData.iterations
									}, result, hmacAlgorithm, false, ["verify"]);
								}, function (error) {
									return Promise.reject(error);
								});
								//endregion
								//endregion
	
								//region Verify HMAC signature
								sequence = sequence.then(function (result) {
									var data = _this2.authSafe.content.toBER(false);
									var view = new Uint8Array(data);
	
									return crypto.verify(hmacAlgorithm, result, new Uint8Array(_this2.macData.mac.digest.valueBlock.valueHex), view);
								}, function (error) {
									return Promise.reject(error);
								});
	
								sequence = sequence.then(function (result) {
									if (result === false) return Promise.reject("Integrity for the PKCS#12 data is broken!");
								}, function (error) {
									return Promise.reject(error);
								});
								//endregion
							}
							//endregion
						}
						break;
					//endregion 
					//region signedData 
					case "1.2.840.113549.1.7.2":
						{
							//region Integrity based on signature using public key
							this.parsedValue.integrityMode = 1;
							//endregion
	
							//region Parse CMS Signed Data
							var cmsSigned = new _SignedData2.default({ schema: this.authSafe.content });
							//endregion
	
							//region Check that we do have OCTETSTRING as "content"
							if ("eContent" in cmsSigned.encapContentInfo === false) return Promise.reject("Absent of attached data in \"cmsSigned.encapContentInfo\"");
	
							if (cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString === false) return Promise.reject("Wrong type of \"cmsSigned.encapContentInfo.eContent\"");
							//endregion
	
							//region Create correct data block for verification
							var data = new ArrayBuffer(0);
	
							if (cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false) data = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;else {
								for (var i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++) {
									data = (0, _pvutils.utilConcatBuf)(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);
								}
							}
							//endregion
	
							//region Parse internal ASN.1 data
							var _asn = asn1js.fromBER(data);
							if (_asn.offset === -1) return Promise.reject("Error during parsing of ASN.1 data inside \"this.authSafe.content\"");
							//endregion
	
							//region Set "authenticatedSafe" value
							this.parsedValue.authenticatedSafe = new _AuthenticatedSafe2.default({ schema: _asn.result });
							//endregion
	
							//region Check integrity
							sequence = sequence.then(function () {
								return cmsSigned.verify({ signer: 0, checkChain: false });
							}).then(function (result) {
								if (result === false) return Promise.reject("Integrity for the PKCS#12 data is broken!");
							}, function (error) {
								return Promise.reject("Error during integrity verification: " + error);
							});
							//endregion
						}
						break;
					//endregion   
					//region default 
					default:
						return Promise.reject("Incorrect value for \"this.authSafe.contentType\": " + this.authSafe.contentType);
					//endregion 
				}
				//endregion 
	
				//region Return result of the function 
				return sequence.then(function () {
					return _this2;
				}, function (error) {
					return Promise.reject("Error during parsing: " + error);
				});
				//endregion   
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 3;
					case "authSafe":
						return new _ContentInfo2.default();
					case "macData":
						return new _MacData2.default();
					case "parsedValue":
						return {};
					default:
						throw new Error("Invalid member name for PFX class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === PFX.defaultValues(memberName);
					case "authSafe":
						return _ContentInfo2.default.compareWithDefault("contentType", memberValue.contentType) && _ContentInfo2.default.compareWithDefault("content", memberValue.content);
					case "macData":
						return _MacData2.default.compareWithDefault("mac", memberValue.mac) && _MacData2.default.compareWithDefault("macSalt", memberValue.macSalt) && _MacData2.default.compareWithDefault("iterations", memberValue.iterations);
					case "parsedValue":
						return memberValue instanceof Object && Object.keys(memberValue).length === 0;
					default:
						throw new Error("Invalid member name for PFX class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PFX ::= SEQUENCE {
				//    version		INTEGER {v3(3)}(v3,...),
				//    authSafe	ContentInfo,
				//    macData    	MacData OPTIONAL
				//}
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [authSafe]
	    * @property {string} [macData]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.version || "version" }), _ContentInfo2.default.schema(names.authSafe || {
						names: {
							blockName: "authSafe"
						}
					}), _MacData2.default.schema(names.macData || {
						names: {
							blockName: "macData",
							optional: true
						}
					})]
				});
			}
		}]);
	
		return PFX;
	}();
	//**************************************************************************************
	
	
	exports.default = PFX;
	//# sourceMappingURL=PFX.js.map

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _EncapsulatedContentInfo = __webpack_require__(463);
	
	var _EncapsulatedContentInfo2 = _interopRequireDefault(_EncapsulatedContentInfo);
	
	var _Certificate = __webpack_require__(406);
	
	var _Certificate2 = _interopRequireDefault(_Certificate);
	
	var _OtherCertificateFormat = __webpack_require__(473);
	
	var _OtherCertificateFormat2 = _interopRequireDefault(_OtherCertificateFormat);
	
	var _CertificateRevocationList = __webpack_require__(429);
	
	var _CertificateRevocationList2 = _interopRequireDefault(_CertificateRevocationList);
	
	var _OtherRevocationInfoFormat = __webpack_require__(436);
	
	var _OtherRevocationInfoFormat2 = _interopRequireDefault(_OtherRevocationInfoFormat);
	
	var _SignerInfo = __webpack_require__(476);
	
	var _SignerInfo2 = _interopRequireDefault(_SignerInfo);
	
	var _CertificateSet = __webpack_require__(434);
	
	var _CertificateSet2 = _interopRequireDefault(_CertificateSet);
	
	var _RevocationInfoChoices = __webpack_require__(435);
	
	var _RevocationInfoChoices2 = _interopRequireDefault(_RevocationInfoChoices);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	var _TSTInfo = __webpack_require__(478);
	
	var _TSTInfo2 = _interopRequireDefault(_TSTInfo);
	
	var _CertificateChainValidationEngine = __webpack_require__(459);
	
	var _CertificateChainValidationEngine2 = _interopRequireDefault(_CertificateChainValidationEngine);
	
	var _BasicOCSPResponse = __webpack_require__(455);
	
	var _BasicOCSPResponse2 = _interopRequireDefault(_BasicOCSPResponse);
	
	var _RSASSAPSSParams = __webpack_require__(380);
	
	var _RSASSAPSSParams2 = _interopRequireDefault(_RSASSAPSSParams);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var SignedData = function () {
		//**********************************************************************************
		/**
	  * Constructor for SignedData class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SignedData() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SignedData);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", SignedData.defaultValues("version"));
			/**
	   * @type {Array.<AlgorithmIdentifier>}
	   * @description digestAlgorithms
	   */
			this.digestAlgorithms = (0, _pvutils.getParametersValue)(parameters, "digestAlgorithms", SignedData.defaultValues("digestAlgorithms"));
			/**
	   * @type {EncapsulatedContentInfo}
	   * @description encapContentInfo
	   */
			this.encapContentInfo = (0, _pvutils.getParametersValue)(parameters, "encapContentInfo", SignedData.defaultValues("encapContentInfo"));
	
			if ("certificates" in parameters)
				/**
	    * @type {Array.<Certificate|OtherCertificateFormat>}
	    * @description certificates
	    */
				this.certificates = (0, _pvutils.getParametersValue)(parameters, "certificates", SignedData.defaultValues("certificates"));
	
			if ("crls" in parameters)
				/**
	    * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}
	    * @description crls
	    */
				this.crls = (0, _pvutils.getParametersValue)(parameters, "crls", SignedData.defaultValues("crls"));
	
			/**
	   * @type {Array.<SignerInfo>}
	   * @description signerInfos
	   */
			this.signerInfos = (0, _pvutils.getParametersValue)(parameters, "signerInfos", SignedData.defaultValues("signerInfos"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
	
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SignedData, [{
			key: "fromSchema",
	
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_SIGNED_DATA");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result["SignedData.version"].valueBlock.valueDec;
	
				if ("SignedData.digestAlgorithms" in asn1.result) // Could be empty SET of digest algorithms
					this.digestAlgorithms = Array.from(asn1.result["SignedData.digestAlgorithms"], function (algorithm) {
						return new _AlgorithmIdentifier2.default({ schema: algorithm });
					});
	
				this.encapContentInfo = new _EncapsulatedContentInfo2.default({ schema: asn1.result["SignedData.encapContentInfo"] });
	
				if ("SignedData.certificates" in asn1.result) {
					this.certificates = Array.from(asn1.result["SignedData.certificates"], function (certificate) {
						if (certificate.idBlock.tagClass === 1) return new _Certificate2.default({ schema: certificate });
	
						if (certificate.idBlock.tagClass === 3 && certificate.idBlock.tagNumber === 3) {
							//region Create SEQUENCE from [3]
							certificate.idBlock.tagClass = 1; // UNIVERSAL
							certificate.idBlock.tagNumber = 16; // SEQUENCE
							//endregion
	
							return new _OtherCertificateFormat2.default({ schema: certificate });
						}
						//else // For now we would ignore "AttributeCertificateV1" and "AttributeCertificateV1"
	
						return new _Certificate2.default();
					});
				}
	
				if ("SignedData.crls" in asn1.result) {
					this.crls = Array.from(asn1.result["SignedData.crls"], function (crl) {
						if (crl.idBlock.tagClass === 1) return new _CertificateRevocationList2.default({ schema: crl });
	
						//region Create SEQUENCE from [1]
						crl.idBlock.tagClass = 1; // UNIVERSAL
						crl.idBlock.tagNumber = 16; // SEQUENCE
						//endregion
	
						return new _OtherRevocationInfoFormat2.default({ schema: crl });
					});
				}
	
				if ("SignedData.signerInfos" in asn1.result) // Could be empty SET SignerInfos
					this.signerInfos = Array.from(asn1.result["SignedData.signerInfos"], function (signerInfoSchema) {
						return new _SignerInfo2.default({ schema: signerInfoSchema });
					});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
	
				//region Create array of digest algorithms
				outputArray.push(new asn1js.Set({
					value: Array.from(this.digestAlgorithms, function (algorithm) {
						return algorithm.toSchema(encodeFlag);
					})
				}));
				//endregion
	
				outputArray.push(this.encapContentInfo.toSchema());
	
				if ("certificates" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: Array.from(this.certificates, function (certificate) {
							if (certificate instanceof _OtherCertificateFormat2.default) {
								var certificateSchema = certificate.toSchema(encodeFlag);
	
								certificateSchema.idBlock.tagClass = 3;
								certificateSchema.idBlock.tagNumber = 3;
	
								return certificateSchema;
							}
	
							return certificate.toSchema(encodeFlag);
						})
					}));
				}
	
				if ("crls" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: Array.from(this.crls, function (crl) {
							if (crl instanceof _OtherRevocationInfoFormat2.default) {
								var crlSchema = crl.toSchema(encodeFlag);
	
								crlSchema.idBlock.tagClass = 3;
								crlSchema.idBlock.tagNumber = 1;
	
								return crlSchema;
							}
	
							return crl.toSchema(encodeFlag);
						})
					}));
				}
	
				//region Create array of signer infos
				outputArray.push(new asn1js.Set({
					value: Array.from(this.signerInfos, function (signerInfo) {
						return signerInfo.toSchema(encodeFlag);
					})
				}));
				//endregion
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
	
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version,
					digestAlgorithms: Array.from(this.digestAlgorithms, function (algorithm) {
						return algorithm.toJSON();
					}),
					encapContentInfo: this.encapContentInfo.toJSON()
				};
	
				if ("certificates" in this) _object.certificates = Array.from(this.certificates, function (certificate) {
					return certificate.toJSON();
				});
	
				if ("crls" in this) _object.crls = Array.from(this.crls, function (crl) {
					return crl.toJSON();
				});
	
				_object.signerInfos = Array.from(this.signerInfos, function (signerInfo) {
					return signerInfo.toJSON();
				});
	
				return _object;
			}
	
			//**********************************************************************************
			/**
	   * Verify current SignedData value
	   * @param signer
	   * @param data
	   * @param trustedCerts
	   * @param checkDate
	   * @param checkChain
	   * @param includeSignerCertificate
	   * @param extendedMode
	   * @returns {*}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this = this;
	
				var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    _ref$signer = _ref.signer,
				    signer = _ref$signer === undefined ? -1 : _ref$signer,
				    _ref$data = _ref.data,
				    data = _ref$data === undefined ? new ArrayBuffer(0) : _ref$data,
				    _ref$trustedCerts = _ref.trustedCerts,
				    trustedCerts = _ref$trustedCerts === undefined ? [] : _ref$trustedCerts,
				    _ref$checkDate = _ref.checkDate,
				    checkDate = _ref$checkDate === undefined ? new Date() : _ref$checkDate,
				    _ref$checkChain = _ref.checkChain,
				    checkChain = _ref$checkChain === undefined ? false : _ref$checkChain,
				    _ref$includeSignerCer = _ref.includeSignerCertificate,
				    includeSignerCertificate = _ref$includeSignerCer === undefined ? false : _ref$includeSignerCer,
				    _ref$extendedMode = _ref.extendedMode,
				    extendedMode = _ref$extendedMode === undefined ? false : _ref$extendedMode;
	
				//region Global variables 
				var sequence = Promise.resolve();
	
				var messageDigestValue = new ArrayBuffer(0);
	
				var publicKey = void 0;
	
				var shaAlgorithm = "";
	
				var signerCertificate = {};
				//endregion
	
				//region Get a "crypto" extension 
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion 
	
				//region Get a signer number
				if (signer === -1) {
					if (extendedMode) {
						return Promise.reject({
							date: checkDate,
							code: 1,
							message: "Unable to get signer index from input parameters",
							signatureVerified: null,
							signerCertificate: null,
							signerCertificateVerified: null
						});
					}
	
					return Promise.reject("Unable to get signer index from input parameters");
				}
				//endregion 
	
				//region Check that certificates field was included in signed data 
				if ("certificates" in this === false) {
					if (extendedMode) {
						return Promise.reject({
							date: checkDate,
							code: 2,
							message: "No certificates attached to this signed data",
							signatureVerified: null,
							signerCertificate: null,
							signerCertificateVerified: null
						});
					}
	
					return Promise.reject("No certificates attached to this signed data");
				}
				//endregion 
	
				//region Find a certificate for specified signer 
				if (this.signerInfos[signer].sid instanceof _IssuerAndSerialNumber2.default) {
					sequence = sequence.then(function () {
						var _iteratorNormalCompletion = true;
						var _didIteratorError = false;
						var _iteratorError = undefined;
	
						try {
							for (var _iterator = _this.certificates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var certificate = _step.value;
	
								if (certificate instanceof _Certificate2.default === false) continue;
	
								if (certificate.issuer.isEqual(_this.signerInfos[signer].sid.issuer) && certificate.serialNumber.isEqual(_this.signerInfos[signer].sid.serialNumber)) {
									signerCertificate = certificate;
									return Promise.resolve();
								}
							}
						} catch (err) {
							_didIteratorError = true;
							_iteratorError = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion && _iterator.return) {
									_iterator.return();
								}
							} finally {
								if (_didIteratorError) {
									throw _iteratorError;
								}
							}
						}
	
						if (extendedMode) {
							return Promise.reject({
								date: checkDate,
								code: 3,
								message: "Unable to find signer certificate",
								signatureVerified: null,
								signerCertificate: null,
								signerCertificateVerified: null
							});
						}
	
						return Promise.reject("Unable to find signer certificate");
					});
				} else // Find by SubjectKeyIdentifier
					{
						sequence = sequence.then(function () {
							return Promise.all(Array.from(_this.certificates.filter(function (certificate) {
								return certificate instanceof _Certificate2.default;
							}), function (certificate) {
								return crypto.digest({ name: "sha-1" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));
							})).then(function (results) {
								var _iteratorNormalCompletion2 = true;
								var _didIteratorError2 = false;
								var _iteratorError2 = undefined;
	
								try {
									for (var _iterator2 = _this.certificates.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
										var _step2$value = _slicedToArray(_step2.value, 2),
										    index = _step2$value[0],
										    certificate = _step2$value[1];
	
										if (certificate instanceof _Certificate2.default === false) continue;
	
										if ((0, _pvutils.isEqualBuffer)(results[index], _this.signerInfos[signer].sid.valueBlock.valueHex)) {
											signerCertificate = certificate;
											return Promise.resolve();
										}
									}
								} catch (err) {
									_didIteratorError2 = true;
									_iteratorError2 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion2 && _iterator2.return) {
											_iterator2.return();
										}
									} finally {
										if (_didIteratorError2) {
											throw _iteratorError2;
										}
									}
								}
	
								if (extendedMode) {
									return Promise.reject({
										date: checkDate,
										code: 3,
										message: "Unable to find signer certificate",
										signatureVerified: null,
										signerCertificate: null,
										signerCertificateVerified: null
									});
								}
	
								return Promise.reject("Unable to find signer certificate");
							}, function () {
								if (extendedMode) {
									return Promise.reject({
										date: checkDate,
										code: 3,
										message: "Unable to find signer certificate",
										signatureVerified: null,
										signerCertificate: null,
										signerCertificateVerified: null
									});
								}
	
								return Promise.reject("Unable to find signer certificate");
							});
						});
					}
				//endregion 
	
				//region Verify internal digest in case of "tSTInfo" content type 
				sequence = sequence.then(function () {
					if (_this.encapContentInfo.eContentType === "1.2.840.113549.1.9.16.1.4") {
						//region Check "eContent" precense
						if ("eContent" in _this.encapContentInfo === false) return false;
						//endregion
	
						//region Initialize TST_INFO value
						var asn1 = asn1js.fromBER(_this.encapContentInfo.eContent.valueBlock.valueHex);
						var tstInfo = void 0;
	
						try {
							tstInfo = new _TSTInfo2.default({ schema: asn1.result });
						} catch (ex) {
							return false;
						}
						//endregion
	
						//region Check that we do have detached data content
						if (data.byteLength === 0) {
							if (extendedMode) {
								return Promise.reject({
									date: checkDate,
									code: 4,
									message: "Missed detached data input array",
									signatureVerified: null,
									signerCertificate: signerCertificate,
									signerCertificateVerified: null
								});
							}
	
							return Promise.reject("Missed detached data input array");
						}
						//endregion
	
						return tstInfo.verify({ data: data });
					}
	
					return true;
				});
				//endregion 
	
				//region Make additional verification for signer's certificate 
				function checkCA(cert) {
					/// <param name="cert" type="in_window.org.pkijs.simpl.CERT">Certificate to find CA flag for</param>
	
					//region Do not include signer's certificate 
					if (cert.issuer.isEqual(signerCertificate.issuer) === true && cert.serialNumber.isEqual(signerCertificate.serialNumber) === true) return null;
					//endregion 
	
					var isCA = false;
	
					var _iteratorNormalCompletion3 = true;
					var _didIteratorError3 = false;
					var _iteratorError3 = undefined;
	
					try {
						for (var _iterator3 = cert.extensions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
							var extension = _step3.value;
	
							if (extension.extnID === "2.5.29.19") // BasicConstraints
								{
									if ("cA" in extension.parsedValue) {
										if (extension.parsedValue.cA === true) isCA = true;
									}
								}
						}
					} catch (err) {
						_didIteratorError3 = true;
						_iteratorError3 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion3 && _iterator3.return) {
								_iterator3.return();
							}
						} finally {
							if (_didIteratorError3) {
								throw _iteratorError3;
							}
						}
					}
	
					if (isCA) return cert;
	
					return null;
				}
	
				if (checkChain) {
					sequence = sequence.then(function (result) {
						//region Veify result of previous operation
						if (result === false) return false;
						//endregion
	
						return Promise.all(Array.from(_this.certificates.filter(function (certificate) {
							return certificate instanceof _Certificate2.default;
						}), function (certificate) {
							return checkCA(certificate);
						})).then(function (promiseResults) {
							var _certificateChainEngi;
	
							var certificateChainEngine = new _CertificateChainValidationEngine2.default({
								checkDate: checkDate,
								certs: Array.from(promiseResults.filter(function (_result) {
									return _result !== null;
								})),
								trustedCerts: trustedCerts
							});
	
							certificateChainEngine.certs.push(signerCertificate);
	
							if ("crls" in _this) {
								var _iteratorNormalCompletion4 = true;
								var _didIteratorError4 = false;
								var _iteratorError4 = undefined;
	
								try {
									for (var _iterator4 = _this.crls[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
										var crl = _step4.value;
	
										if (crl instanceof _CertificateRevocationList2.default) certificateChainEngine.crls.push(crl);else // Assumed "revocation value" has "OtherRevocationInfoFormat"
											{
												if (crl.otherRevInfoFormat === "1.3.6.1.5.5.7.48.1.1") // Basic OCSP response
													certificateChainEngine.ocsps.push(new _BasicOCSPResponse2.default({ schema: crl.otherRevInfo }));
											}
									}
								} catch (err) {
									_didIteratorError4 = true;
									_iteratorError4 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion4 && _iterator4.return) {
											_iterator4.return();
										}
									} finally {
										if (_didIteratorError4) {
											throw _iteratorError4;
										}
									}
								}
							}
	
							if ("ocsps" in _this) (_certificateChainEngi = certificateChainEngine.ocsps).push.apply(_certificateChainEngi, _toConsumableArray(_this.ocsps));
	
							return certificateChainEngine.verify().then(function (verificationResult) {
								if (verificationResult.result === true) return Promise.resolve(true);
	
								if (extendedMode) {
									return Promise.reject({
										date: checkDate,
										code: 5,
										message: "Validation of signer's certificate failed: " + verificationResult.resultMessage,
										signatureVerified: null,
										signerCertificate: signerCertificate,
										signerCertificateVerified: false
									});
								}
	
								return Promise.reject("Validation of signer's certificate failed");
							}, function (error) {
								if (extendedMode) {
									return Promise.reject({
										date: checkDate,
										code: 5,
										message: "Validation of signer's certificate failed with error: " + (error instanceof Object ? error.resultMessage : error),
										signatureVerified: null,
										signerCertificate: signerCertificate,
										signerCertificateVerified: false
									});
								}
	
								return Promise.reject("Validation of signer's certificate failed with error: " + (error instanceof Object ? error.resultMessage : error));
							});
						}, function (promiseError) {
							if (extendedMode) {
								return Promise.reject({
									date: checkDate,
									code: 6,
									message: "Error during checking certificates for CA flag: " + promiseError,
									signatureVerified: null,
									signerCertificate: signerCertificate,
									signerCertificateVerified: null
								});
							}
	
							return Promise.reject("Error during checking certificates for CA flag: " + promiseError);
						});
					});
				}
				//endregion 
	
				//region Find signer's hashing algorithm 
				sequence = sequence.then(function (result) {
					//region Veify result of previous operation
					if (result === false) return false;
					//endregion
	
					var signerInfoHashAlgorithm = (0, _common.getAlgorithmByOID)(_this.signerInfos[signer].digestAlgorithm.algorithmId);
					if ("name" in signerInfoHashAlgorithm === false) {
						if (extendedMode) {
							return Promise.reject({
								date: checkDate,
								code: 7,
								message: "Unsupported signature algorithm: " + _this.signerInfos[signer].digestAlgorithm.algorithmId,
								signatureVerified: null,
								signerCertificate: signerCertificate,
								signerCertificateVerified: true
							});
						}
	
						return Promise.reject("Unsupported signature algorithm: " + _this.signerInfos[signer].digestAlgorithm.algorithmId);
					}
	
					shaAlgorithm = signerInfoHashAlgorithm.name;
	
					return true;
				});
				//endregion 
	
				//region Create correct data block for verification 
				sequence = sequence.then(function (result) {
					//region Veify result of previous operation
					if (result === false) return false;
					//endregion
	
					if ("eContent" in _this.encapContentInfo) // Attached data
						{
							if (_this.encapContentInfo.eContent.idBlock.tagClass === 1 && _this.encapContentInfo.eContent.idBlock.tagNumber === 4) {
								if (_this.encapContentInfo.eContent.idBlock.isConstructed === false) data = _this.encapContentInfo.eContent.valueBlock.valueHex;else {
									var _iteratorNormalCompletion5 = true;
									var _didIteratorError5 = false;
									var _iteratorError5 = undefined;
	
									try {
										for (var _iterator5 = _this.encapContentInfo.eContent.valueBlock.value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
											var contentValue = _step5.value;
	
											data = (0, _pvutils.utilConcatBuf)(data, contentValue.valueBlock.valueHex);
										}
									} catch (err) {
										_didIteratorError5 = true;
										_iteratorError5 = err;
									} finally {
										try {
											if (!_iteratorNormalCompletion5 && _iterator5.return) {
												_iterator5.return();
											}
										} finally {
											if (_didIteratorError5) {
												throw _iteratorError5;
											}
										}
									}
								}
							} else data = _this.encapContentInfo.eContent.valueBlock.valueHex;
						} else // Detached data
						{
							if (data.byteLength === 0) // Check that "data" already provided by function parameter
								{
									if (extendedMode) {
										return Promise.reject({
											date: checkDate,
											code: 8,
											message: "Missed detached data input array",
											signatureVerified: null,
											signerCertificate: signerCertificate,
											signerCertificateVerified: true
										});
									}
	
									return Promise.reject("Missed detached data input array");
								}
						}
	
					if ("signedAttrs" in _this.signerInfos[signer]) {
						//region Check mandatory attributes
						var foundContentType = false;
						var foundMessageDigest = false;
	
						var _iteratorNormalCompletion6 = true;
						var _didIteratorError6 = false;
						var _iteratorError6 = undefined;
	
						try {
							for (var _iterator6 = _this.signerInfos[signer].signedAttrs.attributes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
								var attribute = _step6.value;
	
								//region Check that "content-type" attribute exists
								if (attribute.type === "1.2.840.113549.1.9.3") foundContentType = true;
								//endregion
	
								//region Check that "message-digest" attribute exists
								if (attribute.type === "1.2.840.113549.1.9.4") {
									foundMessageDigest = true;
									messageDigestValue = attribute.values[0].valueBlock.valueHex;
								}
								//endregion
	
								//region Speed-up searching
								if (foundContentType && foundMessageDigest) break;
								//endregion
							}
						} catch (err) {
							_didIteratorError6 = true;
							_iteratorError6 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion6 && _iterator6.return) {
									_iterator6.return();
								}
							} finally {
								if (_didIteratorError6) {
									throw _iteratorError6;
								}
							}
						}
	
						if (foundContentType === false) {
							if (extendedMode) {
								return Promise.reject({
									date: checkDate,
									code: 9,
									message: "Attribute \"content-type\" is a mandatory attribute for \"signed attributes\"",
									signatureVerified: null,
									signerCertificate: signerCertificate,
									signerCertificateVerified: true
								});
							}
	
							return Promise.reject("Attribute \"content-type\" is a mandatory attribute for \"signed attributes\"");
						}
	
						if (foundMessageDigest === false) {
							if (extendedMode) {
								return Promise.reject({
									date: checkDate,
									code: 10,
									message: "Attribute \"message-digest\" is a mandatory attribute for \"signed attributes\"",
									signatureVerified: null,
									signerCertificate: signerCertificate,
									signerCertificateVerified: true
								});
							}
	
							return Promise.reject("Attribute \"message-digest\" is a mandatory attribute for \"signed attributes\"");
						}
						//endregion
					}
	
					return true;
				});
				//endregion 
	
				//region Import public key from signer's certificate 
				sequence = sequence.then(function (result) {
					//region Veify result of previous operation
					if (result === false) return false;
					//endregion
	
					//region Get information about public key algorithm and default parameters for import
					var algorithmId = void 0;
					if (signerCertificate.signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signerCertificate.signatureAlgorithm.algorithmId;else algorithmId = signerCertificate.subjectPublicKeyInfo.algorithm.algorithmId;
	
					var algorithmObject = (0, _common.getAlgorithmByOID)(algorithmId);
					if ("name" in algorithmObject === false) {
						if (extendedMode) {
							return Promise.reject({
								date: checkDate,
								code: 11,
								message: "Unsupported public key algorithm: " + algorithmId,
								signatureVerified: null,
								signerCertificate: signerCertificate,
								signerCertificateVerified: true
							});
						}
	
						return Promise.reject("Unsupported public key algorithm: " + algorithmId);
					}
	
					var algorithm = (0, _common.getAlgorithmParameters)(algorithmObject.name, "importkey");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
	
					//region Special case for ECDSA
					if (algorithmObject.name === "ECDSA") {
						//region Get information about named curve
						var algorithmParamsChecked = false;
	
						if ("algorithmParams" in signerCertificate.subjectPublicKeyInfo.algorithm === true) {
							if ("idBlock" in signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams) {
								if (signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
							}
						}
	
						if (algorithmParamsChecked === false) return Promise.reject("Incorrect type for ECDSA public key parameters");
	
						var curveObject = (0, _common.getAlgorithmByOID)(signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						if ("name" in curveObject === false) return Promise.reject("Unsupported named curve algorithm: " + signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());
						//endregion
	
						algorithm.algorithm.namedCurve = curveObject.name;
					}
					//endregion
					//endregion
	
					var publicKeyInfoSchema = signerCertificate.subjectPublicKeyInfo.toSchema();
					var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);
					var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);
	
					return crypto.importKey("spki", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);
				});
				//endregion 
	
				//region Verify signer's signature 
				sequence = sequence.then(function (result) {
					// #region Veify result of previous operation
					if (typeof result === "boolean") return false;
					// #endregion
	
					publicKey = result;
	
					// #region Verify "message-digest" attribute in case of "signedAttrs"
					if ("signedAttrs" in _this.signerInfos[signer]) return crypto.digest(shaAlgorithm, new Uint8Array(data));
	
					return true;
					// #endregion
				}).then(function (result) {
					// #region Verify result of previous operation
					if (result === false) return false;
					// #endregion
	
					if ("signedAttrs" in _this.signerInfos[signer]) {
						if ((0, _pvutils.isEqualBuffer)(result, messageDigestValue)) {
							data = _this.signerInfos[signer].signedAttrs.encodedValue;
							return true;
						}
	
						return false;
					}
	
					return true;
				}).then(function (result) {
					//region Check result of previous operation
					if (result === false) return false;
					//endregion
	
					//region Get default algorithm parameters for verification
					var algorithm = (0, _common.getAlgorithmParameters)(publicKey.algorithm.name, "verify");
					if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
					//endregion
	
					//region Special case for RSA-PSS
					if (publicKey.algorithm.name === "RSA-PSS") {
						var pssParameters = void 0;
	
						try {
							pssParameters = new _RSASSAPSSParams2.default({ schema: _this.signerInfos[signer].signatureAlgorithm.algorithmParams });
						} catch (ex) {
							if (extendedMode) {
								return Promise.reject({
									date: checkDate,
									code: 12,
									message: ex,
									signatureVerified: null,
									signerCertificate: signerCertificate,
									signerCertificateVerified: true
								});
							}
	
							return Promise.reject(ex);
						}
	
						if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
	
						var hashName = "SHA-1";
	
						if ("hashAlgorithm" in pssParameters) {
							var hashAlgorithm = (0, _common.getAlgorithmByOID)(pssParameters.hashAlgorithm.algorithmId);
							if ("name" in hashAlgorithm === false) {
								if (extendedMode) {
									return Promise.reject({
										date: checkDate,
										code: 13,
										message: "Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId,
										signatureVerified: null,
										signerCertificate: signerCertificate,
										signerCertificateVerified: true
									});
								}
	
								return Promise.reject("Unrecognized hash algorithm: " + pssParameters.hashAlgorithm.algorithmId);
							}
	
							hashName = hashAlgorithm.name;
						}
	
						algorithm.algorithm.hash.name = hashName;
					}
					//endregion
	
					//region Special case for ECDSA signatures
					var signatureValue = _this.signerInfos[signer].signature.valueBlock.valueHex;
	
					if (publicKey.algorithm.name === "ECDSA") {
						var asn1 = asn1js.fromBER(signatureValue);
						signatureValue = (0, _common.createECDSASignatureFromCMS)(asn1.result);
					}
					//endregion
	
					return crypto.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(data));
				});
				//endregion 
	
				//region Make a final result 
				sequence = sequence.then(function (result) {
					if (extendedMode) {
						return {
							date: checkDate,
							code: 14,
							message: "",
							signatureVerified: result,
							signerCertificate: signerCertificate,
							signerCertificateVerified: true
						};
					}
	
					return result;
				}, function (error) {
					if (extendedMode) {
						if ("code" in error) return Promise.reject(error);
	
						return Promise.reject({
							date: checkDate,
							code: 15,
							message: "Error during verification: " + error.message,
							signatureVerified: null,
							signerCertificate: signerCertificate,
							signerCertificateVerified: true
						});
					}
	
					return Promise.reject(error);
				});
				//endregion 
	
				return sequence;
			}
	
			//**********************************************************************************
			/**
	   * Signing current SignedData
	   * @param {key} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   * @param {ArrayBuffer} [data] Detached data
	   * @returns {*}
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey, signerIndex, hashAlgorithm, data) {
				var _this2 = this;
	
				//region Initial variables
				data = data || new ArrayBuffer(0);
				var hashAlgorithmOID = "";
				//endregion
	
				//region Get a private key from function parameter
				if (typeof privateKey === "undefined") return Promise.reject("Need to provide a private key for signing");
				//endregion
	
				//region Get hashing algorithm
				if (typeof hashAlgorithm === "undefined") hashAlgorithm = "SHA-1";
	
				//region Simple check for supported algorithm
				hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
				if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
				//endregion
				//endregion
	
				//region Append information about hash algorithm
				if (this.digestAlgorithms.filter(function (algorithm) {
					return algorithm.algorithmId === hashAlgorithmOID;
				}).length === 0) {
					this.digestAlgorithms.push(new _AlgorithmIdentifier2.default({
						algorithmId: hashAlgorithmOID,
						algorithmParams: new asn1js.Null()
					}));
				}
	
				this.signerInfos[signerIndex].digestAlgorithm = new _AlgorithmIdentifier2.default({
					algorithmId: hashAlgorithmOID,
					algorithmParams: new asn1js.Null()
				});
				//endregion
	
				//region Get a "default parameters" for current algorithm
				var defParams = (0, _common.getAlgorithmParameters)(privateKey.algorithm.name, "sign");
				defParams.algorithm.hash.name = hashAlgorithm;
				//endregion
	
				//region Fill internal structures base on "privateKey" and "hashAlgorithm"
				switch (privateKey.algorithm.name.toUpperCase()) {
					case "RSASSA-PKCS1-V1_5":
					case "ECDSA":
						this.signerInfos[signerIndex].signatureAlgorithm.algorithmId = (0, _common.getOIDByAlgorithm)(defParams.algorithm);
						break;
					case "RSA-PSS":
						{
							//region Set "saltLength" as a length (in octets) of hash function result
							switch (hashAlgorithm.toUpperCase()) {
								case "SHA-256":
									defParams.algorithm.saltLength = 32;
									break;
								case "SHA-384":
									defParams.algorithm.saltLength = 48;
									break;
								case "SHA-512":
									defParams.algorithm.saltLength = 64;
									break;
								default:
							}
							//endregion
	
							//region Fill "RSASSA_PSS_params" object
							var paramsObject = {};
	
							if (hashAlgorithm.toUpperCase() !== "SHA-1") {
								hashAlgorithmOID = (0, _common.getOIDByAlgorithm)({ name: hashAlgorithm });
								if (hashAlgorithmOID === "") return Promise.reject("Unsupported hash algorithm: " + hashAlgorithm);
	
								paramsObject.hashAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: hashAlgorithmOID,
									algorithmParams: new asn1js.Null()
								});
	
								paramsObject.maskGenAlgorithm = new _AlgorithmIdentifier2.default({
									algorithmId: "1.2.840.113549.1.1.8", // MGF1
									algorithmParams: paramsObject.hashAlgorithm.toSchema()
								});
							}
	
							if (defParams.algorithm.saltLength !== 20) paramsObject.saltLength = defParams.algorithm.saltLength;
	
							var pssParameters = new _RSASSAPSSParams2.default(paramsObject);
							//endregion
	
							//region Automatically set signature algorithm
							this.signerInfos[signerIndex].signatureAlgorithm = new _AlgorithmIdentifier2.default({
								algorithmId: "1.2.840.113549.1.1.10",
								algorithmParams: pssParameters.toSchema()
							});
							//endregion
						}
						break;
					default:
						return Promise.reject("Unsupported signature algorithm: " + privateKey.algorithm.name);
				}
				//endregion
	
				//region Create TBS data for signing
				if ("signedAttrs" in this.signerInfos[signerIndex]) {
					if (this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0) data = this.signerInfos[signerIndex].signedAttrs.encodedValue;else {
						data = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);
	
						//region Change type from "[0]" to "SET" acordingly to standard
						var view = new Uint8Array(data);
						view[0] = 0x31;
						//endregion
					}
				} else {
					if ("eContent" in this.encapContentInfo) // Attached data
						{
							if (this.encapContentInfo.eContent.idBlock.tagClass === 1 && this.encapContentInfo.eContent.idBlock.tagNumber === 4) {
								if (this.encapContentInfo.eContent.idBlock.isConstructed === false) data = this.encapContentInfo.eContent.valueBlock.valueHex;else {
									var _iteratorNormalCompletion7 = true;
									var _didIteratorError7 = false;
									var _iteratorError7 = undefined;
	
									try {
										for (var _iterator7 = this.encapContentInfo.eContent.valueBlock.value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
											var content = _step7.value;
	
											data = (0, _pvutils.utilConcatBuf)(data, content.valueBlock.valueHex);
										}
									} catch (err) {
										_didIteratorError7 = true;
										_iteratorError7 = err;
									} finally {
										try {
											if (!_iteratorNormalCompletion7 && _iterator7.return) {
												_iterator7.return();
											}
										} finally {
											if (_didIteratorError7) {
												throw _iteratorError7;
											}
										}
									}
								}
							} else data = this.encapContentInfo.eContent.valueBlock.valueHex;
						} else // Detached data
						{
							if (data.byteLength === 0) // Check that "data" already provided by function parameter
								return Promise.reject("Missed detached data input array");
						}
				}
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Signing TBS data on provided private key
				return crypto.sign(defParams.algorithm, privateKey, new Uint8Array(data)).then(function (result) {
					//region Special case for ECDSA algorithm
					if (defParams.algorithm.name === "ECDSA") result = (0, _common.createCMSECDSASignature)(result);
					//endregion
	
					_this2.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });
	
					return result;
				}, function (error) {
					return Promise.reject("Signing error: " + error);
				});
				//endregion
			}
	
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "digestAlgorithms":
						return [];
					case "encapContentInfo":
						return new _EncapsulatedContentInfo2.default();
					case "certificates":
						return [];
					case "crls":
						return [];
					case "signerInfos":
						return [];
					default:
						throw new Error("Invalid member name for SignedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return memberValue === SignedData.defaultValues("version");
					case "encapContentInfo":
						return new _EncapsulatedContentInfo2.default();
					case "digestAlgorithms":
					case "certificates":
					case "crls":
					case "signerInfos":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for SignedData class: " + memberName);
				}
			}
	
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SignedData ::= SEQUENCE {
				//    version CMSVersion,
				//    digestAlgorithms DigestAlgorithmIdentifiers,
				//    encapContentInfo EncapsulatedContentInfo,
				//    certificates [0] IMPLICIT CertificateSet OPTIONAL,
				//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
				//    signerInfos SignerInfos }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [optional]
	    * @property {string} [digestAlgorithms]
	    * @property {string} [encapContentInfo]
	    * @property {string} [certificates]
	    * @property {string} [crls]
	    * @property {string} [signerInfos]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				if ("optional" in names === false) names.optional = false;
	
				return new asn1js.Sequence({
					name: names.blockName || "SignedData",
					optional: names.optional,
					value: [new asn1js.Integer({ name: names.version || "SignedData.version" }), new asn1js.Set({
						value: [new asn1js.Repeated({
							name: names.digestAlgorithms || "SignedData.digestAlgorithms",
							value: _AlgorithmIdentifier2.default.schema()
						})]
					}), _EncapsulatedContentInfo2.default.schema(names.encapContentInfo || {
						names: {
							blockName: "SignedData.encapContentInfo"
						}
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: _CertificateSet2.default.schema(names.certificates || {
							names: {
								certificates: "SignedData.certificates"
							}
						}).valueBlock.value
					}), // IMPLICIT CertificateSet
					new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: _RevocationInfoChoices2.default.schema(names.crls || {
							names: {
								crls: "SignedData.crls"
							}
						}).valueBlock.value
					}), // IMPLICIT RevocationInfoChoices
					new asn1js.Set({
						value: [new asn1js.Repeated({
							name: names.signerInfos || "SignedData.signerInfos",
							value: _SignerInfo2.default.schema()
						})]
					})]
				});
			}
		}]);
	
		return SignedData;
	}();
	//**************************************************************************************
	
	
	exports.default = SignedData;
	//# sourceMappingURL=SignedData.js.map

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _AlgorithmIdentifier = __webpack_require__(379);
	
	var _AlgorithmIdentifier2 = _interopRequireDefault(_AlgorithmIdentifier);
	
	var _SignedAndUnsignedAttributes = __webpack_require__(477);
	
	var _SignedAndUnsignedAttributes2 = _interopRequireDefault(_SignedAndUnsignedAttributes);
	
	var _IssuerAndSerialNumber = __webpack_require__(440);
	
	var _IssuerAndSerialNumber2 = _interopRequireDefault(_IssuerAndSerialNumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var SignerInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for SignerInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SignerInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SignerInfo);
	
			//region Internal properties of the object
			/**
	   * @type {string}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", SignerInfo.defaultValues("version"));
			/**
	   * @type {Object}
	   * @description sid
	   */
			this.sid = (0, _pvutils.getParametersValue)(parameters, "sid", SignerInfo.defaultValues("sid"));
			/**
	   * @type {AlgorithmIdentifier}
	   * @description digestAlgorithm
	   */
			this.digestAlgorithm = (0, _pvutils.getParametersValue)(parameters, "digestAlgorithm", SignerInfo.defaultValues("digestAlgorithm"));
	
			if ("signedAttrs" in parameters)
				/**
	    * @type {SignedAndUnsignedAttributes}
	    * @description signedAttrs
	    */
				this.signedAttrs = (0, _pvutils.getParametersValue)(parameters, "signedAttrs", SignerInfo.defaultValues("signedAttrs"));
	
			/**
	   * @type {AlgorithmIdentifier}
	   * @description digestAlgorithm
	   */
			this.signatureAlgorithm = (0, _pvutils.getParametersValue)(parameters, "signatureAlgorithm", SignerInfo.defaultValues("signatureAlgorithm"));
			/**
	   * @type {OctetString}
	   * @description signature
	   */
			this.signature = (0, _pvutils.getParametersValue)(parameters, "signature", SignerInfo.defaultValues("signature"));
	
			if ("unsignedAttrs" in parameters)
				/**
	    * @type {SignedAndUnsignedAttributes}
	    * @description unsignedAttrs
	    */
				this.unsignedAttrs = (0, _pvutils.getParametersValue)(parameters, "unsignedAttrs", SignerInfo.defaultValues("unsignedAttrs"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SignerInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for CMS_SIGNER_INFO");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result["SignerInfo.version"].valueBlock.valueDec;
	
				var currentSid = asn1.result["SignerInfo.sid"];
				if (currentSid.idBlock.tagClass === 1) this.sid = new _IssuerAndSerialNumber2.default({ schema: currentSid });else this.sid = currentSid;
	
				this.digestAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result["SignerInfo.digestAlgorithm"] });
				if ("SignerInfo.signedAttrs" in asn1.result) this.signedAttrs = new _SignedAndUnsignedAttributes2.default({ type: 0, schema: asn1.result["SignerInfo.signedAttrs"] });
	
				this.signatureAlgorithm = new _AlgorithmIdentifier2.default({ schema: asn1.result["SignerInfo.signatureAlgorithm"] });
				this.signature = asn1.result["SignerInfo.signature"];
				if ("SignerInfo.unsignedAttrs" in asn1.result) this.unsignedAttrs = new _SignedAndUnsignedAttributes2.default({ type: 1, schema: asn1.result["SignerInfo.unsignedAttrs"] });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				if (SignerInfo.compareWithDefault("sid", this.sid)) throw new Error("Incorrectly initialized \"SignerInfo\" class");
	
				//region Create array for output sequence 
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
	
				if (this.sid instanceof _IssuerAndSerialNumber2.default) outputArray.push(this.sid.toSchema());else outputArray.push(this.sid);
	
				outputArray.push(this.digestAlgorithm.toSchema());
	
				if ("signedAttrs" in this) {
					if (SignerInfo.compareWithDefault("signedAttrs", this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());
				}
	
				outputArray.push(this.signatureAlgorithm.toSchema());
				outputArray.push(this.signature);
	
				if ("unsignedAttrs" in this) {
					if (SignerInfo.compareWithDefault("unsignedAttrs", this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());
				}
				//endregion 
	
				//region Construct and return new ASN.1 schema for this object 
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion 
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				if (SignerInfo.compareWithDefault("sid", this.sid)) throw new Error("Incorrectly initialized \"SignerInfo\" class");
	
				var _object = {
					version: this.version
				};
	
				if (!(this.sid instanceof asn1js.Any)) _object.sid = this.sid.toJSON();
	
				_object.digestAlgorithm = this.digestAlgorithm.toJSON();
	
				if (SignerInfo.compareWithDefault("signedAttrs", this.signedAttrs) === false) _object.signedAttrs = this.signedAttrs.toJSON();
	
				_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();
				_object.signature = this.signature.toJSON();
	
				if (SignerInfo.compareWithDefault("unsignedAttrs", this.unsignedAttrs) === false) _object.unsignedAttrs = this.unsignedAttrs.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "sid":
						return new asn1js.Any();
					case "digestAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signedAttrs":
						return new _SignedAndUnsignedAttributes2.default({ type: 0 });
					case "signatureAlgorithm":
						return new _AlgorithmIdentifier2.default();
					case "signature":
						return new asn1js.OctetString();
					case "unsignedAttrs":
						return new _SignedAndUnsignedAttributes2.default({ type: 1 });
					default:
						throw new Error("Invalid member name for SignerInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
						return SignerInfo.defaultValues("version") === memberValue;
					case "sid":
						return memberValue instanceof asn1js.Any;
					case "digestAlgorithm":
						if (memberValue instanceof _AlgorithmIdentifier2.default === false) return false;
	
						return memberValue.isEqual(SignerInfo.defaultValues("digestAlgorithm"));
					case "signedAttrs":
						return _SignedAndUnsignedAttributes2.default.compareWithDefault("type", memberValue.type) && _SignedAndUnsignedAttributes2.default.compareWithDefault("attributes", memberValue.attributes) && _SignedAndUnsignedAttributes2.default.compareWithDefault("encodedValue", memberValue.encodedValue);
					case "signatureAlgorithm":
						if (memberValue instanceof _AlgorithmIdentifier2.default === false) return false;
	
						return memberValue.isEqual(SignerInfo.defaultValues("signatureAlgorithm"));
					case "signature":
					case "unsignedAttrs":
						return _SignedAndUnsignedAttributes2.default.compareWithDefault("type", memberValue.type) && _SignedAndUnsignedAttributes2.default.compareWithDefault("attributes", memberValue.attributes) && _SignedAndUnsignedAttributes2.default.compareWithDefault("encodedValue", memberValue.encodedValue);
					default:
						throw new Error("Invalid member name for SignerInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//SignerInfo ::= SEQUENCE {
				//    version CMSVersion,
				//    sid SignerIdentifier,
				//    digestAlgorithm DigestAlgorithmIdentifier,
				//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
				//    signatureAlgorithm SignatureAlgorithmIdentifier,
				//    signature SignatureValue,
				//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
				//
				//SignerIdentifier ::= CHOICE {
				//    issuerAndSerialNumber IssuerAndSerialNumber,
				//    subjectKeyIdentifier [0] SubjectKeyIdentifier }
				//
				//SubjectKeyIdentifier ::= OCTET STRING
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [sid]
	    * @property {string} [digestAlgorithm]
	    * @property {string} [signedAttrs]
	    * @property {string} [signatureAlgorithm]
	    * @property {string} [signature]
	    * @property {string} [unsignedAttrs]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: "SignerInfo",
					value: [new asn1js.Integer({ name: names.version || "SignerInfo.version" }), new asn1js.Choice({
						value: [_IssuerAndSerialNumber2.default.schema(names.sid || {
							names: {
								blockName: "SignerInfo.sid"
							}
						}), new asn1js.Constructed({
							optional: true,
							name: names.sid || "SignerInfo.sid",
							idBlock: {
								tagClass: 3, // CONTEXT-SPECIFIC
								tagNumber: 0 // [0]
							},
							value: [new asn1js.OctetString()]
						})]
					}), _AlgorithmIdentifier2.default.schema(names.digestAlgorithm || {
						names: {
							blockName: "SignerInfo.digestAlgorithm"
						}
					}), _SignedAndUnsignedAttributes2.default.schema(names.signedAttrs || {
						names: {
							blockName: "SignerInfo.signedAttrs",
							tagNumber: 0
						}
					}), _AlgorithmIdentifier2.default.schema(names.signatureAlgorithm || {
						names: {
							blockName: "SignerInfo.signatureAlgorithm"
						}
					}), new asn1js.OctetString({ name: names.signature || "SignerInfo.signature" }), _SignedAndUnsignedAttributes2.default.schema(names.unsignedAttrs || {
						names: {
							blockName: "SignerInfo.unsignedAttrs",
							tagNumber: 1
						}
					})]
				});
			}
		}]);
	
		return SignerInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = SignerInfo;
	//# sourceMappingURL=SignerInfo.js.map

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _Attribute = __webpack_require__(386);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC5652
	 */
	var SignedAndUnsignedAttributes = function () {
		//**********************************************************************************
		/**
	  * Constructor for SignedAndUnsignedAttributes class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function SignedAndUnsignedAttributes() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, SignedAndUnsignedAttributes);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description type
	   */
			this.type = (0, _pvutils.getParametersValue)(parameters, "type", SignedAndUnsignedAttributes.defaultValues("type"));
			/**
	   * @type {Array}
	   * @description attributes
	   */
			this.attributes = (0, _pvutils.getParametersValue)(parameters, "attributes", SignedAndUnsignedAttributes.defaultValues("attributes"));
			/**
	   * @type {ArrayBuffer}
	   * @description encodedValue Need to have it in order to successfully process with signature verification
	   */
			this.encodedValue = (0, _pvutils.getParametersValue)(parameters, "encodedValue", SignedAndUnsignedAttributes.defaultValues("encodedValue"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(SignedAndUnsignedAttributes, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({
					names: {
						tagNumber: this.type,
						attributes: "attributes"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for SignedUnsignedAttributes");
				//endregion
	
				//region Get internal properties from parsed schema
				this.type = asn1.result.idBlock.tagNumber;
				this.encodedValue = asn1.result.valueBeforeDecode;
	
				//region Change type from "[0]" to "SET" accordingly to standard
				var encodedView = new Uint8Array(this.encodedValue);
				encodedView[0] = 0x31;
				//endregion
	
				if ("attributes" in asn1.result === false) {
					if (this.type === 0) throw new Error("Wrong structure of SignedUnsignedAttributes");else return; // Not so important in case of "UnsignedAttributes"
				}
	
				this.attributes = Array.from(asn1.result.attributes, function (element) {
					return new _Attribute2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				if (SignedAndUnsignedAttributes.compareWithDefault("type", this.type) || SignedAndUnsignedAttributes.compareWithDefault("attributes", this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Constructed({
					optional: true,
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: this.type // "SignedAttributes" = 0, "UnsignedAttributes" = 1
					},
					value: Array.from(this.attributes, function (element) {
						return element.toSchema();
					})
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				if (SignedAndUnsignedAttributes.compareWithDefault("type", this.type) || SignedAndUnsignedAttributes.compareWithDefault("attributes", this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
	
				return {
					type: this.type,
					attributes: Array.from(this.attributes, function (element) {
						return element.toJSON();
					})
				};
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "type":
						return -1;
					case "attributes":
						return [];
					case "encodedValue":
						return new ArrayBuffer(0);
					default:
						throw new Error("Invalid member name for SignedAndUnsignedAttributes class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "type":
						return memberValue === SignedAndUnsignedAttributes.defaultValues("type");
					case "attributes":
						return memberValue.length === 0;
					case "encodedValue":
						return memberValue.byteLength === 0;
					default:
						throw new Error("Invalid member name for SignedAndUnsignedAttributes class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
				//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
	
				//SignedAttributes ::= SET SIZE (1..MAX) OF Attribute
	
				//UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {number} [tagNumber]
	    * @property {string} [attributes]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Constructed({
					name: names.blockName || "",
					optional: true,
					idBlock: {
						tagClass: 3, // CONTEXT-SPECIFIC
						tagNumber: names.tagNumber // "SignedAttributes" = 0, "UnsignedAttributes" = 1
					},
					value: [new asn1js.Repeated({
						name: names.attributes || "",
						value: _Attribute2.default.schema()
					})]
				});
			}
		}]);
	
		return SignedAndUnsignedAttributes;
	}();
	//**************************************************************************************
	
	
	exports.default = SignedAndUnsignedAttributes;
	//# sourceMappingURL=SignedAndUnsignedAttributes.js.map

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _common = __webpack_require__(378);
	
	var _MessageImprint = __webpack_require__(466);
	
	var _MessageImprint2 = _interopRequireDefault(_MessageImprint);
	
	var _Accuracy = __webpack_require__(394);
	
	var _Accuracy2 = _interopRequireDefault(_Accuracy);
	
	var _GeneralName = __webpack_require__(391);
	
	var _GeneralName2 = _interopRequireDefault(_GeneralName);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var TSTInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for TSTInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function TSTInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TSTInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", TSTInfo.defaultValues("version"));
			/**
	   * @type {string}
	   * @description policy
	   */
			this.policy = (0, _pvutils.getParametersValue)(parameters, "policy", TSTInfo.defaultValues("policy"));
			/**
	   * @type {MessageImprint}
	   * @description messageImprint
	   */
			this.messageImprint = (0, _pvutils.getParametersValue)(parameters, "messageImprint", TSTInfo.defaultValues("messageImprint"));
			/**
	   * @type {Integer}
	   * @description serialNumber
	   */
			this.serialNumber = (0, _pvutils.getParametersValue)(parameters, "serialNumber", TSTInfo.defaultValues("serialNumber"));
			/**
	   * @type {Date}
	   * @description genTime
	   */
			this.genTime = (0, _pvutils.getParametersValue)(parameters, "genTime", TSTInfo.defaultValues("genTime"));
	
			if ("accuracy" in parameters)
				/**
	    * @type {Accuracy}
	    * @description accuracy
	    */
				this.accuracy = (0, _pvutils.getParametersValue)(parameters, "accuracy", TSTInfo.defaultValues("accuracy"));
	
			if ("ordering" in parameters)
				/**
	    * @type {boolean}
	    * @description ordering
	    */
				this.ordering = (0, _pvutils.getParametersValue)(parameters, "ordering", TSTInfo.defaultValues("ordering"));
	
			if ("nonce" in parameters)
				/**
	    * @type {Integer}
	    * @description nonce
	    */
				this.nonce = (0, _pvutils.getParametersValue)(parameters, "nonce", TSTInfo.defaultValues("nonce"));
	
			if ("tsa" in parameters)
				/**
	    * @type {GeneralName}
	    * @description tsa
	    */
				this.tsa = (0, _pvutils.getParametersValue)(parameters, "tsa", TSTInfo.defaultValues("tsa"));
	
			if ("extensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description extensions
	    */
				this.extensions = (0, _pvutils.getParametersValue)(parameters, "extensions", TSTInfo.defaultValues("extensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(TSTInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for TST_INFO");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result["TSTInfo.version"].valueBlock.valueDec;
				this.policy = asn1.result["TSTInfo.policy"].valueBlock.toString();
				this.messageImprint = new _MessageImprint2.default({ schema: asn1.result["TSTInfo.messageImprint"] });
				this.serialNumber = asn1.result["TSTInfo.serialNumber"];
				this.genTime = asn1.result["TSTInfo.genTime"].toDate();
				if ("TSTInfo.accuracy" in asn1.result) this.accuracy = new _Accuracy2.default({ schema: asn1.result["TSTInfo.accuracy"] });
				if ("TSTInfo.ordering" in asn1.result) this.ordering = asn1.result["TSTInfo.ordering"].valueBlock.value;
				if ("TSTInfo.nonce" in asn1.result) this.nonce = asn1.result["TSTInfo.nonce"];
				if ("TSTInfo.tsa" in asn1.result) this.tsa = new _GeneralName2.default({ schema: asn1.result["TSTInfo.tsa"] });
				if ("TSTInfo.extensions" in asn1.result) this.extensions = Array.from(asn1.result["TSTInfo.extensions"], function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
				outputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));
				outputArray.push(this.messageImprint.toSchema());
				outputArray.push(this.serialNumber);
				outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));
				if ("accuracy" in this) outputArray.push(this.accuracy.toSchema());
				if ("ordering" in this) outputArray.push(new asn1js.Boolean({ value: this.ordering }));
				if ("nonce" in this) outputArray.push(this.nonce);
				if ("tsa" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [this.tsa.toSchema()]
					}));
				}
	
				//region Create array of extensions
				if ("extensions" in this) {
					outputArray.push(new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: Array.from(this.extensions, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version,
					policy: this.policy,
					messageImprint: this.messageImprint.toJSON(),
					serialNumber: this.serialNumber.toJSON(),
					genTime: this.genTime
				};
	
				if ("accuracy" in this) _object.accuracy = this.accuracy.toJSON();
	
				if ("ordering" in this) _object.ordering = this.ordering;
	
				if ("nonce" in this) _object.nonce = this.nonce.toJSON();
	
				if ("tsa" in this) _object.tsa = this.tsa.toJSON();
	
				if ("extensions" in this) _object.extensions = Array.from(this.extensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
			/**
	   * Verify current TST Info value
	   * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var _this = this;
	
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//region Initial variables
				var sequence = Promise.resolve();
	
				var data = void 0;
	
				var notBefore = void 0;
				var notAfter = void 0;
				//endregion
	
				//region Get a "crypto" extension
				var crypto = (0, _common.getCrypto)();
				if (typeof crypto === "undefined") return Promise.reject("Unable to create WebCrypto object");
				//endregion
	
				//region Get initial parameters
				if ("data" in parameters) data = parameters.data;else return Promise.reject("\"data\" is a mandatory attribute for TST_INFO verification");
	
				if ("notBefore" in parameters) notBefore = parameters.notBefore;
	
				if ("notAfter" in parameters) notAfter = parameters.notAfter;
				//endregion
	
				//region Find hashing algorithm
				var shaAlgorithm = (0, _common.getAlgorithmByOID)(this.messageImprint.hashAlgorithm.algorithmId);
				if ("name" in shaAlgorithm === false) return Promise.reject("Unsupported signature algorithm: " + this.messageImprint.hashAlgorithm.algorithmId);
				//endregion
	
				//region Calculate message digest for input "data" buffer
				sequence = sequence.then(function () {
					return crypto.digest(shaAlgorithm.name, new Uint8Array(data));
				}).then(function (result) {
					return (0, _pvutils.isEqualBuffer)(result, _this.messageImprint.hashedMessage.valueBlock.valueHex);
				});
				//endregion
	
				return sequence;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "policy":
						return "";
					case "messageImprint":
						return new _MessageImprint2.default();
					case "serialNumber":
						return new asn1js.Integer();
					case "genTime":
						return new Date(0, 0, 0);
					case "accuracy":
						return new _Accuracy2.default();
					case "ordering":
						return false;
					case "nonce":
						return new asn1js.Integer();
					case "tsa":
						return new _GeneralName2.default();
					case "extensions":
						return [];
					default:
						throw new Error("Invalid member name for TSTInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
					case "policy":
					case "genTime":
					case "ordering":
						return memberValue === TSTInfo.defaultValues(memberName);
					case "messageImprint":
						return _MessageImprint2.default.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && _MessageImprint2.default.compareWithDefault("hashedMessage", memberValue.hashedMessage);
					case "serialNumber":
					case "nonce":
						return memberValue.isEqual(TSTInfo.defaultValues(memberName));
					case "accuracy":
						return _Accuracy2.default.compareWithDefault("seconds", memberValue.seconds) && _Accuracy2.default.compareWithDefault("millis", memberValue.millis) && _Accuracy2.default.compareWithDefault("micros", memberValue.micros);
					case "tsa":
						return _GeneralName2.default.compareWithDefault("type", memberValue.type) && _GeneralName2.default.compareWithDefault("value", memberValue.value);
					case "extensions":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for TSTInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//TSTInfo ::= SEQUENCE  {
				//   version                      INTEGER  { v1(1) },
				//   policy                       TSAPolicyId,
				//   messageImprint               MessageImprint,
				//   serialNumber                 INTEGER,
				//   genTime                      GeneralizedTime,
				//   accuracy                     Accuracy                 OPTIONAL,
				//   ordering                     BOOLEAN             DEFAULT FALSE,
				//   nonce                        INTEGER                  OPTIONAL,
				//   tsa                          [0] GeneralName          OPTIONAL,
				//   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [version]
	    * @property {string} [policy]
	    * @property {string} [messageImprint]
	    * @property {string} [serialNumber]
	    * @property {string} [genTime]
	    * @property {string} [accuracy]
	    * @property {string} [ordering]
	    * @property {string} [nonce]
	    * @property {string} [tsa]
	    * @property {string} [extensions]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "TSTInfo",
					value: [new asn1js.Integer({ name: names.version || "TSTInfo.version" }), new asn1js.ObjectIdentifier({ name: names.policy || "TSTInfo.policy" }), _MessageImprint2.default.schema(names.messageImprint || {
						names: {
							blockName: "TSTInfo.messageImprint"
						}
					}), new asn1js.Integer({ name: names.serialNumber || "TSTInfo.serialNumber" }), new asn1js.GeneralizedTime({ name: names.genTime || "TSTInfo.genTime" }), _Accuracy2.default.schema(names.accuracy || {
						names: {
							blockName: "TSTInfo.accuracy"
						}
					}), new asn1js.Boolean({
						name: names.ordering || "TSTInfo.ordering",
						optional: true
					}), new asn1js.Integer({
						name: names.nonce || "TSTInfo.nonce",
						optional: true
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [_GeneralName2.default.schema(names.tsa || {
							names: {
								blockName: "TSTInfo.tsa"
							}
						})]
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 1 // [1]
						},
						value: [new asn1js.Repeated({
							name: names.extensions || "TSTInfo.extensions",
							value: _Extension2.default.schema(names.extension || {})
						})]
					}) // IMPLICIT Extensions
					]
				});
			}
		}]);
	
		return TSTInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = TSTInfo;
	//# sourceMappingURL=TSTInfo.js.map

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var PKIStatusInfo = function () {
		//**********************************************************************************
		/**
	  * Constructor for PKIStatusInfo class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function PKIStatusInfo() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, PKIStatusInfo);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description status
	   */
			this.status = (0, _pvutils.getParametersValue)(parameters, "status", PKIStatusInfo.defaultValues("status"));
	
			if ("statusStrings" in parameters)
				/**
	    * @type {Array.<Utf8String>}
	    * @description statusStrings
	    */
				this.statusStrings = (0, _pvutils.getParametersValue)(parameters, "statusStrings", PKIStatusInfo.defaultValues("statusStrings"));
	
			if ("failInfo" in parameters)
				/**
	    * @type {BitString}
	    * @description failInfo
	    */
				this.failInfo = (0, _pvutils.getParametersValue)(parameters, "failInfo", PKIStatusInfo.defaultValues("failInfo"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(PKIStatusInfo, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({
					names: {
						status: "status",
						statusStrings: "statusStrings",
						failInfo: "failInfo"
					}
				}));
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for PKIStatusInfo");
				//endregion
	
				//region Get internal properties from parsed schema
				var _status = asn1.result.status;
	
				if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error("PKIStatusInfo \"status\" has invalid value");
	
				this.status = _status.valueBlock.valueDec;
	
				if ("statusStrings" in asn1.result) this.statusStrings = asn1.result.statusStrings;
				if ("failInfo" in asn1.result) this.failInfo = asn1.result.failInfo;
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array of output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.status }));
	
				if ("statusStrings" in this) {
					outputArray.push(new asn1js.Sequence({
						optional: true,
						value: this.statusStrings
					}));
				}
	
				if ("failInfo" in this) outputArray.push(this.failInfo);
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					status: this.status
				};
	
				if ("statusStrings" in this) _object.statusStrings = Array.from(this.statusStrings, function (element) {
					return element.toJSON();
				});
	
				if ("failInfo" in this) _object.failInfo = this.failInfo.toJSON();
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "status":
						return 2;
					case "statusStrings":
						return [];
					case "failInfo":
						return new asn1js.BitString();
					default:
						throw new Error("Invalid member name for PKIStatusInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "status":
						return memberValue === PKIStatusInfo.defaultValues(memberName);
					case "statusStrings":
						return memberValue.length === 0;
					case "failInfo":
						return memberValue.isEqual(PKIStatusInfo.defaultValues(memberName));
					default:
						throw new Error("Invalid member name for PKIStatusInfo class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//PKIStatusInfo ::= SEQUENCE {
				//    status        PKIStatus,
				//    statusString  PKIFreeText     OPTIONAL,
				//    failInfo      PKIFailureInfo  OPTIONAL  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [status]
	    * @property {string} [statusStrings]
	    * @property {string} [failInfo]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "",
					value: [new asn1js.Integer({ name: names.status || "" }), new asn1js.Sequence({
						optional: true,
						value: [new asn1js.Repeated({
							name: names.statusStrings || "",
							value: new asn1js.Utf8String()
						})]
					}), new asn1js.BitString({
						name: names.failInfo || "",
						optional: true
					})]
				});
			}
		}]);
	
		return PKIStatusInfo;
	}();
	//**************************************************************************************
	
	
	exports.default = PKIStatusInfo;
	//# sourceMappingURL=PKIStatusInfo.js.map

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _MessageImprint = __webpack_require__(466);
	
	var _MessageImprint2 = _interopRequireDefault(_MessageImprint);
	
	var _Extension = __webpack_require__(408);
	
	var _Extension2 = _interopRequireDefault(_Extension);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var TimeStampReq = function () {
		//**********************************************************************************
		/**
	  * Constructor for TimeStampReq class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function TimeStampReq() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TimeStampReq);
	
			//region Internal properties of the object
			/**
	   * @type {number}
	   * @description version
	   */
			this.version = (0, _pvutils.getParametersValue)(parameters, "version", TimeStampReq.defaultValues("version"));
			/**
	   * @type {MessageImprint}
	   * @description messageImprint
	   */
			this.messageImprint = (0, _pvutils.getParametersValue)(parameters, "messageImprint", TimeStampReq.defaultValues("messageImprint"));
	
			if ("reqPolicy" in parameters)
				/**
	    * @type {string}
	    * @description reqPolicy
	    */
				this.reqPolicy = (0, _pvutils.getParametersValue)(parameters, "reqPolicy", TimeStampReq.defaultValues("reqPolicy"));
	
			if ("nonce" in parameters)
				/**
	    * @type {Integer}
	    * @description nonce
	    */
				this.nonce = (0, _pvutils.getParametersValue)(parameters, "nonce", TimeStampReq.defaultValues("nonce"));
	
			if ("certReq" in parameters)
				/**
	    * @type {boolean}
	    * @description certReq
	    */
				this.certReq = (0, _pvutils.getParametersValue)(parameters, "certReq", TimeStampReq.defaultValues("certReq"));
	
			if ("extensions" in parameters)
				/**
	    * @type {Array.<Extension>}
	    * @description extensions
	    */
				this.extensions = (0, _pvutils.getParametersValue)(parameters, "extensions", TimeStampReq.defaultValues("extensions"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(TimeStampReq, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for TSP_REQUEST");
				//endregion
	
				//region Get internal properties from parsed schema
				this.version = asn1.result["TimeStampReq.version"].valueBlock.valueDec;
				this.messageImprint = new _MessageImprint2.default({ schema: asn1.result["TimeStampReq.messageImprint"] });
				if ("TimeStampReq.reqPolicy" in asn1.result) this.reqPolicy = asn1.result["TimeStampReq.reqPolicy"].valueBlock.toString();
				if ("TimeStampReq.nonce" in asn1.result) this.nonce = asn1.result["TimeStampReq.nonce"];
				if ("TimeStampReq.certReq" in asn1.result) this.certReq = asn1.result["TimeStampReq.certReq"].valueBlock.value;
				if ("TimeStampReq.extensions" in asn1.result) this.extensions = Array.from(asn1.result["TimeStampReq.extensions"], function (element) {
					return new _Extension2.default({ schema: element });
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(new asn1js.Integer({ value: this.version }));
				outputArray.push(this.messageImprint.toSchema());
				if ("reqPolicy" in this) outputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));
				if ("nonce" in this) outputArray.push(this.nonce);
				if ("certReq" in this && TimeStampReq.compareWithDefault("certReq", this.certReq) === false) outputArray.push(new asn1js.Boolean({ value: this.certReq }));
	
				//region Create array of extensions
				if ("extensions" in this) {
					outputArray.push(new asn1js.Constructed({
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: Array.from(this.extensions, function (element) {
							return element.toSchema();
						})
					}));
				}
				//endregion
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					version: this.version,
					messageImprint: this.messageImprint.toJSON()
				};
	
				if ("reqPolicy" in this) _object.reqPolicy = this.reqPolicy;
	
				if ("nonce" in this) _object.nonce = this.nonce.toJSON();
	
				if ("certReq" in this && TimeStampReq.compareWithDefault("certReq", this.certReq) === false) _object.certReq = this.certReq;
	
				if ("extensions" in this) _object.extensions = Array.from(this.extensions, function (element) {
					return element.toJSON();
				});
	
				return _object;
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "version":
						return 0;
					case "messageImprint":
						return new _MessageImprint2.default();
					case "reqPolicy":
						return "";
					case "nonce":
						return new asn1js.Integer();
					case "certReq":
						return false;
					case "extensions":
						return [];
					default:
						throw new Error("Invalid member name for TimeStampReq class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "version":
					case "reqPolicy":
					case "certReq":
						return memberValue === TimeStampReq.defaultValues(memberName);
					case "messageImprint":
						return _MessageImprint2.default.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && _MessageImprint2.default.compareWithDefault("hashedMessage", memberValue.hashedMessage);
					case "nonce":
						return memberValue.isEqual(TimeStampReq.defaultValues(memberName));
					case "extensions":
						return memberValue.length === 0;
					default:
						throw new Error("Invalid member name for TimeStampReq class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//TimeStampReq ::= SEQUENCE  {
				//    version               INTEGER  { v1(1) },
				//    messageImprint        MessageImprint,
				//    reqPolicy             TSAPolicyId              OPTIONAL,
				//    nonce                 INTEGER                  OPTIONAL,
				//    certReq               BOOLEAN                  DEFAULT FALSE,
				//    extensions            [0] IMPLICIT Extensions  OPTIONAL  }
				//
				//TSAPolicyId ::= OBJECT IDENTIFIER
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [type]
	    * @property {string} [setName]
	    * @property {string} [values]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "TimeStampReq",
					value: [new asn1js.Integer({ name: names.version || "TimeStampReq.version" }), _MessageImprint2.default.schema(names.messageImprint || {
						names: {
							blockName: "TimeStampReq.messageImprint"
						}
					}), new asn1js.ObjectIdentifier({
						name: names.reqPolicy || "TimeStampReq.reqPolicy",
						optional: true
					}), new asn1js.Integer({
						name: names.nonce || "TimeStampReq.nonce",
						optional: true
					}), new asn1js.Boolean({
						name: names.certReq || "TimeStampReq.certReq",
						optional: true
					}), new asn1js.Constructed({
						optional: true,
						idBlock: {
							tagClass: 3, // CONTEXT-SPECIFIC
							tagNumber: 0 // [0]
						},
						value: [new asn1js.Repeated({
							name: names.extensions || "TimeStampReq.extensions",
							value: _Extension2.default.schema()
						})]
					}) // IMPLICIT SEQUENCE value
					]
				});
			}
		}]);
	
		return TimeStampReq;
	}();
	//**************************************************************************************
	
	
	exports.default = TimeStampReq;
	//# sourceMappingURL=TimeStampReq.js.map

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _asn1js = __webpack_require__(374);
	
	var asn1js = _interopRequireWildcard(_asn1js);
	
	var _pvutils = __webpack_require__(375);
	
	var _PKIStatusInfo = __webpack_require__(479);
	
	var _PKIStatusInfo2 = _interopRequireDefault(_PKIStatusInfo);
	
	var _ContentInfo = __webpack_require__(397);
	
	var _ContentInfo2 = _interopRequireDefault(_ContentInfo);
	
	var _SignedData = __webpack_require__(475);
	
	var _SignedData2 = _interopRequireDefault(_SignedData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//**************************************************************************************
	/**
	 * Class from RFC3161
	 */
	var TimeStampResp = function () {
		//**********************************************************************************
		/**
	  * Constructor for TimeStampResp class
	  * @param {Object} [parameters={}]
	  * @property {Object} [schema] asn1js parsed value
	  */
		function TimeStampResp() {
			var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
			_classCallCheck(this, TimeStampResp);
	
			//region Internal properties of the object
			/**
	   * @type {PKIStatusInfo}
	   * @description status
	   */
			this.status = (0, _pvutils.getParametersValue)(parameters, "status", TimeStampResp.defaultValues("status"));
	
			if ("timeStampToken" in parameters)
				/**
	    * @type {ContentInfo}
	    * @description timeStampToken
	    */
				this.timeStampToken = (0, _pvutils.getParametersValue)(parameters, "timeStampToken", TimeStampResp.defaultValues("timeStampToken"));
			//endregion
	
			//region If input argument array contains "schema" for this object
			if ("schema" in parameters) this.fromSchema(parameters.schema);
			//endregion
		}
		//**********************************************************************************
		/**
	  * Return default values for all class members
	  * @param {string} memberName String name for a class member
	  */
	
	
		_createClass(TimeStampResp, [{
			key: "fromSchema",
	
			//**********************************************************************************
			/**
	   * Convert parsed asn1js object into current class
	   * @param {!Object} schema
	   */
			value: function fromSchema(schema) {
				//region Check the schema is valid
				var asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());
	
				if (asn1.verified === false) throw new Error("Object's schema was not verified against input data for TSP_RESPONSE");
				//endregion
	
				//region Get internal properties from parsed schema
				this.status = new _PKIStatusInfo2.default({ schema: asn1.result["TimeStampResp.status"] });
				if ("TimeStampResp.timeStampToken" in asn1.result) this.timeStampToken = new _ContentInfo2.default({ schema: asn1.result["TimeStampResp.timeStampToken"] });
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convert current object to asn1js object and set correct values
	   * @returns {Object} asn1js object
	   */
	
		}, {
			key: "toSchema",
			value: function toSchema() {
				//region Create array for output sequence
				var outputArray = [];
	
				outputArray.push(this.status.toSchema());
				if ("timeStampToken" in this) outputArray.push(this.timeStampToken.toSchema());
				//endregion
	
				//region Construct and return new ASN.1 schema for this object
				return new asn1js.Sequence({
					value: outputArray
				});
				//endregion
			}
			//**********************************************************************************
			/**
	   * Convertion for the class to JSON object
	   * @returns {Object}
	   */
	
		}, {
			key: "toJSON",
			value: function toJSON() {
				var _object = {
					status: this.status
				};
	
				if ("timeStampToken" in this) _object.timeStampToken = this.timeStampToken.toJSON();
	
				return _object;
			}
			//**********************************************************************************
			/**
	   * Sign current TSP Response
	   * @param {Object} privateKey Private key for "subjectPublicKeyInfo" structure
	   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1
	   * @returns {Promise}
	   */
	
		}, {
			key: "sign",
			value: function sign(privateKey, hashAlgorithm) {
				//region Check that "timeStampToken" exists
				if ("timeStampToken" in this === false) return Promise.reject("timeStampToken is absent in TSP response");
				//endregion
	
				//region Check that "timeStampToken" has a right internal format
				if (this.timeStampToken.contentType !== "1.2.840.113549.1.7.2") // Must be a CMS signed data
					return Promise.reject("Wrong format of timeStampToken: " + this.timeStampToken.contentType);
				//endregion
	
				//region Sign internal signed data value
				var signed = new _ContentInfo2.default({ schema: this.timeStampToken.content });
	
				return signed.sign(privateKey, 0, hashAlgorithm);
				//endregion
			}
			//**********************************************************************************
			/**
	   * Verify current TSP Response
	   * @param {Object} verificationParameters Input parameters for verification
	   * @returns {Promise}
	   */
	
		}, {
			key: "verify",
			value: function verify() {
				var verificationParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) };
	
				//region Check that "timeStampToken" exists
				if ("timeStampToken" in this === false) return Promise.reject("timeStampToken is absent in TSP response");
				//endregion
	
				//region Check that "timeStampToken" has a right internal format
				if (this.timeStampToken.contentType !== "1.2.840.113549.1.7.2") // Must be a CMS signed data
					return Promise.reject("Wrong format of timeStampToken: " + this.timeStampToken.contentType);
				//endregion
	
				//region Verify internal signed data value
				var signed = new _SignedData2.default({ schema: this.timeStampToken.content });
	
				return signed.verify(verificationParameters);
				//endregion
			}
			//**********************************************************************************
	
		}], [{
			key: "defaultValues",
			value: function defaultValues(memberName) {
				switch (memberName) {
					case "status":
						return new _PKIStatusInfo2.default();
					case "timeStampToken":
						return new _ContentInfo2.default();
					default:
						throw new Error("Invalid member name for TimeStampResp class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Compare values with default values for all class members
	   * @param {string} memberName String name for a class member
	   * @param {*} memberValue Value to compare with default value
	   */
	
		}, {
			key: "compareWithDefault",
			value: function compareWithDefault(memberName, memberValue) {
				switch (memberName) {
					case "status":
						return _PKIStatusInfo2.default.compareWithDefault("status", memberValue.status) && "statusStrings" in memberValue === false && "failInfo" in memberValue === false;
					case "timeStampToken":
						return memberValue.contentType === "" && memberValue.content instanceof asn1js.Any;
					default:
						throw new Error("Invalid member name for TimeStampResp class: " + memberName);
				}
			}
			//**********************************************************************************
			/**
	   * Return value of asn1js schema for current class
	   * @param {Object} parameters Input parameters for the schema
	   * @returns {Object} asn1js schema object
	   */
	
		}, {
			key: "schema",
			value: function schema() {
				var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				//TimeStampResp ::= SEQUENCE  {
				//    status                  PKIStatusInfo,
				//    timeStampToken          TimeStampToken     OPTIONAL  }
	
				/**
	    * @type {Object}
	    * @property {string} [blockName]
	    * @property {string} [status]
	    * @property {string} [timeStampToken]
	    */
				var names = (0, _pvutils.getParametersValue)(parameters, "names", {});
	
				return new asn1js.Sequence({
					name: names.blockName || "TimeStampResp",
					value: [_PKIStatusInfo2.default.schema(names.status || {
						names: {
							blockName: "TimeStampResp.status"
						}
					}), _ContentInfo2.default.schema(names.timeStampToken || {
						names: {
							blockName: "TimeStampResp.timeStampToken",
							optional: true
						}
					})]
				});
			}
		}]);
	
		return TimeStampResp;
	}();
	//**************************************************************************************
	
	
	exports.default = TimeStampResp;
	//# sourceMappingURL=TimeStampResp.js.map

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(335);
	var ResponseHandler = (function () {
	    function ResponseHandler() {
	    }
	    ResponseHandler.error = function (err, callback) {
	        if (callback && typeof callback === "function") {
	            callback(err, null);
	        }
	        return es6_promise_1.Promise.reject(err);
	    };
	    ResponseHandler.response = function (data, callback) {
	        if (callback && typeof callback === "function") {
	            callback(null, data);
	        }
	        return es6_promise_1.Promise.resolve(data);
	    };
	    return ResponseHandler;
	}());
	exports.ResponseHandler = ResponseHandler;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var RequestHandler = (function () {
	    function RequestHandler() {
	    }
	    RequestHandler.determineOptions = function (firstParam, secondParam) {
	        var result = { parseCerts: false };
	        if (firstParam) {
	            if (typeof firstParam === "function") {
	                result.callback = firstParam;
	            }
	            else {
	                result.callback = secondParam;
	                if (_.has(firstParam, "parseCerts")) {
	                    result.parseCerts = firstParam.parseCerts;
	                }
	            }
	        }
	        else {
	            if (typeof secondParam === "function") {
	                result.callback = secondParam;
	            }
	        }
	        return result;
	    };
	    RequestHandler.determineOptionsWithFilter = function (firstParam) {
	        var result = { parseCerts: false, params: {} };
	        if (_.isArray(firstParam)) {
	            if (firstParam.length) {
	                result.params.filter = firstParam.join(",");
	            }
	        }
	        else if (_.isObject(firstParam)) {
	            if (_.has(firstParam, "filters") && _.isArray(firstParam.filters)) {
	                if (firstParam.filters.length) {
	                    result.params.filter = firstParam.filters.join(",");
	                }
	            }
	            if (_.has(firstParam, "parseCerts")) {
	                result.parseCerts = firstParam.parseCerts;
	            }
	        }
	        return result;
	    };
	    return RequestHandler;
	}());
	exports.RequestHandler = RequestHandler;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var RequestHandler_1 = __webpack_require__(483);
	var EidBe = (function (_super) {
	    __extends(EidBe, _super);
	    function EidBe() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EidBe.prototype.rnData = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidBe.RN_DATA), undefined, callback);
	    };
	    EidBe.prototype.address = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidBe.ADDRESS), undefined, callback);
	    };
	    EidBe.prototype.picture = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidBe.PHOTO), undefined, callback);
	    };
	    EidBe.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificate(EidBe.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidBe.prototype.citizenCertificate = function (options, callback) {
	        return this.getCertificate(EidBe.CERT_CITIZEN, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidBe.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(EidBe.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidBe.prototype.nonRepudiationCertificate = function (options, callback) {
	        return this.getCertificate(EidBe.CERT_NON_REPUDIATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidBe.prototype.rrnCertificate = function (options, callback) {
	        return this.getCertificate(EidBe.CERT_RRN, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidBe.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        var _req = { private_key_reference: EidBe.VERIFY_PRIV_KEY_REF };
	        if (body.pin) {
	            _req.pin = body.pin;
	        }
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(Card_1.GenericCertCard.VERIFY_PIN), _req, undefined, callback);
	        });
	    };
	    return EidBe;
	}(Card_1.GenericCertCard));
	EidBe.RN_DATA = "/rn";
	EidBe.ADDRESS = "/address";
	EidBe.PHOTO = "/picture";
	EidBe.VERIFY_PRIV_KEY_REF = "non-repudiation";
	exports.EidBe = EidBe;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var CertParser_1 = __webpack_require__(373);
	var ResponseHandler_1 = __webpack_require__(482);
	var RequestHandler_1 = __webpack_require__(483);
	function createFilterQueryParam(filterParams, pin) {
	    return {
	        filter: filterParams.filter,
	        pin: pin
	    };
	}
	function createPinQueryParam(pin) {
	    return { pin: pin };
	}
	var EidLux = (function (_super) {
	    __extends(EidLux, _super);
	    function EidLux(baseUrl, containerUrl, connection, reader_id, pin) {
	        var _this = _super.call(this, baseUrl, containerUrl, connection, reader_id) || this;
	        _this.baseUrl = baseUrl;
	        _this.containerUrl = containerUrl;
	        _this.connection = connection;
	        _this.reader_id = reader_id;
	        _this.pin = pin;
	        return _this;
	    }
	    EidLux.prototype.allDataFilters = function () {
	        return ["authentication-certificate", "biometric", "non-repudiation-certificate", "picture", "root-certificates"];
	    };
	    EidLux.prototype.allCertFilters = function () {
	        return ["authentication-certificate", "non-repudiation-certificate", "root-certificates"];
	    };
	    EidLux.prototype.allData = function (options, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.get(this.baseUrl, this.containerSuffix(), createFilterQueryParam(reqOptions.params, this.pin)).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    EidLux.prototype.allCerts = function (options, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptionsWithFilter(options);
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidLux.ALL_CERTIFICATES), createFilterQueryParam(reqOptions.params, this.pin)).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, callback);
	        });
	    };
	    EidLux.prototype.biometric = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidLux.BIOMETRIC), createPinQueryParam(this.pin), callback);
	    };
	    EidLux.prototype.picture = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidLux.PHOTO), createPinQueryParam(this.pin), callback);
	    };
	    EidLux.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificateArray(EidLux.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback), createPinQueryParam(this.pin));
	    };
	    EidLux.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(EidLux.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback), createPinQueryParam(this.pin));
	    };
	    EidLux.prototype.nonRepudiationCertificate = function (options, callback) {
	        return this.getCertificate(EidLux.CERT_NON_REPUDIATION, RequestHandler_1.RequestHandler.determineOptions(options, callback), createPinQueryParam(this.pin));
	    };
	    EidLux.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(EidLux.VERIFY_PIN), body, createPinQueryParam(_this.pin), callback);
	        });
	    };
	    EidLux.prototype.signData = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(EidLux.SIGN_DATA), body, createPinQueryParam(_this.pin), callback);
	        });
	    };
	    EidLux.prototype.authenticate = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(EidLux.AUTHENTICATE), body, createPinQueryParam(_this.pin), callback);
	        });
	    };
	    EidLux.prototype.signatureImage = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidLux.SIGNATURE_IMAGE), createPinQueryParam(this.pin), callback);
	    };
	    EidLux.prototype.getCertificate = function (certUrl, options, params) {
	        var self = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, params.pin).then(function () {
	            return self.connection.get(self.baseUrl, self.containerSuffix(EidLux.ALL_CERTIFICATES + certUrl), params).then(function (certData) {
	                return CertParser_1.CertParser.process(certData, options.parseCerts, options.callback);
	            }, function (err) { return ResponseHandler_1.ResponseHandler.error(err, options.callback); });
	        });
	    };
	    EidLux.prototype.getCertificateArray = function (certUrl, options, params) {
	        var self = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, params.pin).then(function () {
	            return self.connection.get(self.baseUrl, self.containerSuffix(EidLux.ALL_CERTIFICATES + certUrl), params).then(function (certData) {
	                return CertParser_1.CertParser.process(certData, options.parseCerts, options.callback);
	            }, function (err) { return ResponseHandler_1.ResponseHandler.error(err, options.callback); });
	        });
	    };
	    return EidLux;
	}(Card_1.GenericSecuredCertCard));
	EidLux.BIOMETRIC = "/biometric";
	EidLux.ADDRESS = "/address";
	EidLux.PHOTO = "/picture";
	EidLux.SIGNATURE_IMAGE = "/signature-image";
	exports.EidLux = EidLux;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var MOBIB_CARD_ISSUING = "/card-issuing";
	var MOBIB_CONTRACTS = "/contracts";
	var MOBIB_PHOTO = "/picture";
	var MOBIB_STATUS = "/status";
	var Mobib = (function (_super) {
	    __extends(Mobib, _super);
	    function Mobib() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Mobib.prototype.cardIssuing = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(MOBIB_CARD_ISSUING), undefined, callback);
	    };
	    Mobib.prototype.contracts = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(MOBIB_CONTRACTS), undefined, callback);
	    };
	    Mobib.prototype.picture = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(MOBIB_PHOTO), undefined, callback);
	    };
	    Mobib.prototype.status = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(MOBIB_STATUS), undefined, callback);
	    };
	    return Mobib;
	}(Card_1.GenericSmartCard));
	exports.Mobib = Mobib;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var RequestHandler_1 = __webpack_require__(483);
	var LuxTrust = (function (_super) {
	    __extends(LuxTrust, _super);
	    function LuxTrust() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    LuxTrust.prototype.activated = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(LuxTrust.ACTIVATED), undefined, callback);
	    };
	    LuxTrust.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificate(LuxTrust.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    LuxTrust.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(LuxTrust.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    LuxTrust.prototype.signingCertificate = function (options, callback) {
	        return this.getCertificate(LuxTrust.CERT_SIGNING, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    return LuxTrust;
	}(Card_1.GenericCertCard));
	LuxTrust.ACTIVATED = "/activated";
	exports.LuxTrust = LuxTrust;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var es6_promise_1 = __webpack_require__(335);
	var Ocra = (function (_super) {
	    __extends(Ocra, _super);
	    function Ocra() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Ocra.prototype.challenge = function (body, callback) {
	        var _this = this;
	        if (callback && typeof callback === "function") {
	            PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(Ocra.CHALLENGE), body, undefined, callback);
	            }, function (error) {
	                return callback(error, null);
	            });
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                PinEnforcer_1.PinEnforcer.check(_this.connection, _this.baseUrl, _this.reader_id, body.pin).then(function () {
	                    resolve(_this.connection.post(_this.baseUrl, _this.containerSuffix(Ocra.CHALLENGE), body, undefined));
	                }, function (error) { reject(error); });
	            });
	        }
	    };
	    Ocra.prototype.readCounter = function (body, callback) {
	        var _this = this;
	        if (callback && typeof callback === "function") {
	            PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(Ocra.READ_COUNTER), body, undefined, callback);
	            }, function (error) {
	                return callback(error, null);
	            });
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                PinEnforcer_1.PinEnforcer.check(_this.connection, _this.baseUrl, _this.reader_id, body.pin).then(function () {
	                    resolve(_this.connection.post(_this.baseUrl, _this.containerSuffix(Ocra.READ_COUNTER), body, undefined));
	                }, function (error) { reject(error); });
	            });
	        }
	    };
	    return Ocra;
	}(Card_1.GenericPinCard));
	Ocra.CHALLENGE = "/challenge";
	Ocra.READ_COUNTER = "/read-counter";
	exports.Ocra = Ocra;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var RequestHandler_1 = __webpack_require__(483);
	var Aventra = (function (_super) {
	    __extends(Aventra, _super);
	    function Aventra() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Aventra.prototype.allDataFilters = function () {
	        return ["applet-info", "root_certificate", "authentication-certificate",
	            "encryption_certificate", "issuer_certificate", "signing_certificate"];
	    };
	    Aventra.prototype.allCertFilters = function () {
	        return ["root_certificate", "authentication-certificate", "encryption_certificate", "issuer_certificate", "signing_certificate"];
	    };
	    Aventra.prototype.allKeyRefs = function () {
	        return ["authenticate", "sign", "encrypt"];
	    };
	    Aventra.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificate(Aventra.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Aventra.prototype.issuerCertificate = function (options, callback) {
	        return this.getCertificate(Aventra.CERT_ISSUER, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Aventra.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(Aventra.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Aventra.prototype.signingCertificate = function (options, callback) {
	        return this.getCertificate(Aventra.CERT_SIGNING, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Aventra.prototype.encryptionCertificate = function (options, callback) {
	        return this.getCertificate(Aventra.CERT_ENCRYPTION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Aventra.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(Aventra.VERIFY_PIN), body, undefined, callback);
	        });
	    };
	    Aventra.prototype.resetPin = function (body, callback) {
	        return this.connection.post(this.baseUrl, this.containerSuffix(Aventra.RESET_PIN), body, undefined, callback);
	    };
	    return Aventra;
	}(Card_1.GenericCertCard));
	Aventra.DEFAULT_VERIFY_PIN = "sign";
	Aventra.RESET_PIN = "/reset-pin";
	exports.Aventra = Aventra;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var RequestHandler_1 = __webpack_require__(483);
	var Oberthur = (function (_super) {
	    __extends(Oberthur, _super);
	    function Oberthur() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Oberthur.prototype.allDataFilters = function () {
	        return ["root_certificate", "authentication-certificate",
	            "encryption_certificate", "issuer_certificate", "signing_certificate"];
	    };
	    Oberthur.prototype.allCertFilters = function () {
	        return ["root_certificate", "authentication-certificate", "encryption_certificate", "issuer_certificate", "signing_certificate"];
	    };
	    Oberthur.prototype.allKeyRefs = function () {
	        return ["authenticate", "sign", "encrypt"];
	    };
	    Oberthur.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificate(Oberthur.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Oberthur.prototype.issuerCertificate = function (options, callback) {
	        return this.getCertificate(Oberthur.CERT_ISSUER, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Oberthur.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(Oberthur.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Oberthur.prototype.signingCertificate = function (options, callback) {
	        return this.getCertificate(Oberthur.CERT_SIGNING, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Oberthur.prototype.encryptionCertificate = function (options, callback) {
	        return this.getCertificate(Oberthur.CERT_ENCRYPTION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    Oberthur.prototype.verifyPin = function (body, callback) {
	        var _this = this;
	        return PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	            return _this.connection.post(_this.baseUrl, _this.containerSuffix(Oberthur.VERIFY_PIN), body, undefined, callback);
	        });
	    };
	    return Oberthur;
	}(Card_1.GenericCertCard));
	exports.Oberthur = Oberthur;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var PinEnforcer_1 = __webpack_require__(372);
	var es6_promise_1 = __webpack_require__(335);
	var RequestHandler_1 = __webpack_require__(483);
	var PIV = (function (_super) {
	    __extends(PIV, _super);
	    function PIV() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PIV.prototype.allDataFilters = function () {
	        return ["applet-info", "root_certificate", "authentication-certificate",
	            "encryption_certificate", "issuer_certificate", "signing_certificate"];
	    };
	    PIV.prototype.allCertFilters = function () {
	        return ["authentication-certificate", "signing_certificate"];
	    };
	    PIV.prototype.allKeyRefs = function () {
	        return ["authenticate", "sign", "encrypt"];
	    };
	    PIV.prototype.printedInformation = function (body, callback) {
	        var _this = this;
	        if (callback && typeof callback === "function") {
	            PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(PIV.PRINTED_INFORMATION), body, undefined, callback);
	            }, function (error) {
	                return callback(error, null);
	            });
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                PinEnforcer_1.PinEnforcer.check(_this.connection, _this.baseUrl, _this.reader_id, body.pin).then(function () {
	                    resolve(_this.connection.post(_this.baseUrl, _this.containerSuffix(PIV.PRINTED_INFORMATION), body, undefined));
	                }, function (error) { reject(error); });
	            });
	        }
	    };
	    PIV.prototype.facialImage = function (body, callback) {
	        var _this = this;
	        if (callback && typeof callback === "function") {
	            PinEnforcer_1.PinEnforcer.check(this.connection, this.baseUrl, this.reader_id, body.pin).then(function () {
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(PIV.FACIAL_IMAGE), body, undefined, callback);
	            }, function (error) {
	                return callback(error, null);
	            });
	        }
	        else {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                PinEnforcer_1.PinEnforcer.check(_this.connection, _this.baseUrl, _this.reader_id, body.pin).then(function () {
	                    resolve(_this.connection.post(_this.baseUrl, _this.containerSuffix(PIV.FACIAL_IMAGE), body, undefined));
	                }, function (error) { reject(error); });
	            });
	        }
	    };
	    PIV.prototype.authenticationCertificate = function (body, options, callback) {
	        return this.getCertificate(PIV.CERT_AUTHENTICATION, body, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    PIV.prototype.signingCertificate = function (body, options, callback) {
	        return this.getCertificate(PIV.CERT_SIGNING, body, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    return PIV;
	}(Card_1.GenericSecuredCertCard));
	PIV.PRINTED_INFORMATION = "/printed-information";
	PIV.FACIAL_IMAGE = "/facial-image";
	exports.PIV = PIV;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var CertParser_1 = __webpack_require__(373);
	var ResponseHandler_1 = __webpack_require__(482);
	var platform = __webpack_require__(334);
	var RequestHandler_1 = __webpack_require__(483);
	var SafeNet = (function () {
	    function SafeNet(baseUrl, containerUrl, connection, moduleConfig) {
	        this.baseUrl = baseUrl;
	        this.containerUrl = containerUrl;
	        this.connection = connection;
	        this.moduleConfig = moduleConfig;
	        if (platform.os.family.indexOf("Win") > -1) {
	            this.os = "win";
	        }
	        if (platform.os.family.indexOf("OS X") > -1) {
	            this.os = "mac";
	        }
	        if (!this.os) {
	            this.os = "linux";
	        }
	        if (moduleConfig && moduleConfig[this.os]) {
	            this.modulePath = moduleConfig[this.os];
	        }
	        else {
	            this.modulePath = SafeNet.DEFAULT_CONFIG[this.os];
	        }
	    }
	    SafeNet.prototype.certificates = function (body, options, callback) {
	        var _this = this;
	        var req = _.extend(body, { module: this.modulePath });
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptions(options, callback);
	        return this.connection.post(this.baseUrl, this.containerSuffix(SafeNet.ALL_CERTIFICATES), req, undefined).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, reqOptions.callback);
	        }, function (err) {
	            if (_this.moduleConfig) {
	                var defaultReq = _.extend(body, { module: SafeNet.DEFAULT_CONFIG[_this.os] });
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(SafeNet.ALL_CERTIFICATES), defaultReq, undefined).then(function (data) {
	                    return CertParser_1.CertParser.process(data, reqOptions.parseCerts, reqOptions.callback);
	                }, function (defaultErr) {
	                    return ResponseHandler_1.ResponseHandler.error(defaultErr, reqOptions.callback);
	                });
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error(err, reqOptions.callback);
	            }
	        });
	    };
	    SafeNet.prototype.info = function (callback) {
	        var _this = this;
	        var req = { module: this.modulePath };
	        return this.connection.post(this.baseUrl, this.containerSuffix(SafeNet.INFO), req, undefined).then(function (data) {
	            return ResponseHandler_1.ResponseHandler.response(data, callback);
	        }, function (err) {
	            if (_this.moduleConfig) {
	                var defaultReq = { module: SafeNet.DEFAULT_CONFIG[_this.os] };
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(SafeNet.INFO), defaultReq, undefined, callback);
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error(err, callback);
	            }
	        });
	    };
	    SafeNet.prototype.slots = function (callback) {
	        var _this = this;
	        var req = { module: this.modulePath };
	        return this.connection.post(this.baseUrl, this.containerSuffix(SafeNet.SLOTS), req, undefined).then(function (data) {
	            return ResponseHandler_1.ResponseHandler.response(data, callback);
	        }, function (err) {
	            if (_this.moduleConfig) {
	                var defaultReq = { module: SafeNet.DEFAULT_CONFIG[_this.os] };
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(SafeNet.SLOTS), defaultReq, undefined, callback);
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error(err, callback);
	            }
	        });
	    };
	    SafeNet.prototype.slotsWithTokenPresent = function (callback) {
	        var _this = this;
	        var req = { module: this.modulePath };
	        return this.connection.post(this.baseUrl, this.containerSuffix(SafeNet.SLOTS), req, { "token-present": "true" }).then(function (data) {
	            return ResponseHandler_1.ResponseHandler.response(data, callback);
	        }, function (err) {
	            if (_this.moduleConfig) {
	                var defaultReq = { module: SafeNet.DEFAULT_CONFIG[_this.os] };
	                return _this.connection.post(_this.baseUrl, _this.containerSuffix(SafeNet.SLOTS), defaultReq, { "token-present": "true" }, callback);
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error(err, callback);
	            }
	        });
	    };
	    SafeNet.prototype.containerSuffix = function (path) {
	        return this.containerUrl + path;
	    };
	    return SafeNet;
	}());
	SafeNet.ALL_CERTIFICATES = "/certificates";
	SafeNet.INFO = "/info";
	SafeNet.SLOTS = "/slots";
	SafeNet.DEFAULT_CONFIG = {
	    linux: "/usr/local/lib/libeTPkcs11.so",
	    mac: "/usr/local/lib/libeTPkcs11.dylib",
	    win: "C:\\Windows\\System32\\eTPKCS11.dll"
	};
	exports.SafeNet = SafeNet;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var RequestHandler_1 = __webpack_require__(483);
	var CertParser_1 = __webpack_require__(373);
	var ResponseHandler_1 = __webpack_require__(482);
	var DNIe = (function (_super) {
	    __extends(DNIe, _super);
	    function DNIe() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DNIe.prototype.info = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(DNIe.INFO), undefined, callback);
	    };
	    DNIe.prototype.intermediateCertificate = function (options, callback) {
	        var reqOptions = RequestHandler_1.RequestHandler.determineOptions(options, callback);
	        var self = this;
	        return self.connection.get(self.baseUrl, self.containerSuffix(DNIe.ALL_CERTIFICATES + DNIe.CERT_INTERMEDIATE), undefined).then(function (data) {
	            return CertParser_1.CertParser.process(data, reqOptions.parseCerts, reqOptions.callback);
	        }, function (err) {
	            return ResponseHandler_1.ResponseHandler.error(err, reqOptions.callback);
	        });
	    };
	    DNIe.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(DNIe.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    DNIe.prototype.signingCertificate = function (options, callback) {
	        return this.getCertificate(DNIe.CERT_SIGNING, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    return DNIe;
	}(Card_1.GenericCertCard));
	DNIe.INFO = "/info";
	DNIe.CERT_INTERMEDIATE = "/intermediate";
	exports.DNIe = DNIe;


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Card_1 = __webpack_require__(371);
	var RequestHandler_1 = __webpack_require__(483);
	var EidPt = (function (_super) {
	    __extends(EidPt, _super);
	    function EidPt() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EidPt.prototype.idData = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidPt.ID_DATA), undefined, callback);
	    };
	    EidPt.prototype.idDataWithOutPhoto = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidPt.ID_DATA), { photo: "false" }, callback);
	    };
	    EidPt.prototype.photo = function (callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(EidPt.PHOTO), undefined, callback);
	    };
	    EidPt.prototype.rootCertificate = function (options, callback) {
	        return this.getCertificate(EidPt.CERT_ROOT, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidPt.prototype.rootAuthenticationCertificate = function (options, callback) {
	        return this.getCertificate(EidPt.CERT_ROOT_AUTH, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidPt.prototype.rootNonRepudiationCertificate = function (options, callback) {
	        return this.getCertificate(EidPt.CERT_ROOT_NON_REP, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidPt.prototype.authenticationCertificate = function (options, callback) {
	        return this.getCertificate(EidPt.CERT_AUTHENTICATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    EidPt.prototype.nonRepudiationCertificate = function (options, callback) {
	        return this.getCertificate(EidPt.CERT_NON_REPUDIATION, RequestHandler_1.RequestHandler.determineOptions(options, callback));
	    };
	    return EidPt;
	}(Card_1.GenericCertCard));
	EidPt.CERT_ROOT_AUTH = "/root-authentication";
	EidPt.CERT_ROOT_NON_REP = "/root-non-repudiation";
	EidPt.ID_DATA = "/id";
	EidPt.PHOTO = "/photo";
	exports.EidPt = EidPt;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var Card_1 = __webpack_require__(371);
	var RemoteLoading = (function (_super) {
	    __extends(RemoteLoading, _super);
	    function RemoteLoading() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    RemoteLoading.optionalSessionIdParam = function (sessionId) {
	        if (sessionId && sessionId.length) {
	            return { "session-id": sessionId };
	        }
	        else {
	            return undefined;
	        }
	    };
	    RemoteLoading.prototype.atr = function (sessionId, callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(RemoteLoading.ATR), RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.apdu = function (apdu, sessionId, callback) {
	        var suffix = this.containerSuffix(RemoteLoading.APDU);
	        if (_.isArray(apdu)) {
	            suffix = this.containerSuffix(RemoteLoading.APDUS);
	        }
	        return this.connection.post(this.baseUrl, suffix, apdu, RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.ccid = function (feature, command, sessionId, callback) {
	        return this.connection.post(this.baseUrl, this.containerSuffix(RemoteLoading.CCID), { feature: feature, apdu: command }, RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.ccidFeatures = function (sessionId, callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(RemoteLoading.CCID_FEATURES), RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.command = function (tx, sessionId, callback) {
	        if (_.isArray(tx)) {
	            var body_1 = [];
	            _.forEach(tx, function (txElem) { body_1.push({ tx: txElem }); });
	            return this.connection.post(this.baseUrl, this.containerSuffix(RemoteLoading.CMDS), body_1, RemoteLoading.optionalSessionIdParam(sessionId), callback);
	        }
	        else {
	            return this.connection.post(this.baseUrl, this.containerSuffix(RemoteLoading.CMD), { tx: tx }, RemoteLoading.optionalSessionIdParam(sessionId), callback);
	        }
	    };
	    RemoteLoading.prototype.closeSession = function (sessionId, callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(RemoteLoading.CLOSE_SESSION), RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.isPresent = function (sessionId, callback) {
	        return this.connection.get(this.baseUrl, this.containerSuffix(RemoteLoading.IS_PRESENT), RemoteLoading.optionalSessionIdParam(sessionId), callback);
	    };
	    RemoteLoading.prototype.openSession = function (timeout, callback) {
	        if (timeout && timeout > 0) {
	            return this.connection.post(this.baseUrl, this.containerSuffix(RemoteLoading.OPEN_SESSION), { timeout: timeout }, undefined, callback);
	        }
	        else {
	            return this.connection.post(this.baseUrl, this.containerSuffix(RemoteLoading.OPEN_SESSION), { timeout: this.connection.cfg.defaultSessionTimeout }, undefined, callback);
	        }
	    };
	    return RemoteLoading;
	}(Card_1.GenericContainer));
	RemoteLoading.ATR = "/atr";
	RemoteLoading.APDU = "/apdu";
	RemoteLoading.APDUS = "/apdus";
	RemoteLoading.CCID = "/ccid";
	RemoteLoading.CCID_FEATURES = "/ccid-features";
	RemoteLoading.CMD = "/command";
	RemoteLoading.CMDS = "/commands";
	RemoteLoading.CLOSE_SESSION = "/close-session";
	RemoteLoading.IS_PRESENT = "/is-present";
	RemoteLoading.OPEN_SESSION = "/open-session";
	exports.RemoteLoading = RemoteLoading;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var RemoteLoading_1 = __webpack_require__(495);
	var ResponseHandler_1 = __webpack_require__(482);
	var _ = __webpack_require__(330);
	var Belfius = (function (_super) {
	    __extends(Belfius, _super);
	    function Belfius() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Belfius.prototype.isBelfiusReader = function (sessionId, callback) {
	        var _this = this;
	        if (sessionId && sessionId.length) {
	            return this.connection.get(this.baseUrl, "/card-readers/" + this.reader_id, undefined).then(function (reader) {
	                if (_.includes(reader.data.name, "VASCO DIGIPASS 870")) {
	                    return _this.apdu(Belfius.NONCE_APDU, sessionId).then(function (res) {
	                        return ResponseHandler_1.ResponseHandler.response({ data: res.data.sw === "9000", success: true }, callback);
	                    });
	                }
	                else {
	                    return ResponseHandler_1.ResponseHandler.response({ data: false, success: true }, callback);
	                }
	            }, function (err) {
	                return ResponseHandler_1.ResponseHandler.error(err, callback);
	            });
	        }
	        else {
	            return ResponseHandler_1.ResponseHandler.error({ status: 400, description: "Session ID is required!", code: "402" }, callback);
	        }
	    };
	    Belfius.prototype.nonce = function (sessionId, callback) {
	        var _this = this;
	        return this.isBelfiusReader(sessionId).then(function (compatibleReader) {
	            if (compatibleReader) {
	                return _this.apdu(Belfius.NONCE_APDU, sessionId, callback);
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error({ status: 400,
	                    description: "Reader is not compatible with this request.", code: "2" }, callback);
	            }
	        });
	    };
	    Belfius.prototype.stx = function (command, sessionId, callback) {
	        var _this = this;
	        return this.isBelfiusReader(sessionId).then(function (compatibleReader) {
	            if (compatibleReader) {
	                var stxApdu = Belfius.NONCE_APDU;
	                stxApdu.data = command;
	                return _this.apdu(stxApdu, sessionId, callback);
	            }
	            else {
	                return ResponseHandler_1.ResponseHandler.error({ status: 400,
	                    description: "Reader is not compatible with this request.", code: "2" }, callback);
	            }
	        });
	    };
	    return Belfius;
	}(RemoteLoading_1.RemoteLoading));
	Belfius.NONCE_APDU = {
	    cla: "F1",
	    ins: "95",
	    p1: "F7",
	    p2: "E4",
	    data: "FE0000040001300000"
	};
	exports.Belfius = Belfius;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(335);
	var EidBe_1 = __webpack_require__(484);
	var ResponseHandler_1 = __webpack_require__(482);
	var _ = __webpack_require__(330);
	var CardUtil_1 = __webpack_require__(498);
	var Aventra_1 = __webpack_require__(489);
	var GenericService = (function () {
	    function GenericService() {
	    }
	    GenericService.containerForReader = function (client, readerId, callback) {
	        return this.checkPrerequisites(client, readerId, {}).then(function (res) {
	            return ResponseHandler_1.ResponseHandler.response({ data: res.container, success: true }, callback);
	        }).catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.dumpData = function (client, readerId, data, callback) {
	        return this.checkPrerequisites(client, readerId, data)
	            .then(this.determineDataDumpMethod)
	            .then(GenericService.doDataDump)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.authenticateCapable = function (client, callback) {
	        return client.core().readersCardAvailable()
	            .then(this.checkCanAuthenticate)
	            .then(function (res) { return { client: client, readers: res }; })
	            .then(this.filterByAvailableContainers)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.signCapable = function (client, callback) {
	        return client.core().readersCardAvailable()
	            .then(this.checkCanSign)
	            .then(function (res) { return { client: client, readers: res }; })
	            .then(this.filterByAvailableContainers)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.verifyPinCapable = function (client, callback) {
	        return client.core().readersCardAvailable()
	            .then(this.checkCanVerifyPin)
	            .then(function (res) { return { client: client, readers: res }; })
	            .then(this.filterByAvailableContainers)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.authenticate = function (client, readerId, data, callback) {
	        return this.checkPrerequisites(client, readerId, data)
	            .then(this.determineAlgorithm)
	            .then(GenericService.doAuthenticate)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.sign = function (client, readerId, data, callback) {
	        return this.checkPrerequisites(client, readerId, data)
	            .then(this.determineAlgorithm)
	            .then(GenericService.doSign)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.verifyPin = function (client, readerId, data, callback) {
	        return this.checkPrerequisites(client, readerId, data)
	            .then(GenericService.doVerifyPin)
	            .then(function (res) { return ResponseHandler_1.ResponseHandler.response(res, callback); })
	            .catch(function (err) { return ResponseHandler_1.ResponseHandler.error(err, callback); });
	    };
	    GenericService.checkCanAuthenticate = function (data) {
	        return new es6_promise_1.Promise(function (resolve) {
	            data.data = _.filter(data.data, function (reader) { return CardUtil_1.CardUtil.canAuthenticate(reader.card); });
	            resolve(data);
	        });
	    };
	    GenericService.checkCanSign = function (data) {
	        return new es6_promise_1.Promise(function (resolve) {
	            data.data = _.filter(data.data, function (reader) { return CardUtil_1.CardUtil.canSign(reader.card); });
	            resolve(data);
	        });
	    };
	    GenericService.checkCanVerifyPin = function (data) {
	        return new es6_promise_1.Promise(function (resolve) {
	            data.data = _.filter(data.data, function (reader) { return CardUtil_1.CardUtil.canVerifyPin(reader.card); });
	            resolve(data);
	        });
	    };
	    GenericService.filterByAvailableContainers = function (args) {
	        return args.client.core().plugins().then(function (plugins) {
	            return new es6_promise_1.Promise(function (resolve) {
	                args.readers.data = _.filter(args.readers.data, function (reader) {
	                    return _.find(plugins.data, function (ct) { return ct.id === CardUtil_1.CardUtil.determineContainer(reader.card); });
	                });
	                resolve(args.readers);
	            });
	        });
	    };
	    GenericService.checkPrerequisites = function (client, readerId, data) {
	        return client.core().readersCardAvailable()
	            .then(function (readers) { return { readerId: readerId, readers: readers }; })
	            .then(this.checkReaderPresent)
	            .then(this.determineContainerForCard)
	            .then(function (container) { return { client: client, container: container }; })
	            .then(this.checkContainerAvailable)
	            .then(function (args) {
	            return { client: args.client, readerId: readerId, container: args.container, data: data };
	        });
	    };
	    GenericService.checkReaderPresent = function (args) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var reader = _.find(args.readers.data, function (rd) { return rd.id === args.readerId; });
	            if (reader) {
	                resolve(reader);
	            }
	            else {
	                if (args.readerId && args.readerId.length) {
	                    reject("No card found for this ID");
	                }
	                else {
	                    reject("Reader ID is required.");
	                }
	            }
	        });
	    };
	    GenericService.checkContainerAvailable = function (args) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            if (args && args.container) {
	                args.client.core().plugins().then(function (res) {
	                    if (_.find(res.data, function (ct) { return ct.id === args.container; })) {
	                        resolve(args);
	                    }
	                    else {
	                        reject("Container for this card is not available");
	                    }
	                });
	            }
	            else {
	                reject("Unknown card type");
	            }
	        });
	    };
	    GenericService.determineAlgorithm = function (args) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            if (!args.data.algorithm_reference || !args.data.algorithm_reference.length) {
	                args.data.algorithm_reference = CardUtil_1.CardUtil.defaultAlgo(args.container);
	            }
	            if (!args.data.algorithm_reference) {
	                reject("No algorithm reference provided and cannot determine default algorithm");
	            }
	            else {
	                resolve(args);
	            }
	        });
	    };
	    GenericService.determineContainerForCard = function (reader) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            if (reader && reader.card) {
	                resolve(CardUtil_1.CardUtil.determineContainer(reader.card));
	            }
	            else {
	                reject("No card present in reader");
	            }
	        });
	    };
	    GenericService.determineDataDumpMethod = function (args) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            args.dumpMethod = CardUtil_1.CardUtil.dumpMethod(args.container);
	            args.dumpOptions = CardUtil_1.CardUtil.dumpOptions(args.container);
	            if (args.dumpMethod) {
	                resolve(args);
	            }
	            else {
	                reject("Cannot determine method to use for data dump");
	            }
	        });
	    };
	    GenericService.doDataDump = function (args) {
	        if (args.container === "luxeid") {
	            return args.client.luxeid(args.readerId, args.data.pin).allData({ filters: [], parseCerts: true }, args.data);
	        }
	        if (args.dumpOptions) {
	            return args.client[args.container](args.readerId)[args.dumpMethod](args.dumpOptions, args.data);
	        }
	        else {
	            return args.client[args.container](args.readerId)[args.dumpMethod](args.data);
	        }
	    };
	    GenericService.doSign = function (args) {
	        if (args.container === "luxeid") {
	            return args.client.luxeid(args.readerId, args.data.pin).signData(args.data);
	        }
	        else {
	            return args.client[args.container](args.readerId).signData(args.data);
	        }
	    };
	    GenericService.doAuthenticate = function (args) {
	        if (args.container === "luxeid") {
	            return args.client.luxeid(args.readerId, args.data.pin).authenticate(args.data);
	        }
	        else {
	            return args.client[args.container](args.readerId).authenticate(args.data);
	        }
	    };
	    GenericService.doVerifyPin = function (args) {
	        if (args.container === "luxeid") {
	            return args.client.luxeid(args.readerId, args.data.pin).verifyPin(args.data);
	        }
	        else if (args.container === "beid") {
	            var verifyPinData = {
	                pin: args.data.pin,
	                private_key_reference: EidBe_1.EidBe.VERIFY_PRIV_KEY_REF
	            };
	            return args.client.beid(args.readerId).verifyPin(verifyPinData);
	        }
	        else if (args.container === "aventra") {
	            var verifyPinData = {
	                pin: args.data.pin,
	                private_key_reference: Aventra_1.Aventra.DEFAULT_VERIFY_PIN
	            };
	            return args.client.aventra(args.readerId).verifyPin(verifyPinData);
	        }
	        else {
	            return args.client[args.container](args.readerId).verifyPin(args.data);
	        }
	    };
	    return GenericService;
	}());
	exports.GenericService = GenericService;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(330);
	var CardUtil = (function () {
	    function CardUtil() {
	    }
	    CardUtil.canAuthenticate = function (card) {
	        var container = this.determineContainer(card);
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "luxeid":
	            case "luxtrust":
	            case "oberthur":
	            case "piv":
	            case "pteid":
	                return true;
	            case "ocra":
	            case "emv":
	            case "mobib":
	            default:
	                return false;
	        }
	    };
	    CardUtil.canSign = function (card) {
	        var container = this.determineContainer(card);
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "luxeid":
	            case "luxtrust":
	            case "oberthur":
	            case "piv":
	            case "pteid":
	                return true;
	            case "ocra":
	            case "emv":
	            case "mobib":
	            default:
	                return false;
	        }
	    };
	    CardUtil.canVerifyPin = function (card) {
	        var container = this.determineContainer(card);
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "luxeid":
	            case "luxtrust":
	            case "oberthur":
	            case "ocra":
	            case "piv":
	            case "pteid":
	                return true;
	            case "emv":
	            case "mobib":
	            default:
	                return false;
	        }
	    };
	    CardUtil.determineContainer = function (card) {
	        if (!_.isEmpty(card) && !_.isEmpty(card.description)) {
	            if (findDescription(card.description, "Belgium Electronic ID card")) {
	                return "beid";
	            }
	            else if (findDescription(card.description, "Grand Duchy of Luxembourg / Identity card with LuxTrust certificate (eID)")) {
	                return "luxeid";
	            }
	            else if (findDescription(card.description, "LuxTrust card")) {
	                return "luxtrust";
	            }
	            else if (findDescription(card.description, "Juridic Person's Token (PKI)")) {
	                return "ocra";
	            }
	            else if (findDescription(card.description, "MOBIB")) {
	                return "mobib";
	            }
	            else if (findDescription(card.description, "Mastercard")) {
	                return "emv";
	            }
	            else if (findDescription(card.description, "Oberthur")) {
	                return "oberthur";
	            }
	            else if (findDescription(card.description, "Aventra")) {
	                return "aventra";
	            }
	            else if (findDescription(card.description, "PIV")) {
	                return "piv";
	            }
	            else if (findDescription(card.description, "CIV")) {
	                return "piv";
	            }
	            else if (findDescription(card.description, "Portuguese")) {
	                return "pteid";
	            }
	            else {
	                return undefined;
	            }
	        }
	        else {
	            return undefined;
	        }
	        function findDescription(descriptions, toFind) {
	            return !!_.find(descriptions, function (desc) {
	                return desc.indexOf(toFind) > -1;
	            });
	        }
	    };
	    CardUtil.defaultAlgo = function (container) {
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "oberthur":
	            case "piv":
	            case "luxeid":
	            case "luxtrust":
	            case "pteid":
	                return "sha256";
	            default:
	                return undefined;
	        }
	    };
	    CardUtil.dumpMethod = function (container) {
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "emv":
	            case "luxeid":
	            case "luxtrust":
	            case "mobib":
	            case "oberthur":
	            case "ocra":
	            case "piv":
	            case "pteid":
	                return "allData";
	            case "safenet":
	                return "slots";
	            default:
	                return undefined;
	        }
	    };
	    CardUtil.dumpOptions = function (container) {
	        switch (container) {
	            case "aventra":
	            case "beid":
	            case "dnie":
	            case "luxeid":
	            case "luxtrust":
	            case "mobib":
	            case "oberthur":
	            case "ocra":
	            case "piv":
	            case "pteid":
	                return { filters: [], parseCerts: true };
	            case "safenet":
	                return undefined;
	            case "emv":
	                return [];
	            default:
	                return undefined;
	        }
	    };
	    return CardUtil;
	}());
	exports.CardUtil = CardUtil;


/***/ })
/******/ ]);
//# sourceMappingURL=GCLLib.js.map