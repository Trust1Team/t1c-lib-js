import { LocalConnection, QueryParams, RequestHeaders } from '../../../../core/client/Connection';
import { RestException } from '../../../../core/exceptions/CoreExceptions';
import { AuthenticateOrSignData, GenericSecuredCertCard, OptionalPin } from '../../Card';
import { CertificateResponse, CertificatesResponse, DataResponse, T1CResponse } from '../../../../core/service/CoreModel';
import { AbstractEidLUX, AllCertsResponse, AllDataResponse, BiometricResponse, PictureResponse, SignatureImageResponse } from './EidLuxModel';
import { Options, RequestOptions } from '../../../../util/RequestHandler';
export { EidLux };
declare class EidLux extends GenericSecuredCertCard implements AbstractEidLUX {
    protected baseUrl: string;
    protected containerUrl: string;
    protected connection: LocalConnection;
    protected reader_id: string;
    private pin;
    static BIOMETRIC: string;
    static ADDRESS: string;
    static PHOTO: string;
    static SIGNATURE_IMAGE: string;
    constructor(baseUrl: string, containerUrl: string, connection: LocalConnection, reader_id: string, pin: string);
    private static EncryptedPinHeader(pin);
    allDataFilters(): string[];
    allCertFilters(): string[];
    allData(options?: string[] | Options, callback?: (error: RestException, data: AllDataResponse) => void): Promise<AllDataResponse>;
    allCerts(options?: string[] | Options, callback?: (error: RestException, data: AllCertsResponse) => void): Promise<AllCertsResponse>;
    biometric(callback?: (error: RestException, data: BiometricResponse) => void): Promise<BiometricResponse>;
    picture(callback?: (error: RestException, data: PictureResponse) => void): Promise<PictureResponse>;
    rootCertificate(options?: Options, callback?: (error: RestException, data: CertificatesResponse) => void): Promise<CertificatesResponse>;
    authenticationCertificate(options?: Options, callback?: (error: RestException, data: CertificateResponse) => void | Promise<CertificateResponse>): Promise<CertificateResponse>;
    nonRepudiationCertificate(options?: Options, callback?: (error: RestException, data: CertificateResponse) => void | Promise<CertificateResponse>): Promise<CertificateResponse>;
    verifyPin(body: OptionalPin, callback?: (error: RestException, data: T1CResponse) => void | Promise<T1CResponse>): Promise<any>;
    signData(body: AuthenticateOrSignData, callback?: (error: RestException, data: DataResponse) => void | Promise<DataResponse>): Promise<any>;
    authenticate(body: AuthenticateOrSignData, callback?: (error: RestException, data: DataResponse) => void | Promise<DataResponse>): Promise<any>;
    signatureImage(callback?: (error: RestException, data: SignatureImageResponse) => void | Promise<SignatureImageResponse>): Promise<any>;
    protected getCertificate(certUrl: string, options: RequestOptions, params?: QueryParams, headers?: RequestHeaders): Promise<CertificateResponse>;
    protected getCertificateArray(certUrl: string, options: RequestOptions, params?: QueryParams, headers?: RequestHeaders): Promise<CertificatesResponse>;
}
